#!/bin/bash

# Script de verifica√ß√£o r√°pida para servidor Hostinger
# Execute este script no servidor via SSH

echo "üîç Verifica√ß√£o R√°pida - Servidor Hostinger"
echo "=========================================="

# Configura√ß√µes
PROJECT_ROOT="/home/$(whoami)"
API_DIR="$PROJECT_ROOT/api-hom.virtualt.com.br"
FRONTEND_DIR="$PROJECT_ROOT/app-hom.virtualt.com.br"

echo ""
echo "üìÅ 1. Verificando estrutura de diret√≥rios..."

if [ -d "$API_DIR" ]; then
    echo "‚úÖ Diret√≥rio da API existe: $API_DIR"
    echo "   Conte√∫do:"
    ls -la "$API_DIR" | head -5
else
    echo "‚ùå Diret√≥rio da API n√£o existe: $API_DIR"
fi

if [ -d "$FRONTEND_DIR" ]; then
    echo "‚úÖ Diret√≥rio do Frontend existe: $FRONTEND_DIR"
    echo "   Conte√∫do:"
    ls -la "$FRONTEND_DIR" | head -5
else
    echo "‚ùå Diret√≥rio do Frontend n√£o existe: $FRONTEND_DIR"
fi

echo ""
echo "üîß 2. Verificando Git Hook..."

if [ -f "$PROJECT_ROOT/.git/hooks/post-receive" ]; then
    echo "‚úÖ Git Hook existe"
    if [ -x "$PROJECT_ROOT/.git/hooks/post-receive" ]; then
        echo "‚úÖ Git Hook √© execut√°vel"
    else
        echo "‚ùå Git Hook n√£o √© execut√°vel"
        echo "   Execute: chmod +x $PROJECT_ROOT/.git/hooks/post-receive"
    fi
else
    echo "‚ùå Git Hook n√£o existe"
    echo "   Execute: ./setup-git-hooks-subdomains.sh"
fi

echo ""
echo "üìã 3. Verificando configura√ß√£o Git..."

cd "$PROJECT_ROOT"
if [ -d ".git" ]; then
    echo "‚úÖ Reposit√≥rio Git existe"
    echo "   Remote:"
    git remote -v 2>/dev/null || echo "   Sem remote configurado"
    echo "   Branches:"
    git branch -a 2>/dev/null || echo "   Sem branches encontradas"
else
    echo "‚ùå Reposit√≥rio Git n√£o existe"
    echo "   Execute: git init"
fi

echo ""
echo "üîê 4. Verificando arquivos de configura√ß√£o..."

if [ -f "$API_DIR/.env" ]; then
    echo "‚úÖ .env da API existe"
else
    echo "‚ùå .env da API n√£o existe"
    echo "   Execute: cd $API_DIR && cp .env.example .env"
fi

if [ -f "$API_DIR/index.php" ]; then
    echo "‚úÖ index.php da API existe"
else
    echo "‚ùå index.php da API n√£o existe"
fi

if [ -f "$FRONTEND_DIR/index.html" ]; then
    echo "‚úÖ index.html do Frontend existe"
else
    echo "‚ùå index.html do Frontend n√£o existe"
fi

echo ""
echo "üìÑ 5. Verificando arquivos .htaccess..."

if [ -f "$API_DIR/.htaccess" ]; then
    echo "‚úÖ .htaccess da API existe"
else
    echo "‚ùå .htaccess da API n√£o existe"
fi

if [ -f "$FRONTEND_DIR/.htaccess" ]; then
    echo "‚úÖ .htaccess do Frontend existe"
else
    echo "‚ùå .htaccess do Frontend n√£o existe"
fi

echo ""
echo "üîí 6. Verificando permiss√µes..."

if [ -d "$API_DIR/storage" ]; then
    PERM=$(stat -c "%a" "$API_DIR/storage")
    if [ "$PERM" = "755" ]; then
        echo "‚úÖ Permiss√µes do storage da API corretas (755)"
    else
        echo "‚ö†Ô∏è Permiss√µes do storage da API: $PERM (deveria ser 755)"
    fi
fi

if [ -d "$FRONTEND_DIR" ]; then
    PERM=$(stat -c "%a" "$FRONTEND_DIR")
    if [ "$PERM" = "755" ]; then
        echo "‚úÖ Permiss√µes do Frontend corretas (755)"
    else
        echo "‚ö†Ô∏è Permiss√µes do Frontend: $PERM (deveria ser 755)"
    fi
fi

echo ""
echo "üìä 7. Verificando logs..."

if [ -f "$PROJECT_ROOT/deploy.log" ]; then
    echo "‚úÖ Log de deploy existe"
    echo "   √öltimas linhas:"
    tail -3 "$PROJECT_ROOT/deploy.log"
else
    echo "‚ùå Log de deploy n√£o existe"
fi

if [ -f "$API_DIR/storage/logs/laravel.log" ]; then
    echo "‚úÖ Log do Laravel existe"
    echo "   √öltimas linhas:"
    tail -3 "$API_DIR/storage/logs/laravel.log"
else
    echo "‚ùå Log do Laravel n√£o existe"
fi

echo ""
echo "üåê 8. Testando conectividade..."

echo "üì° API (api-hom.virtualt.com.br):"
API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://api-hom.virtualt.com.br)
case $API_STATUS in
    200) echo "‚úÖ API funcionando (HTTP 200)" ;;
    301|302) echo "‚ö†Ô∏è API redirecionando (HTTP $API_STATUS)" ;;
    403) echo "‚ùå API com erro de permiss√£o (HTTP 403)" ;;
    404) echo "‚ùå API n√£o encontrada (HTTP 404)" ;;
    500) echo "‚ùå Erro interno do servidor (HTTP 500)" ;;
    *) echo "‚ùå API n√£o responde (HTTP $API_STATUS)" ;;
esac

echo "üåê Frontend (app-hom.virtualt.com.br):"
FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://app-hom.virtualt.com.br)
case $FRONTEND_STATUS in
    200) echo "‚úÖ Frontend funcionando (HTTP 200)" ;;
    301|302) echo "‚ö†Ô∏è Frontend redirecionando (HTTP $FRONTEND_STATUS)" ;;
    403) echo "‚ùå Frontend com erro de permiss√£o (HTTP 403)" ;;
    404) echo "‚ùå Frontend n√£o encontrado (HTTP 404)" ;;
    500) echo "‚ùå Erro interno do servidor (HTTP 500)" ;;
    *) echo "‚ùå Frontend n√£o responde (HTTP $FRONTEND_STATUS)" ;;
esac

echo ""
echo "üéØ RESUMO E PR√ìXIMOS PASSOS:"
echo ""

if [ "$API_STATUS" = "200" ] && [ "$FRONTEND_STATUS" = "200" ]; then
    echo "üéâ TUDO FUNCIONANDO! Deploy realizado com sucesso!"
else
    echo "‚ö†Ô∏è PROBLEMAS DETECTADOS:"

    if [ ! -f "$PROJECT_ROOT/.git/hooks/post-receive" ]; then
        echo "   - Git Hook n√£o configurado"
        echo "     Execute: ./setup-git-hooks-subdomains.sh"
    fi

    if [ ! -f "$API_DIR/.env" ]; then
        echo "   - .env da API n√£o configurado"
        echo "     Execute: cd $API_DIR && cp .env.example .env"
    fi

    if [ ! -f "$API_DIR/index.php" ] || [ ! -f "$FRONTEND_DIR/index.html" ]; then
        echo "   - Deploy n√£o executado"
        echo "     Execute: git pull origin hostinger-hom"
    fi

    echo ""
    echo "üîß COMANDOS PARA CORRIGIR:"
    echo "1. Configurar Git Hook: ./setup-git-hooks-subdomains.sh"
    echo "2. Configurar .env: cd $API_DIR && cp .env.example .env"
    echo "3. Fazer deploy: git pull origin hostinger-hom"
    echo "4. Configurar permiss√µes: chmod -R 755 $API_DIR $FRONTEND_DIR"
fi

echo ""
echo "üìû Para mais detalhes, execute: ./diagnose-deploy.sh"
