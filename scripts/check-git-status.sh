#!/bin/bash

# Script para verificar e limpar diret√≥rios .git existentes
# Execute este script antes de configurar o Git Hooks

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir com cores
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è $1${NC}"
}

echo "üîç Verifica√ß√£o de Status do Git"
echo "================================"

# Diret√≥rio do projeto
PROJECT_ROOT="/home/$(whoami)"

echo ""
print_info "Verificando diret√≥rio: $PROJECT_ROOT"

# Verificar se existe .git
if [ -d "$PROJECT_ROOT/.git" ]; then
    print_warning "Diret√≥rio .git encontrado!"

    # Verificar se tem configura√ß√£o v√°lida
    if [ -f "$PROJECT_ROOT/.git/config" ]; then
        print_info "Arquivo de configura√ß√£o Git encontrado"

        echo ""
        echo "üìã Configura√ß√£o atual:"
        echo "======================"

        # Mostrar remotes configurados
        cd "$PROJECT_ROOT"
        echo "Remotes configurados:"
        git remote -v 2>/dev/null || echo "Nenhum remote configurado"

        echo ""
        echo "Branches dispon√≠veis:"
        git branch -a 2>/dev/null || echo "Nenhuma branch encontrada"

        echo ""
        echo "√öltimo commit:"
        git log --oneline -1 2>/dev/null || echo "Nenhum commit encontrado"

        # Verificar se √© do projeto correto
        if grep -q "spsise/rei-do-oleo" "$PROJECT_ROOT/.git/config" 2>/dev/null; then
            echo ""
            print_status "‚úÖ .git j√° configurado para o projeto correto (spsise/rei-do-oleo)"
            echo ""
            print_info "Op√ß√µes dispon√≠veis:"
            echo "1. Usar configura√ß√£o atual (recomendado se j√° estiver funcionando)"
            echo "2. Limpar e reconfigurar (se houver problemas)"
            echo "3. Fazer backup e reconfigurar (mais seguro)"

            read -p "Escolha uma op√ß√£o (1/2/3): " choice

            case $choice in
                1)
                    print_status "Usando configura√ß√£o atual"
                    echo "Voc√™ pode prosseguir com a configura√ß√£o do Git Hooks"
                    ;;
                2)
                    print_warning "Limpando configura√ß√£o atual..."
                    read -p "Tem certeza? Isso remover√° todo o hist√≥rico local (y/N): " -n 1 -r
                    echo
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        rm -rf "$PROJECT_ROOT/.git"
                        print_status "Diret√≥rio .git removido"
                        echo "Execute o script de configura√ß√£o novamente"
                    else
                        print_info "Opera√ß√£o cancelada"
                    fi
                    ;;
                3)
                    print_info "Fazendo backup da configura√ß√£o atual..."
                    BACKUP_DIR="$PROJECT_ROOT/git-backup-$(date +%Y%m%d-%H%M%S)"
                    mkdir -p "$BACKUP_DIR"
                    cp -r "$PROJECT_ROOT/.git" "$BACKUP_DIR/"
                    print_status "Backup criado em: $BACKUP_DIR"

                    read -p "Deseja limpar e reconfigurar? (y/N): " -n 1 -r
                    echo
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        rm -rf "$PROJECT_ROOT/.git"
                        print_status "Diret√≥rio .git removido"
                        echo "Execute o script de configura√ß√£o novamente"
                    else
                        print_info "Opera√ß√£o cancelada"
                    fi
                    ;;
                *)
                    print_error "Op√ß√£o inv√°lida"
                    exit 1
                    ;;
            esac
        else
            echo ""
            print_warning "‚ö†Ô∏è .git existe mas √© de outro projeto"

            # Mostrar qual projeto est√° configurado
            echo "Projeto configurado atualmente:"
            grep -E "(url|remote)" "$PROJECT_ROOT/.git/config" 2>/dev/null || echo "Sem configura√ß√£o de remote"

            echo ""
            print_info "Op√ß√µes dispon√≠veis:"
            echo "1. Limpar e configurar para spsise/rei-do-oleo"
            echo "2. Fazer backup e configurar para spsise/rei-do-oleo"
            echo "3. Cancelar e configurar manualmente"

            read -p "Escolha uma op√ß√£o (1/2/3): " choice

            case $choice in
                1)
                    print_warning "Limpando configura√ß√£o atual..."
                    read -p "Tem certeza? (y/N): " -n 1 -r
                    echo
                    if [[ $REPLY =~ ^[Yy]$ ]]; then
                        rm -rf "$PROJECT_ROOT/.git"
                        print_status "Diret√≥rio .git removido"
                        echo "Execute o script de configura√ß√£o novamente"
                    else
                        print_info "Opera√ß√£o cancelada"
                    fi
                    ;;
                2)
                    print_info "Fazendo backup da configura√ß√£o atual..."
                    BACKUP_DIR="$PROJECT_ROOT/git-backup-$(date +%Y%m%d-%H%M%S)"
                    mkdir -p "$BACKUP_DIR"
                    cp -r "$PROJECT_ROOT/.git" "$BACKUP_DIR/"
                    print_status "Backup criado em: $BACKUP_DIR"

                    rm -rf "$PROJECT_ROOT/.git"
                    print_status "Diret√≥rio .git removido"
                    echo "Execute o script de configura√ß√£o novamente"
                    ;;
                3)
                    print_info "Opera√ß√£o cancelada"
                    echo "Configure manualmente o .git ou remova-o antes de continuar"
                    ;;
                *)
                    print_error "Op√ß√£o inv√°lida"
                    exit 1
                    ;;
            esac
        fi
    else
        print_warning "‚ö†Ô∏è .git existe mas n√£o tem configura√ß√£o v√°lida"

        read -p "Deseja limpar e reconfigurar? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            rm -rf "$PROJECT_ROOT/.git"
            print_status "Diret√≥rio .git removido"
            echo "Execute o script de configura√ß√£o novamente"
        else
            print_info "Opera√ß√£o cancelada"
        fi
    fi
else
    print_status "‚úÖ Nenhum diret√≥rio .git encontrado"
    echo "Pode prosseguir com a configura√ß√£o do Git Hooks"
fi

echo ""
print_info "Verificando outros diret√≥rios .git no sistema..."

# Verificar se existem outros .git em subdiret√≥rios
find "$PROJECT_ROOT" -name ".git" -type d 2>/dev/null | while read git_dir; do
    if [ "$git_dir" != "$PROJECT_ROOT/.git" ]; then
        print_warning "‚ö†Ô∏è Encontrado .git em: $git_dir"
    fi
done

echo ""
print_info "Verifica√ß√£o conclu√≠da!"

echo ""
print_info "Pr√≥ximos passos:"
echo "1. Se n√£o h√° .git ou foi removido: execute setup-git-hooks-subdomains.sh"
echo "2. Se .git j√° est√° configurado corretamente: pode prosseguir com a configura√ß√£o"
echo "3. Se h√° problemas: resolva manualmente ou use este script novamente"
