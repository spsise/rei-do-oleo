name: Deploy to Hostinger

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  HOSTINGER_DOMAIN: ${{ secrets.HOSTINGER_DOMAIN }}
  HOSTINGER_USERNAME: ${{ secrets.HOSTINGER_USERNAME }}
  HOSTINGER_PASSWORD: ${{ secrets.HOSTINGER_PASSWORD }}
  HOSTINGER_PORT: ${{ secrets.HOSTINGER_PORT || '21' }}

jobs:
  # Build Frontend
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: npm run build
        env:
          VITE_API_URL: https://${{ secrets.HOSTINGER_DOMAIN }}/api

      - name: Upload frontend build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist

  # Build Backend
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, zip

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: backend/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('backend/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        working-directory: backend
        run: composer install --prefer-dist --no-dev --optimize-autoloader

      - name: Prepare backend for production
        working-directory: backend
        run: |
          # Remove development files
          rm -rf tests/
          rm -rf .phpunit.cache/
          rm -rf storage/logs/*.log
          rm -rf storage/framework/cache/*
          rm -rf storage/framework/sessions/*
          rm -rf storage/framework/views/*

          # Create production .env
          cp .env.example .env.production
          echo "APP_ENV=production" >> .env.production
          echo "APP_DEBUG=false" >> .env.production
          echo "APP_URL=https://${{ secrets.HOSTINGER_DOMAIN }}" >> .env.production

          # Optimize for production
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

      - name: Upload backend build
        uses: actions/upload-artifact@v3
        with:
          name: backend-build
          path: backend

  # Deploy to Hostinger
  deploy:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: builds

      - name: Deploy Backend via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ env.HOSTINGER_DOMAIN }}
          username: ${{ env.HOSTINGER_USERNAME }}
          password: ${{ env.HOSTINGER_PASSWORD }}
          port: ${{ env.HOSTINGER_PORT }}
          local-dir: ./builds/backend-build/
          server-dir: ./public_html/api/
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**
            **/tests/**
            **/.env.example
            **/composer.lock
            **/package.json
            **/package-lock.json
            **/vite.config.js
            **/tailwind.config.js
            **/postcss.config.js
            **/.eslintrc.js
            **/.prettierrc
            **/tsconfig.json
            **/tsconfig.app.json
            **/tsconfig.node.json
            **/index.html
            **/public/**
            **/src/**

      - name: Deploy Frontend via FTP
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ env.HOSTINGER_DOMAIN }}
          username: ${{ env.HOSTINGER_USERNAME }}
          password: ${{ env.HOSTINGER_PASSWORD }}
          port: ${{ env.HOSTINGER_PORT }}
          local-dir: ./builds/frontend-build/
          server-dir: ./public_html/
          exclude: |
            **/.git*
            **/.git*/**
            **/node_modules/**

      - name: Setup Laravel on server
        run: |
          # Create .htaccess for Laravel API
          echo "RewriteEngine On" > .htaccess-api
          echo "RewriteCond %{REQUEST_FILENAME} !-d" >> .htaccess-api
          echo "RewriteCond %{REQUEST_FILENAME} !-f" >> .htaccess-api
          echo "RewriteRule ^ index.php [L]" >> .htaccess-api
          echo "" >> .htaccess-api
          echo "# Security headers" >> .htaccess-api
          echo "Header always set X-Content-Type-Options nosniff" >> .htaccess-api
          echo "Header always set X-Frame-Options DENY" >> .htaccess-api
          echo "Header always set X-XSS-Protection \"1; mode=block\"" >> .htaccess-api

      - name: Upload .htaccess for API
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ env.HOSTINGER_DOMAIN }}
          username: ${{ env.HOSTINGER_USERNAME }}
          password: ${{ env.HOSTINGER_PASSWORD }}
          port: ${{ env.HOSTINGER_PORT }}
          local-dir: ./
          server-dir: ./public_html/api/
          include: .htaccess-api

      - name: Notify deployment success
        run: |
          echo "üöÄ Deploy completed successfully!"
          echo "üåê Frontend: https://${{ secrets.HOSTINGER_DOMAIN }}"
          echo "üîó API: https://${{ secrets.HOSTINGER_DOMAIN }}/api"
