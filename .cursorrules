## 📁 ESTRUTURA DE ARQUIVOS E MAPEAMENTO DO SISTEMA

### Estrutura Completa do Monorepo

```
rei-do-oleo/
├── backend/                           # Laravel 12 API
│   ├── app/
│   │   ├── Console/
│   │   │   └── Commands/              # Artisan Commands
│   │   ├── Events/                    # Event Classes
│   │   ├── Exceptions/                # Custom Exceptions
│   │   ├── Http/
│   │   │   ├── Controllers/           # API Controllers
│   │   │   │   ├── Api/               # API Controllers
│   │   │   │   └── Web/               # Web Controllers
│   │   │   ├── Middleware/            # Custom Middleware
│   │   │   ├── Requests/              # Form Requests
│   │   │   └── Resources/             # API Resources
│   │   ├── Jobs/                      # Queue Jobs
│   │   ├── Listeners/                 # Event Listeners
│   │   ├── Mail/                      # Mail Classes
│   │   ├── Models/                    # Eloquent Models
│   │   │   ├── Traits/                # Model Traits
│   │   │   └── Scopes/                # Query Scopes
│   │   ├── Notifications/             # Notification Classes
│   │   ├── Policies/                  # Authorization Policies
│   │   ├── Providers/                 # Service Providers
│   │   ├── Repositories/              # Repository Pattern
│   │   │   ├── Interfaces/            # Repository Interfaces
│   │   │   └── Implementations/       # Repository Implementations
│   │   ├── Services/                  # Business Logic Services
│   │   └── Support/                   # Helper Classes
│   ├── bootstrap/
│   ├── config/                        # Configuration Files
│   ├── database/
│   │   ├── factories/                 # Model Factories
│   │   ├── migrations/                # Database Migrations
│   │   └── seeders/                   # Database Seeders
│   ├── lang/                          # Localization Files
│   ├── public/                        # Public Assets
│   ├── resources/
│   │   ├── js/                        # JavaScript Assets
│   │   ├── sass/                      # SASS Files
│   │   └── views/                     # Blade Templates
│   ├── routes/
│   │   ├── api.php                    # API Routes
│   │   ├── web.php                    # Web Routes
│   │   └── channels.php               # Broadcasting Routes
│   ├── storage/
│   │   ├── app/                       # Application Storage
│   │   ├── framework/                 # Framework Storage
│   │   └── logs/                      # Log Files
│   ├── tests/
│   │   ├── Feature/                   # Feature Tests
│   │   ├── Unit/                      # Unit Tests
│   │   └── TestCase.php               # Base Test Case
│   ├── .env.example                   # Environment Template
│   ├── .env                           # Environment Variables
│   ├── artisan                        # Artisan CLI
│   ├── composer.json                  # PHP Dependencies
│   └── phpunit.xml                    # PHPUnit Configuration
├── frontend/                          # React 18 + TypeScript + Vite
│   ├── public/
│   │   ├── index.html                 # Main HTML File
│   │   ├── favicon.ico                # Favicon
│   │   └── manifest.json              # PWA Manifest
│   ├── src/
│   │   ├── components/                # React Components
│   │   │   ├── ui/                    # Base UI Components
│   │   │   │   ├── Button/            # Button Component
│   │   │   │   ├── Input/             # Input Component
│   │   │   │   ├── Modal/             # Modal Component
│   │   │   │   ├── Table/             # Table Component
│   │   │   │   └── index.ts           # UI Components Export
│   │   │   ├── layout/                # Layout Components
│   │   │   │   ├── Header/            # Header Component
│   │   │   │   ├── Sidebar/           # Sidebar Component
│   │   │   │   ├── Footer/            # Footer Component
│   │   │   │   └── index.ts           # Layout Components Export
│   │   │   ├── forms/                 # Form Components
│   │   │   ├── charts/                # Chart Components
│   │   │   └── common/                # Common Components
│   │   ├── pages/                     # Page Components
│   │   │   ├── Dashboard/             # Dashboard Page
│   │   │   ├── Auth/                  # Authentication Pages
│   │   │   ├── Products/              # Products Pages
│   │   │   ├── Orders/                # Orders Pages
│   │   │   └── Settings/              # Settings Pages
│   │   ├── hooks/                     # Custom React Hooks
│   │   │   ├── useApi.ts              # API Hook
│   │   │   ├── useAuth.ts             # Authentication Hook
│   │   │   ├── useLocalStorage.ts     # Local Storage Hook
│   │   │   └── useDebounce.ts         # Debounce Hook
│   │   ├── services/                  # API Services
│   │   │   ├── api.ts                 # API Client
│   │   │   ├── authService.ts         # Auth Service
│   │   │   ├── productService.ts      # Product Service
│   │   │   └── orderService.ts        # Order Service
│   │   ├── store/                     # State Management
│   │   │   ├── slices/                # Redux Slices
│   │   │   ├── store.ts               # Redux Store
│   │   │   └── hooks.ts               # Redux Hooks
│   │   ├── types/                     # TypeScript Types
│   │   │   ├── api.ts                 # API Types
│   │   │   ├── auth.ts                # Auth Types
│   │   │   ├── product.ts             # Product Types
│   │   │   └── order.ts               # Order Types
│   │   ├── utils/                     # Utility Functions
│   │   │   ├── constants.ts           # Constants
│   │   │   ├── helpers.ts             # Helper Functions
│   │   │   ├── validators.ts          # Validation Functions
│   │   │   └── formatters.ts          # Formatting Functions
│   │   ├── styles/                    # Global Styles
│   │   │   ├── globals.css            # Global CSS
│   │   │   ├── tailwind.css           # Tailwind CSS
│   │   │   └── variables.css          # CSS Variables
│   │   ├── App.tsx                    # Main App Component
│   │   ├── main.tsx                   # App Entry Point
│   │   └── vite-env.d.ts              # Vite Types
│   ├── __tests__/                     # Test Files
│   │   ├── components/                # Component Tests
│   │   ├── pages/                     # Page Tests
│   │   ├── hooks/                     # Hook Tests
│   │   └── utils/                     # Utility Tests
│   ├── .env.example                   # Environment Template
│   ├── .env                           # Environment Variables
│   ├── package.json                   # Node Dependencies
│   ├── tsconfig.json                  # TypeScript Configuration
│   ├── vite.config.ts                 # Vite Configuration
│   ├── tailwind.config.js             # Tailwind Configuration
│   └── jest.config.js                 # Jest Configuration
├── docs/                              # Documentation
│   ├── api/                           # API Documentation
│   ├── deployment/                    # Deployment Guides
│   ├── development/                   # Development Guides
│   └── architecture/                  # Architecture Diagrams
├── scripts/                           # Automation Scripts
│   ├── deploy.sh                      # Deployment Script
│   ├── backup.sh                      # Backup Script
│   ├── health-check.sh                # Health Check Script
│   └── migrate-database.sh            # Database Migration Script
├── docker/                            # Docker Configuration
│   ├── Dockerfile.backend             # Backend Dockerfile
│   ├── Dockerfile.frontend            # Frontend Dockerfile
│   ├── docker-compose.yml             # Development Environment
│   ├── docker-compose.prod.yml        # Production Environment
│   ├── nginx.conf                     # Nginx Configuration
│   └── supervisord.conf               # Supervisor Configuration
├── k8s/                               # Kubernetes Configuration
│   ├── deployment.yaml                # Deployment Configuration
│   ├── service.yaml                   # Service Configuration
│   ├── ingress.yaml                   # Ingress Configuration
│   ├── configmap.yaml                 # ConfigMap Configuration
│   ├── secrets.yaml                   # Secrets Configuration
│   ├── network-policy.yaml            # Network Policy
│   └── hpa.yaml                       # Horizontal Pod Autoscaler
├── monitoring/                        # Monitoring Configuration
│   ├── prometheus.yml                 # Prometheus Configuration
│   ├── grafana-dashboard.json         # Grafana Dashboard
│   └── alert-rules.yml                # Alert Rules
├── logging/                           # Logging Configuration
│   └── logstash.conf                  # Logstash Configuration
├── .github/                           # GitHub Configuration
│   └── workflows/                     # CI/CD Workflows
│       ├── ci-cd.yml                  # Main CI/CD Pipeline
│       ├── security-scan.yml          # Security Scanning
│       └── dependency-update.yml      # Dependency Updates
├── .gitignore                         # Git Ignore Rules
├── docker-compose.yml                 # Root Docker Compose
├── README.md                          # Project Documentation
└── .cursorrules                       # Cursor AI Rules
```

### Padrões de Nomenclatura de Arquivos

#### Backend (Laravel)
- **Controllers**: `UserController.php`, `OrderController.php`
- **Models**: `User.php`, `Order.php`, `Product.php`
- **Services**: `UserService.php`, `OrderService.php`, `PaymentService.php`
- **Repositories**: `UserRepository.php`, `OrderRepository.php`
- **Requests**: `StoreUserRequest.php`, `UpdateUserRequest.php`
- **Resources**: `UserResource.php`, `OrderResource.php`
- **Migrations**: `2024_01_01_000000_create_users_table.php`
- **Seeders**: `UserSeeder.php`, `ProductSeeder.php`
- **Factories**: `UserFactory.php`, `ProductFactory.php`
- **Jobs**: `ProcessOrderJob.php`, `SendEmailJob.php`
- **Events**: `OrderCreated.php`, `UserRegistered.php`
- **Listeners**: `SendOrderConfirmation.php`, `UpdateInventory.php`
- **Policies**: `UserPolicy.php`, `OrderPolicy.php`
- **Middleware**: `ApiVersionMiddleware.php`, `RateLimitMiddleware.php`

#### Frontend (React/TypeScript)
- **Components**: `UserCard.tsx`, `OrderTable.tsx`, `ProductModal.tsx`
- **Pages**: `Dashboard.tsx`, `UserProfile.tsx`, `OrderDetails.tsx`
- **Hooks**: `useApi.ts`, `useAuth.ts`, `useLocalStorage.ts`
- **Services**: `userService.ts`, `orderService.ts`, `apiService.ts`
- **Types**: `user.types.ts`, `order.types.ts`, `api.types.ts`
- **Utils**: `constants.ts`, `helpers.ts`, `validators.ts`
- **Tests**: `UserCard.test.tsx`, `useApi.test.ts`, `helpers.test.ts`

### Estrutura de Banco de Dados

#### Tabelas Principais
```sql
-- Users Table
users (
    id, name, email, email_verified_at, password, 
    remember_token, created_at, updated_at
)

-- Products Table
products (
    id, name, description, price, stock_quantity,
    category_id, status, created_at, updated_at
)

-- Orders Table
orders (
    id, user_id, total_amount, status, payment_status,
    shipping_address, created_at, updated_at
)

-- Order Items Table
order_items (
    id, order_id, product_id, quantity, unit_price,
    total_price, created_at, updated_at
)

-- Categories Table
categories (
    id, name, description, parent_id, created_at, updated_at
)
```

### Mapeamento de Rotas da API

#### Rotas de Autenticação
- `POST /api/auth/login` - Login do usuário
- `POST /api/auth/register` - Registro de usuário
- `POST /api/auth/logout` - Logout do usuário
- `POST /api/auth/refresh` - Refresh do token
- `GET /api/auth/me` - Dados do usuário logado

#### Rotas de Usuários
- `GET /api/users` - Listar usuários
- `GET /api/users/{id}` - Buscar usuário específico
- `POST /api/users` - Criar usuário
- `PUT /api/users/{id}` - Atualizar usuário
- `DELETE /api/users/{id}` - Deletar usuário

#### Rotas de Produtos
- `GET /api/products` - Listar produtos
- `GET /api/products/{id}` - Buscar produto específico
- `POST /api/products` - Criar produto
- `PUT /api/products/{id}` - Atualizar produto
- `DELETE /api/products/{id}` - Deletar produto

#### Rotas de Pedidos
- `GET /api/orders` - Listar pedidos
- `GET /api/orders/{id}` - Buscar pedido específico
- `POST /api/orders` - Criar pedido
- `PUT /api/orders/{id}` - Atualizar pedido
- `DELETE /api/orders/{id}` - Deletar pedido

### Estrutura de Componentes React

#### Componentes Base (UI)
- `Button` - Botão reutilizável com variantes
- `Input` - Campo de entrada com validação
- `Modal` - Modal reutilizável
- `Table` - Tabela com paginação
- `Card` - Card container
- `Badge` - Badge para status
- `Spinner` - Loading spinner
- `Alert` - Alertas e notificações

#### Componentes de Layout
- `Header` - Cabeçalho da aplicação
- `Sidebar` - Menu lateral
- `Footer` - Rodapé
- `Breadcrumb` - Navegação breadcrumb
- `Layout` - Layout principal

#### Componentes de Formulário
- `Form` - Formulário base
- `FormField` - Campo de formulário
- `FormSelect` - Select dropdown
- `FormCheckbox` - Checkbox
- `FormRadio` - Radio button

### Configurações de Ambiente

#### Backend (.env)
```env
APP_NAME="Rei do Óleo"
APP_ENV=local
APP_KEY=base64:...
APP_DEBUG=true
APP_URL=http://localhost:8000

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=rei_do_oleo
DB_USERNAME=root
DB_PASSWORD=

CACHE_DRIVER=redis
SESSION_DRIVER=redis
QUEUE_CONNECTION=redis

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailpit
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"
```

#### Frontend (.env)
```env
VITE_APP_NAME="Rei do Óleo"
VITE_API_URL=http://localhost:8000/api
VITE_APP_URL=http://localhost:3000
VITE_APP_ENV=development
```

### Dependências Principais

#### Backend (composer.json)
```json
{
  "require": {
    "php": "^8.2",
    "laravel/framework": "^12.0",
    "laravel/sanctum": "^4.0",
    "laravel/telescope": "^5.0",
    "predis/predis": "^2.0",
    "spatie/laravel-permission": "^6.0",
    "spatie/laravel-activitylog": "^5.0"
  },
  "require-dev": {
    "fakerphp/faker": "^1.9.1",
    "laravel/pint": "^1.0",
    "laravel/sail": "^1.18",
    "mockery/mockery": "^1.4.4",
    "nunomaduro/collision": "^8.1",
    "phpunit/phpunit": "^10.1",
    "spatie/laravel-ignition": "^2.0"
  }
}
```

#### Frontend (package.json)
```json
{
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.0",
    "@tanstack/react-query": "^5.0.0",
    "axios": "^1.6.0",
    "tailwindcss": "^3.3.0",
    "@headlessui/react": "^1.7.0",
    "@heroicons/react": "^2.0.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@vitejs/plugin-react": "^4.0.0",
    "typescript": "^5.0.0",
    "vite": "^5.0.0",
    "jest": "^29.0.0",
    "@testing-library/react": "^14.0.0"
  }
}
```

## 👨‍💻 Perfil de Desenvolvimento

### Desenvolvedor Laravel 12 Senior

**Características obrigatórias:**

- Domínio completo de Laravel 12+ features
- Conhecimento de Eloquent ORM avançado
- Experiência com Migrations, Seeders e Factories
- Proficiência em Queue Jobs e Event Listeners
- Expertise em Laravel Sanctum/Passport
- Conhecimento de Artisan Commands personalizados
- Experiência com Service Providers e Facades
- Domínio de Form Requests e Resource Controllers
- Conhecimento de Middleware personalizado
- Experiência com Broadcasting e WebSockets
- Proficiência em testes com PHPUnit e Pest

**Práticas Laravel Avançadas:**

```php
// Repository Pattern
interface UserRepositoryInterface {
    public function findWithFilters(array $filters): Collection;
}

// Service Layer
class OrderService {
    public function __construct(
        private OrderRepository $orderRepository,
        private PaymentService $paymentService
    ) {}
}

// Custom Middleware
class ApiVersionMiddleware {
    public function handle(Request $request, Closure $next, string $version)
    {
        $request->headers->set('Accept', "application/vnd.api+json;version={$version}");
        return $next($request);
    }
}
```

### Desenvolvedor React Senior

**Características obrigatórias:**

- Expertise em React 18+ com Hooks
- Domínio de Context API e State Management
- Conhecimento de React Query/TanStack Query
- Experiência com TypeScript avançado
- Proficiência em Testing Library e Jest
- Conhecimento de Performance Optimization
- Experiência com Micro-frontends
- Domínio de Custom Hooks
- Conhecimento de Suspense e Concurrent Features
- Experiência com Storybook para componentes
- Proficiência em Accessibility (a11y)

**Práticas React Avançadas:**

```typescript
// Custom Hook com TypeScript
interface UseApiResult<T> {
  data: T | null;
  loading: boolean;
  error: Error | null;
  refetch: () => void;
}

const useApi = <T>(url: string): UseApiResult<T> => {
  const [state, setState] = useState<UseApiResult<T>>({
    data: null,
    loading: true,
    error: null,
    refetch: () => {}
  });

  // Implementation...
};

// Compound Component Pattern
const Card = ({ children, ...props }) => (
  <div className="card" {...props}>{children}</div>
);
Card.Header = ({ children }) => <header>{children}</header>;
Card.Body = ({ children }) => <main>{children}</main>;
```

## 🏗️ Arquitetura e Estrutura

### Monorepo

- Use monorepo com estrutura:
  ```
  rei-do-oleo/
  ├── backend/                    # Laravel API
  │   ├── app/
  │   │   ├── Http/Controllers/
  │   │   ├── Models/
  │   │   ├── Services/
  │   │   ├── Repositories/
  │   │   └── Events/
  │   ├── config/
  │   ├── database/
  │   ├── routes/
  │   └── tests/
  ├── frontend/                   # React + Vite
  │   ├── src/
  │   │   ├── components/
  │   │   ├── hooks/
  │   │   ├── services/
  │   │   ├── types/
  │   │   └── utils/
  │   ├── public/
  │   └── __tests__/
  ├── docs/                       # Documentação técnica
  ├── scripts/                    # Scripts de automação
  ├── docker/                     # Configurações Docker
  ├── .github/workflows/          # CI/CD
  ├── docker-compose.yml
  └── README.md
  ```

### Padrões Arquiteturais

- **Backend**: Domain-Driven Design (DDD)
- **Frontend**: Atomic Design Pattern
- **API**: RESTful + GraphQL opcional
- **Database**: Repository Pattern + Active Record
- **Caching**: Multi-layer caching strategy

## 🎯 CONTEXTO DO SISTEMA E FUNCIONALIDADES

### Domínio do Negócio - Sistema de Gestão de Óleos

#### Entidades Principais
- **Users**: Usuários do sistema (clientes, administradores, vendedores)
- **Products**: Produtos de óleo (óleos automotivos, industriais, especiais)
- **Orders**: Pedidos de clientes
- **Categories**: Categorias de produtos (automotivo, industrial, etc.)
- **Suppliers**: Fornecedores de produtos
- **Inventory**: Controle de estoque
- **Payments**: Processamento de pagamentos
- **Shipping**: Logística e entrega

#### Funcionalidades Core
1. **Gestão de Usuários**
   - Registro e autenticação
   - Perfis de usuário
   - Controle de acesso (RBAC)
   - Histórico de atividades

2. **Catálogo de Produtos**
   - Cadastro de produtos
   - Categorização
   - Gestão de preços
   - Controle de estoque
   - Imagens e descrições

3. **Sistema de Pedidos**
   - Carrinho de compras
   - Processamento de pedidos
   - Status de pedidos
   - Histórico de compras

4. **Gestão de Estoque**
   - Controle de entrada/saída
   - Alertas de estoque baixo
   - Relatórios de movimentação
   - Previsão de demanda

5. **Relatórios e Analytics**
   - Vendas por período
   - Produtos mais vendidos
   - Performance de vendedores
   - Análise de clientes

### Mapeamento de Funcionalidades por Módulo

#### Módulo de Autenticação
- **Arquivos**: `AuthController`, `LoginRequest`, `RegisterRequest`, `UserPolicy`
- **Rotas**: `/api/auth/*`
- **Componentes**: `LoginForm`, `RegisterForm`, `ForgotPassword`
- **Hooks**: `useAuth`, `usePermissions`

#### Módulo de Usuários
- **Arquivos**: `UserController`, `UserService`, `UserRepository`, `UserResource`
- **Rotas**: `/api/users/*`
- **Componentes**: `UserList`, `UserForm`, `UserProfile`, `UserCard`
- **Hooks**: `useUsers`, `useUserProfile`

#### Módulo de Produtos
- **Arquivos**: `ProductController`, `ProductService`, `ProductRepository`, `ProductResource`
- **Rotas**: `/api/products/*`
- **Componentes**: `ProductList`, `ProductForm`, `ProductCard`, `ProductModal`
- **Hooks**: `useProducts`, `useProductCategories`

#### Módulo de Pedidos
- **Arquivos**: `OrderController`, `OrderService`, `OrderRepository`, `OrderResource`
- **Rotas**: `/api/orders/*`
- **Componentes**: `OrderList`, `OrderForm`, `OrderDetails`, `OrderStatus`
- **Hooks**: `useOrders`, `useOrderStatus`

#### Módulo de Estoque
- **Arquivos**: `InventoryController`, `InventoryService`, `InventoryRepository`
- **Rotas**: `/api/inventory/*`
- **Componentes**: `InventoryList`, `StockAlert`, `MovementHistory`
- **Hooks**: `useInventory`, `useStockAlerts`

### Padrões de Implementação por Funcionalidade

#### CRUD Operations
```php
// Controller Pattern
class ProductController extends Controller
{
    public function index(ProductIndexRequest $request): JsonResponse
    {
        $products = $this->productService->getPaginated($request->validated());
        return ProductResource::collection($products);
    }

    public function store(StoreProductRequest $request): JsonResponse
    {
        $product = $this->productService->create($request->validated());
        return new ProductResource($product);
    }

    public function show(Product $product): JsonResponse
    {
        return new ProductResource($product);
    }

    public function update(UpdateProductRequest $request, Product $product): JsonResponse
    {
        $product = $this->productService->update($product, $request->validated());
        return new ProductResource($product);
    }

    public function destroy(Product $product): JsonResponse
    {
        $this->productService->delete($product);
        return response()->json(['message' => 'Product deleted successfully']);
    }
}
```

#### Service Layer Pattern
```php
class ProductService
{
    public function __construct(
        private ProductRepository $productRepository,
        private FileService $fileService,
        private CacheService $cacheService
    ) {}

    public function getPaginated(array $filters): LengthAwarePaginator
    {
        $cacheKey = 'products_paginated_' . md5(serialize($filters));
        
        return $this->cacheService->remember($cacheKey, 300, function () use ($filters) {
            return $this->productRepository->getPaginated($filters);
        });
    }

    public function create(array $data): Product
    {
        DB::beginTransaction();
        
        try {
            if (isset($data['image'])) {
                $data['image_url'] = $this->fileService->uploadImage($data['image']);
            }
            
            $product = $this->productRepository->create($data);
            
            event(new ProductCreated($product));
            
            DB::commit();
            return $product;
        } catch (Exception $e) {
            DB::rollBack();
            throw $e;
        }
    }
}
```

#### Repository Pattern
```php
interface ProductRepositoryInterface
{
    public function getPaginated(array $filters): LengthAwarePaginator;
    public function findById(int $id): ?Product;
    public function create(array $data): Product;
    public function update(Product $product, array $data): Product;
    public function delete(Product $product): bool;
    public function findByCategory(int $categoryId): Collection;
    public function search(string $query): Collection;
}

class ProductRepository implements ProductRepositoryInterface
{
    public function getPaginated(array $filters): LengthAwarePaginator
    {
        $query = Product::query()
            ->with(['category', 'supplier'])
            ->when(isset($filters['search']), function ($query) use ($filters) {
                $query->where('name', 'like', '%' . $filters['search'] . '%');
            })
            ->when(isset($filters['category_id']), function ($query) use ($filters) {
                $query->where('category_id', $filters['category_id']);
            })
            ->when(isset($filters['status']), function ($query) use ($filters) {
                $query->where('status', $filters['status']);
            });

        return $query->orderBy('created_at', 'desc')->paginate($filters['per_page'] ?? 15);
    }
}
```

### Componentes React por Funcionalidade

#### Listagem de Dados
```typescript
// ProductList Component
interface ProductListProps {
  filters?: ProductFilters;
  onProductSelect?: (product: Product) => void;
}

const ProductList: React.FC<ProductListProps> = ({ filters, onProductSelect }) => {
  const { data: products, isLoading, error } = useProducts(filters);
  const { mutate: deleteProduct } = useDeleteProduct();

  const handleDelete = (productId: number) => {
    deleteProduct(productId, {
      onSuccess: () => {
        toast.success('Product deleted successfully');
      },
      onError: () => {
        toast.error('Failed to delete product');
      }
    });
  };

  if (isLoading) return <LoadingSpinner />;
  if (error) return <ErrorMessage message={error.message} />;

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {products?.data.map((product) => (
        <ProductCard
          key={product.id}
          product={product}
          onSelect={onProductSelect}
          onDelete={handleDelete}
        />
      ))}
    </div>
  );
};
```

#### Formulários
```typescript
// ProductForm Component
interface ProductFormProps {
  product?: Product;
  onSubmit: (data: ProductFormData) => void;
  onCancel: () => void;
}

const ProductForm: React.FC<ProductFormProps> = ({ product, onSubmit, onCancel }) => {
  const { register, handleSubmit, formState: { errors }, reset } = useForm<ProductFormData>({
    defaultValues: product ? {
      name: product.name,
      description: product.description,
      price: product.price,
      category_id: product.category_id,
      stock_quantity: product.stock_quantity
    } : {}
  });

  const { data: categories } = useProductCategories();

  const handleFormSubmit = (data: ProductFormData) => {
    onSubmit(data);
    reset();
  };

  return (
    <form onSubmit={handleSubmit(handleFormSubmit)} className="space-y-6">
      <FormField
        label="Name"
        error={errors.name?.message}
      >
        <Input
          {...register('name', { required: 'Name is required' })}
          placeholder="Product name"
        />
      </FormField>

      <FormField
        label="Category"
        error={errors.category_id?.message}
      >
        <Select
          {...register('category_id', { required: 'Category is required' })}
        >
          <option value="">Select category</option>
          {categories?.map((category) => (
            <option key={category.id} value={category.id}>
              {category.name}
            </option>
          ))}
        </Select>
      </FormField>

      <div className="flex justify-end space-x-4">
        <Button type="button" variant="secondary" onClick={onCancel}>
          Cancel
        </Button>
        <Button type="submit">
          {product ? 'Update' : 'Create'} Product
        </Button>
      </div>
    </form>
  );
};
```

### Hooks Customizados por Funcionalidade

#### API Hooks
```typescript
// useProducts Hook
export const useProducts = (filters?: ProductFilters) => {
  return useQuery({
    queryKey: ['products', filters],
    queryFn: () => productService.getProducts(filters),
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
};

// useCreateProduct Hook
export const useCreateProduct = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: productService.createProduct,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['products'] });
      toast.success('Product created successfully');
    },
    onError: (error) => {
      toast.error('Failed to create product');
    }
  });
};
```

#### State Management Hooks
```typescript
// useAuth Hook
export const useAuth = () => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  const login = async (credentials: LoginCredentials) => {
    try {
      const response = await authService.login(credentials);
      setUser(response.user);
      localStorage.setItem('token', response.token);
      return response;
    } catch (error) {
      throw error;
    }
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('token');
  };

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      authService.getProfile()
        .then(setUser)
        .catch(() => localStorage.removeItem('token'))
        .finally(() => setLoading(false));
    } else {
      setLoading(false);
    }
  }, []);

  return { user, loading, login, logout };
};
```

## 💻 Desenvolvimento

### Padrões de Código Laravel

```php
// Controller Pattern
class OrderController extends Controller
{
    public function __construct(
        private OrderService $orderService
    ) {}

    public function store(StoreOrderRequest $request): JsonResponse
    {
        $order = $this->orderService->create($request->validated());

        return new OrderResource($order);
    }
}

// Service Pattern
class OrderService
{
    public function create(array $data): Order
    {
        DB::beginTransaction();

        try {
            $order = Order::create($data);
            event(new OrderCreated($order));

            DB::commit();
            return $order;
        } catch (Exception $e) {
            DB::rollBack();
            throw $e;
        }
    }
}
```

### Padrões de Código React

```typescript
// Component Pattern
interface ProductCardProps {
  product: Product;
  onAddToCart: (product: Product) => void;
}

const ProductCard: React.FC<ProductCardProps> = memo(
  ({ product, onAddToCart }) => {
    const handleAddToCart = useCallback(() => {
      onAddToCart(product);
    }, [product, onAddToCart]);

    return (
      <Card>
        <Card.Header>{product.name}</Card.Header>
        <Card.Body>
          <Button onClick={handleAddToCart}>Adicionar ao Carrinho</Button>
        </Card.Body>
      </Card>
    );
  }
);
```

### Configuração de Ferramentas

- **ESLint**: Airbnb config + custom rules
- **Prettier**: Formatação automática
- **Husky**: Git hooks
- **lint-staged**: Pre-commit linting
- **CommitLint**: Conventional commits

## 🛠️ CONFIGURAÇÕES E FERRAMENTAS DE DESENVOLVIMENTO

### Configurações de IDE e Editores

#### VS Code Extensions Recomendadas
```json
{
  "recommendations": [
    "bradlc.vscode-tailwindcss",
    "esbenp.prettier-vscode",
    "ms-vscode.vscode-typescript-next",
    "ms-vscode.vscode-json",
    "ms-vscode.vscode-eslint",
    "ms-vscode.vscode-php-debug",
    "ms-vscode.vscode-php-intellisense",
    "onecentlin.laravel-blade",
    "onecentlin.laravel-extension-pack",
    "ryannaddy.laravel-artisan",
    "formulahendry.auto-rename-tag",
    "christian-kohler.path-intellisense",
    "ms-vscode.vscode-todo-highlight",
    "streetsidesoftware.code-spell-checker"
  ]
}
```

#### VS Code Settings
```json
{
  "editor.formatOnSave": true,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true,
    "source.organizeImports": true
  },
  "typescript.preferences.importModuleSpecifier": "relative",
  "php.validate.enable": true,
  "php.suggest.basic": false,
  "files.associations": {
    "*.blade.php": "blade"
  },
  "emmet.includeLanguages": {
    "blade": "html"
  }
}
```

### Configurações de Linting e Formatação

#### ESLint Configuration (Frontend)
```json
{
  "extends": [
    "next/core-web-vitals",
    "@typescript-eslint/recommended",
    "prettier"
  ],
  "plugins": ["@typescript-eslint", "react-hooks"],
  "rules": {
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/explicit-function-return-type": "warn",
    "react-hooks/rules-of-hooks": "error",
    "react-hooks/exhaustive-deps": "warn",
    "prefer-const": "error",
    "no-console": "warn",
    "max-len": ["error", { "code": 100 }],
    "complexity": ["error", 10]
  },
  "settings": {
    "react": {
      "version": "detect"
    }
  }
}
```

#### Prettier Configuration
```json
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 100,
  "tabWidth": 2,
  "useTabs": false,
  "bracketSpacing": true,
  "arrowParens": "avoid",
  "endOfLine": "lf"
}
```

#### PHP CS Fixer Configuration (Backend)
```php
<?php

$finder = PhpCsFixer\Finder::create()
    ->in([
        __DIR__ . '/app',
        __DIR__ . '/config',
        __DIR__ . '/database',
        __DIR__ . '/routes',
        __DIR__ . '/tests',
    ])
    ->name('*.php')
    ->notName('*.blade.php')
    ->ignoreDotFiles(true)
    ->ignoreVCS(true);

return (new PhpCsFixer\Config())
    ->setRules([
        '@PSR12' => true,
        'array_syntax' => ['syntax' => 'short'],
        'ordered_imports' => ['sort_algorithm' => 'alpha'],
        'no_unused_imports' => true,
        'not_operator_with_successor_space' => true,
        'trailing_comma_in_multiline' => true,
        'phpdoc_scalar' => true,
        'unary_operator_spaces' => true,
        'binary_operator_spaces' => true,
        'blank_line_before_statement' => [
            'statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try'],
        ],
        'phpdoc_single_line_var_spacing' => true,
        'phpdoc_var_without_name' => true,
        'method_argument_space' => [
            'on_multiline' => 'ensure_fully_multiline',
            'keep_multiple_spaces_after_comma' => true,
        ],
        'single_trait_insert_per_statement' => true,
    ])
    ->setFinder($finder);
```

### Configurações de Git

#### .gitignore Configuration
```gitignore
# Dependencies
node_modules/
vendor/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Build outputs
dist/
build/
public/hot
public/storage
storage/*.key

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# OS files
.DS_Store
Thumbs.db

# Logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Dependency directories
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt

# Gatsby files
.cache/
public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# Laravel specific
bootstrap/cache/
storage/framework/cache/
storage/framework/sessions/
storage/framework/views/
storage/logs/

# Composer
composer.phar

# PHPUnit
.phpunit.result.cache

# PHP CS Fixer
.php-cs-fixer.cache

# PHPStan
.phpstan.result.cache
```

#### Git Hooks (Husky)
```json
{
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged",
      "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
    }
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": [
      "eslint --fix",
      "prettier --write"
    ],
    "*.{php}": [
      "./vendor/bin/php-cs-fixer fix"
    ],
    "*.{json,css,md}": [
      "prettier --write"
    ]
  }
}
```

### Configurações de Testes

#### Jest Configuration (Frontend)
```javascript
module.exports = {
  preset: 'ts-jest',
  testEnvironment: 'jsdom',
  setupFilesAfterEnv: ['<rootDir>/src/setupTests.ts'],
  moduleNameMapping: {
    '^@/(.*)$': '<rootDir>/src/$1',
    '\\.(css|less|scss|sass)$': 'identity-obj-proxy',
  },
  collectCoverageFrom: [
    'src/**/*.{js,jsx,ts,tsx}',
    '!src/**/*.d.ts',
    '!src/index.tsx',
    '!src/serviceWorker.ts',
  ],
  coverageThreshold: {
    global: {
      branches: 80,
      functions: 80,
      lines: 80,
      statements: 80,
    },
  },
  testMatch: [
    '<rootDir>/src/**/__tests__/**/*.{js,jsx,ts,tsx}',
    '<rootDir>/src/**/*.{test,spec}.{js,jsx,ts,tsx}',
  ],
};
```

#### PHPUnit Configuration (Backend)
```xml
<?xml version="1.0" encoding="UTF-8"?>
<phpunit xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="./vendor/phpunit/phpunit/phpunit.xsd"
         bootstrap="vendor/autoload.php"
         colors="true"
>
    <testsuites>
        <testsuite name="Unit">
            <directory suffix="Test.php">./tests/Unit</directory>
        </testsuite>
        <testsuite name="Feature">
            <directory suffix="Test.php">./tests/Feature</directory>
        </testsuite>
    </testsuites>
    <coverage processUncoveredFiles="true">
        <include>
            <directory suffix=".php">./app</directory>
        </include>
        <exclude>
            <directory suffix=".php">./app/Console</directory>
            <directory suffix=".php">./app/Exceptions</directory>
        </exclude>
    </coverage>
    <php>
        <env name="APP_ENV" value="testing"/>
        <env name="BCRYPT_ROUNDS" value="4"/>
        <env name="CACHE_DRIVER" value="array"/>
        <env name="DB_CONNECTION" value="sqlite"/>
        <env name="DB_DATABASE" value=":memory:"/>
        <env name="MAIL_MAILER" value="array"/>
        <env name="QUEUE_CONNECTION" value="sync"/>
        <env name="SESSION_DRIVER" value="array"/>
        <env name="TELESCOPE_ENABLED" value="false"/>
    </php>
</phpunit>
```

### Scripts de Desenvolvimento

#### Package.json Scripts (Frontend)
```json
{
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "lint": "eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "lint:fix": "eslint src --ext ts,tsx --fix",
    "format": "prettier --write \"src/**/*.{ts,tsx,js,jsx,json,css,md}\"",
    "type-check": "tsc --noEmit",
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build"
  }
}
```

#### Composer Scripts (Backend)
```json
{
  "scripts": {
    "test": "php artisan test",
    "test:coverage": "php artisan test --coverage",
    "test:unit": "php artisan test --testsuite=Unit",
    "test:feature": "php artisan test --testsuite=Feature",
    "lint": "php-cs-fixer fix --dry-run --diff",
    "lint:fix": "php-cs-fixer fix",
    "analyse": "phpstan analyse",
    "migrate": "php artisan migrate",
    "migrate:fresh": "php artisan migrate:fresh --seed",
    "seed": "php artisan db:seed",
    "optimize": "php artisan optimize",
    "cache:clear": "php artisan cache:clear",
    "config:cache": "php artisan config:cache",
    "route:cache": "php artisan route:cache",
    "view:cache": "php artisan view:cache"
  }
}
```

### Configurações de Banco de Dados

#### Migrations Structure
```php
// Example Migration Structure
Schema::create('products', function (Blueprint $table) {
    $table->id();
    $table->string('name');
    $table->text('description')->nullable();
    $table->decimal('price', 10, 2);
    $table->integer('stock_quantity')->default(0);
    $table->foreignId('category_id')->constrained()->onDelete('cascade');
    $table->foreignId('supplier_id')->constrained()->onDelete('cascade');
    $table->enum('status', ['active', 'inactive'])->default('active');
    $table->string('sku')->unique();
    $table->string('image_url')->nullable();
    $table->json('specifications')->nullable();
    $table->timestamps();
    
    $table->index(['category_id', 'status']);
    $table->index(['supplier_id']);
    $table->index(['sku']);
});
```

#### Seeders Structure
```php
// Example Seeder Structure
class ProductSeeder extends Seeder
{
    public function run(): void
    {
        $categories = Category::all();
        $suppliers = Supplier::all();

        Product::factory(100)->create()->each(function ($product) use ($categories, $suppliers) {
            $product->update([
                'category_id' => $categories->random()->id,
                'supplier_id' => $suppliers->random()->id,
                'sku' => 'SKU-' . str_pad($product->id, 6, '0', STR_PAD_LEFT),
            ]);
        });
    }
}
```

### Configurações de Cache e Performance

#### Redis Configuration
```php
// config/cache.php
'default' => env('CACHE_DRIVER', 'redis'),

'stores' => [
    'redis' => [
        'driver' => 'redis',
        'connection' => 'cache',
        'lock_connection' => 'default',
    ],
],

// config/database.php
'redis' => [
    'client' => env('REDIS_CLIENT', 'phpredis'),
    'default' => [
        'host' => env('REDIS_HOST', '127.0.0.1'),
        'password' => env('REDIS_PASSWORD'),
        'port' => env('REDIS_PORT', 6379),
        'database' => env('REDIS_DB', 0),
    ],
    'cache' => [
        'host' => env('REDIS_HOST', '127.0.0.1'),
        'password' => env('REDIS_PASSWORD'),
        'port' => env('REDIS_PORT', 6379),
        'database' => env('REDIS_CACHE_DB', 1),
    ],
],
```

#### Queue Configuration
```php
// config/queue.php
'default' => env('QUEUE_CONNECTION', 'redis'),

'connections' => [
    'redis' => [
        'driver' => 'redis',
        'connection' => 'default',
        'queue' => env('REDIS_QUEUE', 'default'),
        'retry_after' => 90,
        'block_for' => null,
    ],
],
```

==== Versionamento e Commits ====

=== Estrutura de Commits ===

- Padrão de commits para o Frontend
  ⚛️ Frontend ✨ feat: Implementa tela de login
  ⚛️ Frontend 🐛 fix: Corrige responsividade do menu
  ⚛️ Frontend 🎨 style: Atualiza tema e cores do sistema
  ⚛️ Frontend ♻️ refactor: Converte componentes para TypeScript
  ⚛️ Frontend 🔧 chore: Atualiza dependências do npm
  ⚛️ Frontend 📱 mobile: Ajusta layout para dispositivos móveis
  ⚛️ Frontend 🧪 test: Adiciona testes para componente Button

- Padrão de commits para o backend
  🐘 Backend ✨ feat: Adiciona autenticação via Sanctum
  🐘 Backend 🐛 fix: Corrige validação de email no registro
  🐘 Backend ♻️ refactor: Reorganiza estrutura de controllers
  🐘 Backend 🔧 chore: Atualiza dependências do Composer
  🐘 Backend 🧪 test: Adiciona testes para AuthController
  🐘 Backend 📊 perf: Otimiza queries do usuário
  🐘 Backend 🔒 security: Implementa rate limiting na API

- Padrão de commits para o DevOps
  🐳 DevOps 🚀 deploy: Configura pipeline CI/CD no GitHub Actions
  🐳 DevOps 🔧 chore: Atualiza configuração do Docker
  🐳 DevOps 📊 monitoring: Adiciona Prometheus e Grafana
  🐳 DevOps 🔒 security: Configura SSL e certificados
  🐳 DevOps 🏗️ infra: Provisiona recursos na AWS com Terraform
  🐳 DevOps 🔄 backup: Implementa rotina automática de backup

- Padrão de commits para o
  📝 Docs ✨ feat: Adiciona documentação da API
  📝 Docs 🔄 update: Atualiza README com instruções
  📝 Docs 🐛 fix: Corrige links quebrados na documentação
  📝 Docs 📊 diagram: Adiciona diagrama de arquitetura

- Usar prefixos para categorizar:
  - 📝 `docs`: Alterações em documentação
  - ✨ `feat`: Novas funcionalidades
  - 🐛 `fix`: Correções de bugs
  - ♻️ `refactor`: Refatoração de código
  - 🎨 `style`: Formatação e estilo
  - ⚡ `perf`: Melhorias de performance
  - 🔧 `chore`: Tarefas de manutenção
  - 🔥 `remove`: Remoção de código/arquivos
  - 🚀 `deploy`: Alterações de deploy

=== Mensagens de Commit ===

- Formato padrão:
  - Adicione algo que defina o commit é sobre o backend, frontend, devops ou outros
  - Título e breve descrição: Resumo curto (máximo 20 palavras)
- Exemplo:
  - 🐘 Backend ✨ feat: Adiciona sistema de busca
  - Closes #123

=== Boas Práticas de Commit ===

- Fazer commits atômicos (uma alteração por commit)
- Usar tempo verbal no presente
- Ser claro e objetivo na descrição
- Referenciar issues relacionadas
- Incluir contexto quando necessário
- Revisar alterações antes do commit
- Não commitar arquivos temporários

=== Organização de Branches ===

- Branches principais:
  - `main`: Código em produção
  - `develop`: Desenvolvimento contínuo
  - `release/*`: Preparação para release
  - `hotfix/*`: Correções urgentes
  - `feature/*`: Novas funcionalidades
- Nomenclatura:
  - Usar kebab-case: feature/nova-funcionalidade
  - Incluir prefixo do tipo: hotfix/correcao-urgente
  - Adicionar identificador: feature/123-busca-avancada

=== Fluxo de Trabalho ===

- Criar branch específica para cada tarefa
- Manter branches atualizadas com rebase
- Fazer squash de commits relacionados
- Testar alterações antes do merge
- Deletar branches após merge
- Usar tags para releases
- Manter histórico limpo e organizado

=== Revisão de Código ===

- Verificar:
  - Qualidade do código
  - Padrões de formatação
  - Documentação atualizada
  - Testes implementados
  - Conflitos resolvidos
- Fazer code review antes do merge
- Solicitar feedback quando necessário

=== Segurança e Backup ===

- Não commitar:
  - Senhas e chaves
  - Arquivos de configuração local
  - Dados sensíveis
  - Arquivos grandes
- Manter backup do repositório
- Usar .gitignore adequadamente
- Configurar hooks de segurança

## 🔒 Segurança Avançada

### Laravel Security

```php
// Rate Limiting
Route::middleware('throttle:api')->group(function () {
    Route::post('/login', [AuthController::class, 'login']);
});

// Input Validation
class StoreUserRequest extends FormRequest
{
    public function rules(): array
    {
        return [
            'email' => ['required', 'email', 'unique:users'],
            'password' => ['required', 'min:8', 'confirmed', 'regex:/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/'],
        ];
    }
}

// SQL Injection Protection
User::where('email', $request->email)->first(); // ✅ Safe
DB::raw("SELECT * FROM users WHERE email = '{$email}'"); // ❌ Dangerous
```

### React Security

```typescript
// XSS Protection
const sanitizeHtml = (html: string): string => {
  return DOMPurify.sanitize(html);
};

// CSRF Protection
const apiClient = axios.create({
  headers: {
    'X-CSRF-TOKEN': document
      .querySelector('meta[name="csrf-token"]')
      ?.getAttribute('content'),
  },
});
```

## 🚀 Performance Avançada

### Laravel Performance

```php
// Query Optimization
User::with(['orders', 'profile'])->get(); // Eager Loading
User::select(['id', 'name', 'email'])->get(); // Select specific columns

// Caching Strategy
Cache::remember('user_stats_' . $userId, 3600, function () use ($userId) {
    return $this->calculateUserStats($userId);
});

// Queue Jobs
ProcessOrderJob::dispatch($order)->onQueue('high-priority');
```

### React Performance

```typescript
// Lazy Loading
const Dashboard = lazy(() => import('./components/Dashboard'));

// Memoization
const ExpensiveComponent = memo(({ data }) => {
  const processedData = useMemo(() => {
    return data.map((item) => expensiveOperation(item));
  }, [data]);

  return <div>{processedData}</div>;
});

// Code Splitting
const routes = [
  {
    path: '/dashboard',
    component: lazy(() => import('./pages/Dashboard')),
  },
];
```

## 🧪 Testes Avançados

### Laravel Testing

```php
// Feature Tests
class OrderTest extends TestCase
{
    use RefreshDatabase;

    public function test_user_can_create_order()
    {
        $user = User::factory()->create();
        $product = Product::factory()->create();

        $response = $this->actingAs($user)
            ->postJson('/api/orders', [
                'product_id' => $product->id,
                'quantity' => 2
            ]);

        $response->assertStatus(201)
            ->assertJsonStructure([
                'data' => ['id', 'total', 'status']
            ]);
    }
}
```

### React Testing

```typescript
// Component Tests
describe('ProductCard', () => {
  it('should call onAddToCart when button is clicked', () => {
    const mockOnAddToCart = jest.fn();
    const product = { id: 1, name: 'Test Product' };

    render(<ProductCard product={product} onAddToCart={mockOnAddToCart} />);

    fireEvent.click(screen.getByText('Adicionar ao Carrinho'));
    expect(mockOnAddToCart).toHaveBeenCalledWith(product);
  });
});
```

## 📊 Monitoramento e Observabilidade

### Logging Strategy

```php
// Laravel Logging
Log::info('Order created', [
    'order_id' => $order->id,
    'user_id' => $user->id,
    'total' => $order->total
]);

// Custom Log Channel
'orders' => [
    'driver' => 'daily',
    'path' => storage_path('logs/orders.log'),
    'level' => 'info',
    'days' => 30,
],
```

### Error Tracking

- **Sentry**: Error monitoring
- **New Relic**: Performance monitoring
- **LogRocket**: Frontend session replay
- **Telescope**: Laravel debugging

## 🔄 DevOps e CI/CD

### Docker Configuration

```dockerfile
# Laravel Dockerfile
FROM php:8.2-fpm

WORKDIR /var/www

COPY composer.json composer.lock ./
RUN composer install --no-scripts --no-autoloader

COPY . .
RUN composer dump-autoload --optimize

EXPOSE 9000
CMD ["php-fpm"]
```

### GitHub Actions

```yaml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
      - name: Install dependencies
        run: composer install
      - name: Run tests
        run: php artisan test
```

## 💡 Melhores Práticas

### Code Review Checklist

- [ ] Código segue padrões estabelecidos
- [ ] **Todo código escrito em inglês** (classes, métodos, variáveis)
- [ ] **Comentários evitados ou em inglês quando necessários**
- [ ] Testes unitários incluídos
- [ ] Documentação atualizada
- [ ] Performance considerada
- [ ] Segurança validada
- [ ] Acessibilidade verificada
- [ ] Responsividade testada

### 🔤 Regras de Linguagem no Código

**CRÍTICO: Manter consistência linguística**

#### ✅ O que fazer:
- **Classes**: `UserController`, `OrderService`, `ProductRepository`
- **Métodos**: `createUser()`, `processOrder()`, `validateEmail()`
- **Variáveis**: `$userData`, `$orderTotal`, `$productList`
- **Interfaces**: `UserInterface`, `OrderRepositoryInterface`
- **Enums**: `OrderStatus`, `PaymentMethod`
- **Migrations**: `create_users_table`, `add_email_to_orders_table`

#### ❌ O que NÃO fazer:
- **Classes**: `UsuarioController`, `ServicoPedido`, `RepositorioProduto`
- **Métodos**: `criarUsuario()`, `processarPedido()`, `validarEmail()`
- **Variáveis**: `$dadosUsuario`, `$totalPedido`, `$listaProdutos`
- **Interfaces**: `InterfaceUsuario`, `InterfaceRepositorioPedido`

#### 📝 Comentários - Regras Estritas:

**EVITAR comentários quando:**
```php
// ❌ Comentário desnecessário
$user = User::find($id); // Find user by ID

// ❌ Comentário óbvio
if ($user->isActive()) {
    // Check if user is active
    return true;
}

// ❌ Comentário em português
// Verifica se o usuário tem permissão
if ($user->hasPermission('admin')) {
    // ...
}
```

**USAR comentários apenas quando:**
```php
// ✅ Documentação de API
/**
 * Process order payment and update inventory
 *
 * @param Order $order
 * @return bool
 * @throws PaymentFailedException
 */
public function processPayment(Order $order): bool

// ✅ Algoritmo complexo
// Calculate shipping cost using Haversine formula for distance
$distance = $this->calculateHaversineDistance($origin, $destination);

// ✅ Workaround temporário
// TODO: Remove this hack when legacy API is updated
// HACK: Legacy system returns different date format

// ✅ Configuração específica de negócio
// Business rule: Orders over $1000 require manager approval
if ($order->total > 1000) {
    $this->requireManagerApproval($order);
}
```

### Database Best Practices

```php
// Migrations
Schema::create('orders', function (Blueprint $table) {
    $table->id();
    $table->foreignId('user_id')->constrained()->onDelete('cascade');
    $table->decimal('total', 10, 2);
    $table->enum('status', ['pending', 'completed', 'cancelled']);
    $table->timestamps();

    $table->index(['user_id', 'status']);
});
```

## 📱 Mobile e Responsividade

### Progressive Web App (PWA)

- Instalável
- Funcionalidade offline
- Responsivo (320px - 1920px)
- Ícones e splash screens
- Notificações push

### React Native (Futuro)

- Preparação para app nativo
- Compartilhamento de código
- Componentes reutilizáveis

## 🔧 Ferramentas e Utilitários

### Desenvolvimento

- **IDE**: VS Code com extensões
- **Database**: TablePlus/Sequel Pro
- **API**: Insomnia/Postman
- **Design**: Figma integration

### Produção

- **Server**: Ubuntu/CentOS
- **Web Server**: Nginx
- **Database**: MySQL 8.0+
- **Cache**: Redis
- **CDN**: CloudFlare

## ⚠️ Avisos Importantes

### 🔤 LINGUAGEM NO CÓDIGO - REGRA ABSOLUTA
- **TODO código deve ser escrito em inglês** (classes, métodos, variáveis, constantes)
- **NUNCA usar português em nomes de código**
- **Comentários apenas em inglês e quando estritamente necessários**
- **Evitar comentários óbvios ou desnecessários**

### 🔒 Segurança e Boas Práticas
- NUNCA commitar credenciais
- Sempre usar variáveis de ambiente
- Manter dependências atualizadas
- Priorizar segurança e performance
- Foco constante na experiência do usuário
- Código deve ser auto-documentado
- Sempre considerar escalabilidade
- Implementar monitoring desde o início

### 📝 Exemplos de Violações Comuns

```php
// ❌ VIOLAÇÃO - Código em português
class UsuarioController {
    public function criarUsuario($dados) {
        $usuario = new Usuario();
        $usuario->nome = $dados['nome'];
        $usuario->email = $dados['email'];
        $usuario->salvar();

        // Retorna o usuário criado
        return $usuario;
    }
}

// ✅ CORRETO - Código em inglês
class UserController {
    public function createUser($data) {
        $user = new User();
        $user->name = $data['name'];
        $user->email = $data['email'];
        $user->save();

        return $user;
    }
}
```

```typescript
// ❌ VIOLAÇÃO - Código em português
interface DadosProduto {
  nome: string;
  preco: number;
  descricao: string;
}

const ComponenteProduto = ({ produto }: { produto: DadosProduto }) => {
  const aoAdicionarAoCarrinho = () => {
    // Adiciona produto ao carrinho
    console.log('Produto adicionado');
  };

  return <div>{produto.nome}</div>;
};

// ✅ CORRETO - Código em inglês
interface ProductData {
  name: string;
  price: number;
  description: string;
}

const ProductComponent = ({ product }: { product: ProductData }) => {
  const handleAddToCart = () => {
    console.log('Product added');
  };

  return <div>{product.name}</div>;
};
```

## 📋 Checklist para Novas Implementações

- [ ] Requisitos funcionais definidos
- [ ] Casos de teste criados
- [ ] Documentação atualizada
- [ ] Revisão de código concluída
- [ ] Testes de performance realizados
- [ ] Aprovação do Product Owner
- [ ] Segurança validada
- [ ] Logs implementados
- [ ] Monitoramento configurado
- [ ] Rollback plan definido

## 🎯 Mindset de Desenvolvimento Senior

### Princípios Fundamentais

- **Clean Code First**: Código deve ser legível e auto-explicativo
- **SOLID Principles**: Aplicar consistentemente princípios de design
- **DRY (Don't Repeat Yourself)**: Evitar duplicação de código
- **YAGNI (You Aren't Gonna Need It)**: Não implementar funcionalidades desnecessárias
- **KISS (Keep It Simple, Stupid)**: Simplicidade é a sofisticação suprema

### 🔤 Padrões de Linguagem no Código

**IMPORTANTE: Todo o código deve ser escrito em inglês**

#### Backend (Laravel/PHP)
```php
// ✅ CORRETO - Nomes em inglês
class UserController extends Controller
{
    public function store(CreateUserRequest $request): JsonResponse
    {
        $user = $this->userService->create($request->validated());
        return new UserResource($user);
    }
}

class OrderService
{
    public function processPayment(Order $order): bool
    {
        // Implementation
    }
}

// ❌ INCORRETO - Nomes em português
class UsuarioController extends Controller
{
    public function criar(CriarUsuarioRequest $request): JsonResponse
    {
        $usuario = $this->servicoUsuario->criar($request->validated());
        return new UsuarioResource($usuario);
    }
}
```

#### Frontend (React/TypeScript)
```typescript
// ✅ CORRETO - Nomes em inglês
interface ProductCardProps {
  product: Product;
  onAddToCart: (product: Product) => void;
}

const ProductCard: React.FC<ProductCardProps> = ({ product, onAddToCart }) => {
  const handleAddToCart = useCallback(() => {
    onAddToCart(product);
  }, [product, onAddToCart]);

  return (
    <Card>
      <Card.Header>{product.name}</Card.Header>
      <Card.Body>
        <Button onClick={handleAddToCart}>Add to Cart</Button>
      </Card.Body>
    </Card>
  );
};

// ❌ INCORRETO - Nomes em português
interface CartaoProdutoProps {
  produto: Produto;
  aoAdicionarAoCarrinho: (produto: Produto) => void;
}
```

#### Comentários e Documentação

**Regra Geral**: Evitar comentários desnecessários. Código deve ser auto-explicativo.

```php
// ✅ CORRETO - Comentários apenas quando necessário
class OrderService
{
    /**
     * Process order payment and update inventory
     *
     * @param Order $order
     * @return bool
     * @throws PaymentFailedException
     */
    public function processPayment(Order $order): bool
    {
        // Complex business logic that needs explanation
        if ($order->total > $this->getUserCreditLimit($order->user_id)) {
            throw new PaymentFailedException('Insufficient credit limit');
        }

        // Process payment
        $paymentResult = $this->paymentGateway->charge($order->total);

        if ($paymentResult->success) {
            $this->updateInventory($order);
            return true;
        }

        return false;
    }
}

// ❌ INCORRETO - Comentários óbvios
class OrderService
{
    public function processPayment(Order $order): bool
    {
        // Check if user has enough credit
        if ($order->total > $this->getUserCreditLimit($order->user_id)) {
            throw new PaymentFailedException('Insufficient credit limit');
        }

        // Process the payment
        $paymentResult = $this->paymentGateway->charge($order->total);

        // If payment is successful, update inventory
        if ($paymentResult->success) {
            $this->updateInventory($order);
            return true;
        }

        return false;
    }
}
```

#### Convenções de Nomenclatura

**Classes e Interfaces:**
- ✅ `UserController`, `OrderService`, `ProductRepository`
- ❌ `UsuarioController`, `ServicoPedido`, `RepositorioProduto`

**Métodos e Funções:**
- ✅ `createUser()`, `processOrder()`, `validateEmail()`
- ❌ `criarUsuario()`, `processarPedido()`, `validarEmail()`

**Variáveis e Propriedades:**
- ✅ `$userData`, `$orderTotal`, `$productList`
- ❌ `$dadosUsuario`, `$totalPedido`, `$listaProdutos`

**Constantes:**
- ✅ `MAX_RETRY_ATTEMPTS`, `DEFAULT_PAGE_SIZE`
- ❌ `MAX_TENTATIVAS_TENTATIVA`, `TAMANHO_PAGINA_PADRAO`

#### Exceções para Comentários

**Comentários são aceitáveis quando:**
1. **Documentação de API** (OpenAPI/Swagger)
2. **Explicação de algoritmos complexos**
3. **Workarounds temporários** (TODO, FIXME, HACK)
4. **Configurações específicas de negócio**
5. **Integração com sistemas externos**

```php
// ✅ Comentários úteis
/**
 * Calculate shipping cost based on distance and weight
 *
 * @param float $distance Distance in kilometers
 * @param float $weight Weight in kilograms
 * @return float Shipping cost
 */
public function calculateShippingCost(float $distance, float $weight): float
{
    // TODO: Implement dynamic pricing based on fuel costs
    $baseRate = 10.0;
    $distanceMultiplier = 2.5;
    $weightMultiplier = 1.5;

    return $baseRate + ($distance * $distanceMultiplier) + ($weight * $weightMultiplier);
}

// ✅ Workaround temporário
public function processLegacyData(array $data): array
{
    // HACK: Legacy system uses different date format
    // Remove this when legacy system is decommissioned
    if (isset($data['created_at'])) {
        $data['created_at'] = Carbon::parse($data['created_at'])->format('Y-m-d H:i:s');
    }

    return $data;
}
```

### Metodologia de Trabalho

- **Refatoração Contínua**: Melhorar código existente constantemente
- **Code Review Rigoroso**: Todo código deve ser revisado
- **Documentação Viva**: Documentação que evolui com o código
- **Automação First**: Automatizar tudo que pode ser automatizado
- **Monitoramento Proativo**: Detectar problemas antes dos usuários

## 🚀 Otimizações Específicas

### Laravel Otimizações

```php
// Config Caching
php artisan config:cache
php artisan route:cache
php artisan view:cache

// Database Optimizations
// N+1 Query Prevention
$users = User::with('orders.products')->get();

// Chunk Processing
User::chunk(200, function ($users) {
    foreach ($users as $user) {
        // Process user
    }
});

// Database Indexes
Schema::table('orders', function (Blueprint $table) {
    $table->index(['created_at', 'status']);
    $table->index(['user_id', 'total']);
});
```

### React Otimizações

```typescript
// Bundle Splitting
const LazyComponent = lazy(() =>
  import('./HeavyComponent').then((module) => ({
    default: module.HeavyComponent,
  }))
);

// Virtual Scrolling para listas grandes
import { FixedSizeList as List } from 'react-window';

const VirtualizedList = ({ items }) => (
  <List height={600} itemCount={items.length} itemSize={35} itemData={items}>
    {Row}
  </List>
);

// Web Workers para processamento pesado
const worker = new Worker('./calculation.worker.js');
worker.postMessage({ data: heavyCalculationData });
```

## 🔍 DEBUG E TROUBLESHOOTING

### Debugging Laravel

#### Telescope Configuration
```php
// config/telescope.php
'watchers' => [
    Watchers\CacheWatcher::class => env('TELESCOPE_CACHE_WATCHER', true),
    Watchers\CommandWatcher::class => env('TELESCOPE_COMMAND_WATCHER', true),
    Watchers\ExceptionWatcher::class => env('TELESCOPE_EXCEPTION_WATCHER', true),
    Watchers\JobWatcher::class => env('TELESCOPE_JOB_WATCHER', true),
    Watchers\LogWatcher::class => env('TELESCOPE_LOG_WATCHER', true),
    Watchers\MailWatcher::class => env('TELESCOPE_MAIL_WATCHER', true),
    Watchers\ModelWatcher::class => env('TELESCOPE_MODEL_WATCHER', true),
    Watchers\NotificationWatcher::class => env('TELESCOPE_NOTIFICATION_WATCHER', true),
    Watchers\QueryWatcher::class => env('TELESCOPE_QUERY_WATCHER', true),
    Watchers\RequestWatcher::class => env('TELESCOPE_REQUEST_WATCHER', true),
    Watchers\ScheduleWatcher::class => env('TELESCOPE_SCHEDULE_WATCHER', true),
],

// Debug SQL Queries
DB::listen(function ($query) {
    Log::info($query->sql, [
        'bindings' => $query->bindings,
        'time' => $query->time,
    ]);
});

// Custom Debugbar
if (app()->environment('local')) {
    app('debugbar')->info('Debug info here');
}

// Logging Strategy
Log::channel('debug')->info('Debug message', [
    'user_id' => auth()->id(),
    'action' => 'product_created',
    'data' => $request->all(),
]);
```

#### Common Laravel Issues and Solutions

```php
// 1. Memory Issues
// Add to .env
MEMORY_LIMIT=512M

// 2. Query Performance
// Use query logging
DB::enableQueryLog();
// ... your queries
$queries = DB::getQueryLog();

// 3. Cache Issues
php artisan cache:clear
php artisan config:clear
php artisan route:clear
php artisan view:clear

// 4. Permission Issues
chmod -R 755 storage/
chmod -R 755 bootstrap/cache/

// 5. Queue Issues
php artisan queue:work --verbose
php artisan queue:failed
php artisan queue:retry all
```

### Debugging React

#### React Developer Tools
```typescript
// Chrome Extension: React Developer Tools

// Performance Profiling
import { Profiler } from 'react';

const onRenderCallback = (id, phase, actualDuration) => {
  console.log('Component:', id, 'Phase:', phase, 'Duration:', actualDuration);
};

<Profiler id='App' onRender={onRenderCallback}>
  <App />
</Profiler>;

// Error Boundaries
class ErrorBoundary extends Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null, errorInfo: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    console.error('Error caught:', error, errorInfo);
    this.setState({ error, errorInfo });
    // Send to error reporting service
  }

  render() {
    if (this.state.hasError) {
      return <ErrorFallback error={this.state.error} />;
    }
    return this.props.children;
  }
}

// Debug Hooks
const useDebugValue = (value, label) => {
  useEffect(() => {
    console.log(`${label}:`, value);
  }, [value, label]);
};
```

#### Common React Issues and Solutions

```typescript
// 1. Memory Leaks
useEffect(() => {
  const controller = new AbortController();
  
  fetch('/api/data', { signal: controller.signal })
    .then(response => response.json())
    .then(data => setData(data));
  
  return () => controller.abort();
}, []);

// 2. Infinite Re-renders
const memoizedValue = useMemo(() => expensiveCalculation(a, b), [a, b]);
const memoizedCallback = useCallback(() => doSomething(a, b), [a, b]);

// 3. State Updates
const [state, setState] = useState(initialState);
setState(prevState => ({ ...prevState, newValue }));

// 4. Async State Updates
const [loading, setLoading] = useState(false);
const [error, setError] = useState(null);

const fetchData = async () => {
  setLoading(true);
  setError(null);
  try {
    const data = await api.getData();
    setData(data);
  } catch (err) {
    setError(err.message);
  } finally {
    setLoading(false);
  }
};
```

### Performance Monitoring

#### Laravel Performance
```php
// Query Performance
DB::listen(function ($query) {
    if ($query->time > 100) { // Log slow queries
        Log::warning('Slow query detected', [
            'sql' => $query->sql,
            'time' => $query->time,
            'bindings' => $query->bindings,
        ]);
    }
});

// Memory Usage
$memoryUsage = memory_get_usage(true);
$peakMemoryUsage = memory_get_peak_usage(true);

Log::info('Memory usage', [
    'current' => $memoryUsage,
    'peak' => $peakMemoryUsage,
]);

// Cache Performance
Cache::remember('expensive_operation', 3600, function () {
    return expensiveOperation();
});
```

#### React Performance
```typescript
// Component Performance
import { memo, useMemo, useCallback } from 'react';

const ExpensiveComponent = memo(({ data, onAction }) => {
  const processedData = useMemo(() => {
    return data.map(item => expensiveOperation(item));
  }, [data]);

  const handleAction = useCallback((id) => {
    onAction(id);
  }, [onAction]);

  return (
    <div>
      {processedData.map(item => (
        <Item key={item.id} item={item} onAction={handleAction} />
      ))}
    </div>
  );
});

// Bundle Analysis
// Add to package.json
"analyze": "source-map-explorer 'build/static/js/*.js'"

// Performance Monitoring
const usePerformanceMonitor = (componentName) => {
  useEffect(() => {
    const startTime = performance.now();
    
    return () => {
      const endTime = performance.now();
      console.log(`${componentName} render time:`, endTime - startTime);
    };
  });
};
```

### Error Tracking and Monitoring

#### Laravel Error Tracking
```php
// Custom Exception Handler
class Handler extends ExceptionHandler
{
    public function report(Throwable $e): void
    {
        if ($this->shouldReport($e)) {
            // Send to external service (Sentry, Bugsnag, etc.)
            Log::error('Application error', [
                'message' => $e->getMessage(),
                'file' => $e->getFile(),
                'line' => $e->getLine(),
                'trace' => $e->getTraceAsString(),
                'user_id' => auth()->id(),
                'request_url' => request()->fullUrl(),
                'request_method' => request()->method(),
            ]);
        }
        
        parent::report($e);
    }
}

// Health Check Endpoint
Route::get('/health', function () {
    return response()->json([
        'status' => 'healthy',
        'timestamp' => now(),
        'version' => config('app.version'),
        'environment' => config('app.env'),
    ]);
});
```

#### React Error Tracking
```typescript
// Error Boundary with Error Reporting
class ErrorBoundary extends Component {
  componentDidCatch(error, errorInfo) {
    // Send to error reporting service
    errorReportingService.captureException(error, {
      extra: errorInfo,
      user: getCurrentUser(),
      tags: {
        component: this.props.componentName,
        environment: process.env.NODE_ENV,
      },
    });
  }
}

// Global Error Handler
window.addEventListener('error', (event) => {
  errorReportingService.captureException(event.error, {
    extra: {
      filename: event.filename,
      lineno: event.lineno,
      colno: event.colno,
    },
  });
});

// Unhandled Promise Rejection
window.addEventListener('unhandledrejection', (event) => {
  errorReportingService.captureException(event.reason, {
    extra: {
      type: 'unhandled_promise_rejection',
    },
  });
});
```

### Development Tools and Extensions

#### VS Code Extensions for Debugging
```json
{
  "recommendations": [
    "ms-vscode.vscode-js-debug",
    "ms-vscode.vscode-php-debug",
    "ms-vscode.vscode-json",
    "ms-vscode.vscode-eslint",
    "ms-vscode.vscode-prettier",
    "bradlc.vscode-tailwindcss",
    "ms-vscode.vscode-todo-highlight",
    "streetsidesoftware.code-spell-checker",
    "ms-vscode.vscode-gitlens",
    "ms-vscode.vscode-thunder-client"
  ]
}
```

#### Browser Extensions for Debugging
- **React Developer Tools**: Component inspection and profiling
- **Redux DevTools**: State management debugging
- **Lighthouse**: Performance auditing
- **Web Vitals**: Core Web Vitals monitoring
- **JSON Formatter**: API response formatting

### Common Development Commands

#### Laravel Commands
```bash
# Development
php artisan serve
php artisan migrate:fresh --seed
php artisan queue:work
php artisan telescope:install

# Debugging
php artisan tinker
php artisan route:list
php artisan config:cache
php artisan view:cache

# Testing
php artisan test
php artisan test --coverage
php artisan test --filter=UserTest

# Maintenance
php artisan down
php artisan up
php artisan optimize
```

#### React Commands
```bash
# Development
npm run dev
npm run build
npm run preview

# Testing
npm test
npm run test:watch
npm run test:coverage

# Linting
npm run lint
npm run lint:fix
npm run type-check

# Storybook
npm run storybook
npm run build-storybook
```

### Performance Optimization Checklist

#### Backend Optimization
- [ ] Database indexes on frequently queried columns
- [ ] Eager loading to prevent N+1 queries
- [ ] Query caching for expensive operations
- [ ] Redis for session and cache storage
- [ ] Queue jobs for heavy operations
- [ ] Image optimization and CDN usage
- [ ] API response compression
- [ ] Database connection pooling

#### Frontend Optimization
- [ ] Code splitting and lazy loading
- [ ] Image optimization and WebP format
- [ ] Bundle size optimization
- [ ] Memoization of expensive calculations
- [ ] Virtual scrolling for large lists
- [ ] Service Worker for caching
- [ ] Critical CSS inlining
- [ ] Tree shaking for unused code

## 🔍 VERIFICAÇÃO DE CONSISTÊNCIA DO FRONTEND

### Build Validation - Regra Obrigatória

**IMPORTANTE**: Sempre que for necessário verificar a consistência do frontend, fazer o build para validação.

#### Comandos de Verificação de Build

```bash
# Verificação completa de build
npm run build

# Verificação de tipos TypeScript
npm run type-check

# Verificação de linting
npm run lint

# Verificação de testes
npm test

# Análise de bundle
npm run analyze
```

#### Checklist de Verificação de Build

```bash
# 1. Limpar cache e node_modules (se necessário)
rm -rf node_modules package-lock.json
npm install

# 2. Verificar tipos TypeScript
npm run type-check

# 3. Verificar linting
npm run lint

# 4. Rodar testes
npm test

# 5. Fazer build de produção
npm run build

# 6. Verificar se o build foi gerado corretamente
ls -la dist/

# 7. Testar build localmente
npm run preview
```

#### Validação de Build em CI/CD

```yaml
# .github/workflows/frontend-build-check.yml
name: Frontend Build Validation

on:
  pull_request:
    paths:
      - 'frontend/**'
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'

jobs:
  frontend-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Type check
        run: |
          cd frontend
          npm run type-check
          
      - name: Lint check
        run: |
          cd frontend
          npm run lint
          
      - name: Run tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false
          
      - name: Build check
        run: |
          cd frontend
          npm run build
          
      - name: Verify build output
        run: |
          cd frontend
          ls -la dist/
          test -f dist/index.html
          test -f dist/assets/index-*.js
          test -f dist/assets/index-*.css
```

#### Scripts de Validação Automática

```json
{
  "scripts": {
    "validate": "npm run type-check && npm run lint && npm test && npm run build",
    "validate:quick": "npm run type-check && npm run lint",
    "validate:full": "npm run validate && npm run analyze",
    "pre-commit": "npm run validate:quick",
    "pre-push": "npm run validate"
  }
}
```

#### Verificação de Dependências

```bash
# Verificar dependências desatualizadas
npm outdated

# Verificar vulnerabilidades
npm audit

# Verificar dependências não utilizadas
npx depcheck

# Verificar tamanho do bundle
npm run analyze
```

#### Validação de Performance

```bash
# Lighthouse CI para performance
npm install -g @lhci/cli
lhci autorun

# Bundle analyzer
npm run analyze

# Verificar Core Web Vitals
npm run build
npx serve dist/
# Executar Lighthouse no navegador
```

#### Troubleshooting de Build

```bash
# Problemas comuns e soluções

# 1. Erro de tipos TypeScript
npm run type-check
# Corrigir erros de tipo antes do build

# 2. Erro de linting
npm run lint:fix
# Corrigir automaticamente problemas de linting

# 3. Erro de dependências
rm -rf node_modules package-lock.json
npm install

# 4. Erro de cache do Vite
rm -rf node_modules/.vite
npm run build

# 5. Erro de memória
export NODE_OPTIONS="--max-old-space-size=4096"
npm run build

# 6. Verificar versões de Node.js
node --version
npm --version
# Garantir compatibilidade com package.json
```

#### Validação de Produção

```bash
# Build de produção com otimizações
npm run build

# Verificar arquivos gerados
ls -la dist/
du -sh dist/

# Testar build localmente
npm run preview

# Verificar se não há console.log em produção
grep -r "console.log" dist/ || echo "No console.log found in build"

# Verificar se não há debugger em produção
grep -r "debugger" dist/ || echo "No debugger found in build"
```

#### Monitoramento de Build

```bash
# Verificar tempo de build
time npm run build

# Verificar tamanho do bundle
npm run analyze

# Verificar dependências
npm ls --depth=0

# Verificar scripts disponíveis
npm run
```

### Regras de Validação

#### Antes de Cada Commit
- [ ] `npm run type-check` - Verificar tipos TypeScript
- [ ] `npm run lint` - Verificar linting
- [ ] `npm test` - Rodar testes
- [ ] `npm run build` - Verificar build

#### Antes de Cada Push
- [ ] `npm run validate` - Validação completa
- [ ] Verificar se não há erros de build
- [ ] Verificar se o bundle está otimizado

#### Antes de Cada Deploy
- [ ] `npm run validate:full` - Validação completa + análise
- [ ] Verificar performance com Lighthouse
- [ ] Verificar compatibilidade de browsers
- [ ] Verificar acessibilidade

### Integração com Git Hooks

```json
{
  "husky": {
    "hooks": {
      "pre-commit": "npm run pre-commit",
      "pre-push": "npm run pre-push"
    }
  }
}
```

### Configuração de Vite para Validação

```typescript
// vite.config.ts
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  build: {
    // Configurações para validação
    sourcemap: false, // Desabilitar em produção
    minify: 'terser',
    terserOptions: {
      compress: {
        drop_console: true, // Remover console.log
        drop_debugger: true, // Remover debugger
      },
    },
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          utils: ['lodash', 'axios'],
        },
      },
    },
  },
  // Validação em desenvolvimento
  server: {
    port: 3000,
    strictPort: true,
  },
})
```

## 📚 Documentação Avançada

### API Documentation

```php
/**
 * @OA\Post(
 *     path="/api/orders",
 *     summary="Create new order",
 *     @OA\RequestBody(
 *         required=true,
 *         @OA\JsonContent(
 *             required={"product_id", "quantity"},
 *             @OA\Property(property="product_id", type="integer"),
 *             @OA\Property(property="quantity", type="integer")
 *         )
 *     ),
 *     @OA\Response(response=201, description="Order created successfully")
 * )
 */
```

### Component Documentation

```typescript
/**
 * ProductCard component for displaying product information
 *
 * @param product - Product object containing id, name, price
 * @param onAddToCart - Callback function when add to cart is clicked
 * @param loading - Optional loading state
 *
 * @example
 * <ProductCard
 *   product={{ id: 1, name: "Product", price: 100 }}
 *   onAddToCart={(product) => console.log(product)}
 * />
 */
interface ProductCardProps {
  product: Product;
  onAddToCart: (product: Product) => void;
  loading?: boolean;
}
```

## 🏆 Code Quality

### ESLint Rules Customizadas

```json
{
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "error",
    "prefer-const": "error",
    "no-console": "warn",
    "max-len": ["error", { "code": 100 }],
    "complexity": ["error", 10]
  }
}
```

### PHPStan Configuration

```neon
# phpstan.neon
parameters:
    level: 8
    paths:
        - app
    excludes_analyse:
        - app/Console/Kernel.php
    checkMissingIterableValueType: false
```

## 🎨 UI/UX Guidelines

### TailAdmin React - Template de Dashboard

**Versão Atual**: 2.1.0

**Características Principais:**
- Template baseado em Tailwind CSS + React
- Componentes pré-construídos e responsivos
- Layouts otimizados para dashboards administrativos
- Suporte a modo escuro/claro
- Componentes acessíveis e customizáveis

**Estrutura de Arquivos:**
```
src/
├── components/          # Componentes reutilizáveis
│   ├── ui/             # Componentes base (Button, Input, etc.)
│   ├── layout/         # Layouts (Sidebar, Header, etc.)
│   └── charts/         # Componentes de gráficos
├── pages/              # Páginas da aplicação
├── hooks/              # Custom hooks
├── utils/              # Utilitários e helpers
└── styles/             # Estilos globais e Tailwind
```

**Componentes Principais:**
- **Layout Components**: Sidebar, Header, Footer, Breadcrumb
- **UI Components**: Buttons, Forms, Tables, Cards, Modals
- **Data Components**: Charts, DataTables, Filters
- **Navigation**: Menu, Tabs, Pagination

**Customização:**
```typescript
// Configuração de tema
const theme = {
  colors: {
    primary: '#3B82F6',
    secondary: '#64748B',
    success: '#10B981',
    warning: '#F59E0B',
    danger: '#EF4444'
  },
  spacing: {
    xs: '0.25rem',
    sm: '0.5rem',
    md: '1rem',
    lg: '1.5rem',
    xl: '2rem'
  }
};

// Uso de componentes
import { Button, Card, DataTable } from '@/components/ui';

const DashboardCard = () => (
  <Card className="p-6">
    <h3 className="text-lg font-semibold mb-4">Estatísticas</h3>
    <DataTable data={data} columns={columns} />
    <Button variant="primary" className="mt-4">
      Ver Detalhes
    </Button>
  </Card>
);
```

**Responsividade:**
- Mobile-first approach
- Breakpoints: sm (640px), md (768px), lg (1024px), xl (1280px)
- Componentes adaptáveis automaticamente

**Acessibilidade:**
- Suporte a ARIA labels
- Navegação por teclado
- Contraste adequado
- Screen reader friendly

### Design System

- **Cores**: Palette definida e consistente
- **Tipografia**: Hierarquia clara e legível
- **Espaçamento**: Sistema de grid de 8px
- **Componentes**: Reutilizáveis e documentados
- **Acessibilidade**: WCAG 2.1 AA compliance

### Responsive Design

```css
/* Mobile First Approach */
.container {
  padding: 1rem;
}

@media (min-width: 768px) {
  .container {
    padding: 2rem;
  }
}

@media (min-width: 1024px) {
  .container {
    padding: 3rem;
  }
}
```

## 🔐 Segurança Adicional

### Laravel Security Headers

```php
// Middleware SecurityHeaders
public function handle($request, Closure $next)
{
    $response = $next($request);

    $response->headers->set('X-Frame-Options', 'SAMEORIGIN');
    $response->headers->set('X-Content-Type-Options', 'nosniff');
    $response->headers->set('X-XSS-Protection', '1; mode=block');
    $response->headers->set('Strict-Transport-Security', 'max-age=31536000');

    return $response;
}
```

### Content Security Policy

```php
// CSP Header
$response->headers->set('Content-Security-Policy',
    "default-src 'self'; " .
    "script-src 'self' 'unsafe-inline'; " .
    "style-src 'self' 'unsafe-inline'; " .
    "img-src 'self' data: https:;"
);
```

## 🤖 Automação e Scripts

### Deployment Scripts

```bash
#!/bin/bash
# deploy.sh

echo "Starting deployment..."

# Laravel Commands
php artisan down
composer install --no-dev --optimize-autoloader
php artisan config:cache
php artisan route:cache
php artisan view:cache
php artisan migrate --force
php artisan up

# Frontend Build
npm ci
npm run build

echo "Deployment completed!"
```

### Development Scripts

```json
{
  "scripts": {
    "dev": "concurrently \"php artisan serve\" \"npm run dev\"",
    "test": "concurrently \"php artisan test\" \"npm test\"",
    "lint": "concurrently \"./vendor/bin/phpstan analyse\" \"npm run lint\"",
    "fix": "concurrently \"./vendor/bin/php-cs-fixer fix\" \"npm run lint:fix\""
  }
}
```

## 🎯 Metas de Performance

### Métricas Objetivo

- **First Contentful Paint**: < 1.5s
- **Largest Contentful Paint**: < 2.5s
- **Cumulative Layout Shift**: < 0.1
- **First Input Delay**: < 100ms
- **Time to Interactive**: < 3s

### Database Performance

- **Query Response Time**: < 100ms (90th percentile)
- **Database Connections**: Max 20 concurrent
- **Cache Hit Rate**: > 90%
- **Index Usage**: > 95% queries usando indexes

## 📈 Escalabilidade

### Horizontal Scaling

- **Load Balancer**: Nginx/HAProxy
- **Auto-scaling**: AWS ECS/Kubernetes
- **Database Sharding**: Preparação para múltiplas DBs
- **CDN**: CloudFlare/AWS CloudFront
- **Cache Distribuído**: Redis Cluster

### Vertical Scaling

- **Resource Monitoring**: CPU, Memory, Diskusage
- **Query Optimization**: EXPLAIN para todas queries
- **Connection Pooling**: PgBouncer/ProxySQL
- **Memory Management**: PHP-FPM tuning

## 🔄 Backup e Disaster Recovery

### Backup Strategy

```bash
#!/bin/bash
# backup.sh

# Database Backup
mysqldump -u $DB_USER -p$DB_PASS $DB_NAME > backup_$(date +%Y%m%d_%H%M%S).sql

# Files Backup
tar -czf files_backup_$(date +%Y%m%d_%H%M%S).tar.gz storage/

# Upload to S3
aws s3 cp backup_*.sql s3://backups/database/
aws s3 cp files_backup_*.tar.gz s3://backups/files/
```

## 🚀 DevOps Avançado

### Infraestrutura como Código (IaC)

#### Terraform Configuration

```hcl
# main.tf
provider "aws" {
  region = var.aws_region
}

# VPC Configuration
resource "aws_vpc" "rei_do_oleo_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name        = "rei-do-oleo-vpc"
    Environment = var.environment
  }
}

# RDS Instance
resource "aws_db_instance" "main_database" {
  identifier           = "rei-do-oleo-db"
  engine               = "mysql"
  engine_version       = "8.0"
  instance_class       = "db.t3.micro"
  allocated_storage    = 20
  storage_encrypted    = true

  db_name  = var.database_name
  username = var.database_username
  password = var.database_password

  backup_retention_period = 7
  backup_window          = "03:00-04:00"
  maintenance_window     = "sun:04:00-sun:05:00"

  tags = {
    Name        = "rei-do-oleo-database"
    Environment = var.environment
  }
}

# ElastiCache Redis
resource "aws_elasticache_cluster" "redis" {
  cluster_id           = "rei-do-oleo-cache"
  engine               = "redis"
  node_type            = "cache.t3.micro"
  num_cache_nodes      = 1
  parameter_group_name = "default.redis7"
  port                 = 6379

  tags = {
    Name        = "rei-do-oleo-cache"
    Environment = var.environment
  }
}
```

#### Docker Containerization

```dockerfile
# Dockerfile.backend
FROM php:8.2-fpm-alpine

# Install system dependencies
RUN apk add --no-cache \
    git \
    curl \
    libpng-dev \
    libxml2-dev \
    zip \
    unzip \
    mysql-client \
    nginx \
    supervisor

# Install PHP extensions
RUN docker-php-ext-install pdo pdo_mysql bcmath gd xml

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /var/www

# Copy application files
COPY . .

# Install PHP dependencies
RUN composer install --no-dev --optimize-autoloader --no-interaction

# Set permissions
RUN chown -R www-data:www-data /var/www \
    && chmod -R 755 /var/www/storage

# Copy supervisor configuration
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

EXPOSE 9000

CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
```

```dockerfile
# Dockerfile.frontend
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Build application
RUN npm run build

# Production stage
FROM nginx:alpine

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY docker/nginx.conf /etc/nginx/nginx.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
```

### Orquestração com Kubernetes

#### Deployment Configuration

```yaml
# k8s/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rei-do-oleo-backend
  labels:
    app: rei-do-oleo-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: rei-do-oleo-backend
  template:
    metadata:
      labels:
        app: rei-do-oleo-backend
    spec:
      containers:
        - name: backend
          image: rei-do-oleo/backend:latest
          ports:
            - containerPort: 9000
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: host
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: password
          resources:
            requests:
              memory: '256Mi'
              cpu: '250m'
            limits:
              memory: '512Mi'
              cpu: '500m'
          livenessProbe:
            httpGet:
              path: /health
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 9000
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: rei-do-oleo-backend-service
spec:
  selector:
    app: rei-do-oleo-backend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9000
  type: ClusterIP
```

#### Horizontal Pod Autoscaler

```yaml
# k8s/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rei-do-oleo-backend-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rei-do-oleo-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
```

### CI/CD Pipeline Avançado

#### GitHub Actions Workflow

```yaml
# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json
          coverage: xdebug

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Install Node dependencies
        run: npm ci

      - name: Copy environment file
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Run PHP tests
        run: |
          php artisan test --coverage-clover coverage.xml
          ./vendor/bin/phpstan analyse

      - name: Run JavaScript tests
        run: npm test -- --coverage

      - name: Build frontend
        run: npm run build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml,./coverage/lcov.info

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-backend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            k8s/deployment.yaml
            k8s/service.yaml
            k8s/ingress.yaml
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-backend
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-frontend
          kubectl-version: 'latest'
```

### Monitoramento e Observabilidade

#### Prometheus Configuration

```yaml
# monitoring/prometheus.yml
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - 'alert_rules.yml'

scrape_configs:
  - job_name: 'rei-do-oleo-backend'
    static_configs:
      - targets: ['backend:9000']
    metrics_path: '/metrics'
    scrape_interval: 10s

  - job_name: 'rei-do-oleo-frontend'
    static_configs:
      - targets: ['frontend:80']
    metrics_path: '/metrics'
    scrape_interval: 30s

  - job_name: 'mysql'
    static_configs:
      - targets: ['mysql-exporter:9104']

  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter:9121']

alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - alertmanager:9093
```

#### Grafana Dashboard

```json
{
  "dashboard": {
    "title": "Rei do Óleo - System Overview",
    "panels": [
      {
        "title": "Request Rate",
        "type": "graph",
        "targets": [
          {
            "expr": "rate(http_requests_total[5m])",
            "legendFormat": "{{method}} {{status}}"
          }
        ]
      },
      {
        "title": "Response Time",
        "type": "graph",
        "targets": [
          {
            "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",
            "legendFormat": "95th percentile"
          }
        ]
      },
      {
        "title": "Database Connections",
        "type": "singlestat",
        "targets": [
          {
            "expr": "mysql_global_status_threads_connected",
            "legendFormat": "Active Connections"
          }
        ]
      }
    ]
  }
}
```

### Logging Centralizado

#### ELK Stack Configuration

```yaml
# docker-compose.logging.yml
version: '3.8'

services:
  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
      - xpack.security.enabled=false
    ports:
      - '9200:9200'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  logstash:
    image: logstash:8.11.0
    ports:
      - '5044:5044'
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:8.11.0
    ports:
      - '5601:5601'
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch

volumes:
  elasticsearch_data:
```

#### Logstash Configuration

```ruby
# logging/logstash.conf
input {
  beats {
    port => 5044
  }
}

filter {
  if [fields][service] == "rei-do-oleo-backend" {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
    }

    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    }

    mutate {
      convert => { "response" => "integer" }
      convert => { "bytes" => "integer" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "rei-do-oleo-logs-%{+YYYY.MM.dd}"
  }
}
```

### Segurança DevOps

#### Network Policies

```yaml
# k8s/network-policy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rei-do-oleo-network-policy
spec:
  podSelector:
    matchLabels:
      app: rei-do-oleo-backend
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: rei-do-oleo-frontend
      ports:
        - protocol: TCP
          port: 9000
  egress:
    - to:
        - podSelector:
            matchLabels:
              app: mysql
      ports:
        - protocol: TCP
          port: 3306
    - to:
        - podSelector:
            matchLabels:
              app: redis
      ports:
        - protocol: TCP
          port: 6379
```

#### Secret Management

```yaml
# k8s/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: database-credentials
type: Opaque
data:
  host: <base64-encoded-host>
  username: <base64-encoded-username>
  password: <base64-encoded-password>
---
apiVersion: v1
kind: Secret
metadata:
  name: api-keys
type: Opaque
data:
  jwt-secret: <base64-encoded-jwt-secret>
  encryption-key: <base64-encoded-encryption-key>
```

### Automação e Scripts DevOps

#### Health Check Script

```bash
#!/bin/bash
# scripts/health-check.sh

set -e

SERVICE_URL=${1:-"http://localhost:8000"}
MAX_ATTEMPTS=${2:-30}
SLEEP_INTERVAL=${3:-2}

echo "Checking health of service at $SERVICE_URL"

for i in $(seq 1 $MAX_ATTEMPTS); do
    if curl -f -s "$SERVICE_URL/health" > /dev/null; then
        echo "Service is healthy!"
        exit 0
    fi

    echo "Attempt $i/$MAX_ATTEMPTS failed. Retrying in ${SLEEP_INTERVAL}s..."
    sleep $SLEEP_INTERVAL
done

echo "Service failed health check after $MAX_ATTEMPTS attempts"
exit 1
```

#### Database Migration Script

```bash
#!/bin/bash
# scripts/migrate-database.sh

set -e

DB_HOST=${DB_HOST:-localhost}
DB_PORT=${DB_PORT:-3306}
DB_NAME=${DB_NAME:-rei_do_oleo}
DB_USER=${DB_USER:-root}

echo "Waiting for database connection..."
while ! mysqladmin ping -h"$DB_HOST" -P"$DB_PORT" -u"$DB_USER" -p"$DB_PASSWORD" --silent; do
    sleep 1
done

echo "Database is ready. Running migrations..."
php artisan migrate --force

echo "Migrations completed successfully!"
```

### Disaster Recovery

#### Backup Automation

```bash
#!/bin/bash
# scripts/automated-backup.sh

set -e

TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/backups"
RETENTION_DAYS=30

# Create backup directory
mkdir -p $BACKUP_DIR

# Database backup
echo "Creating database backup..."
kubectl exec deployment/mysql -- mysqldump -u$DB_USER -p$DB_PASSWORD $DB_NAME > $BACKUP_DIR/db_backup_$TIMESTAMP.sql

# Application files backup
echo "Creating application files backup..."
kubectl exec deployment/rei-do-oleo-backend -- tar -czf - /var/www/storage > $BACKUP_DIR/files_backup_$TIMESTAMP.tar.gz

# Upload to S3
echo "Uploading backups to S3..."
aws s3 cp $BACKUP_DIR/db_backup_$TIMESTAMP.sql s3://rei-do-oleo-backups/database/
aws s3 cp $BACKUP_DIR/files_backup_$TIMESTAMP.tar.gz s3://rei-do-oleo-backups/files/

# Cleanup old backups
echo "Cleaning up old backups..."
find $BACKUP_DIR -name "*.sql" -mtime +$RETENTION_DAYS -delete
find $BACKUP_DIR -name "*.tar.gz" -mtime +$RETENTION_DAYS -delete

echo "Backup completed successfully!"
```

### Performance Testing

#### Load Testing with K6

```javascript
// tests/load-test.js
import http from 'k6/http';
import { check, sleep } from 'k6';

export let options = {
  stages: [
    { duration: '2m', target: 100 }, // Ramp up
    { duration: '5m', target: 100 }, // Stay at 100 users
    { duration: '2m', target: 200 }, // Ramp up to 200 users
    { duration: '5m', target: 200 }, // Stay at 200 users
    { duration: '2m', target: 0 }, // Ramp down
  ],
  thresholds: {
    http_req_duration: ['p(95)<500'], // 95% of requests under 500ms
    http_req_failed: ['rate<0.1'], // Error rate under 10%
  },
};

export default function () {
  let response = http.get('https://api.reidooleo.com/health');

  check(response, {
    'status is 200': (r) => r.status === 200,
    'response time < 500ms': (r) => r.timings.duration < 500,
  });

  sleep(1);
}
```
