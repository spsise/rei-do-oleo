## 🚀 QUICK START - COMEÇANDO RAPIDAMENTE

### Comandos Essenciais para Iniciar

```bash
# 1. Backend (Laravel)
cd backend
php artisan serve

# 2. Frontend (React) - Em outro terminal
cd frontend
npm run dev

# 3. Verificação Rápida
npm run validate:quick  # Type check + lint
npm run build          # Build de produção
```

### 🔍 DIRETRIZES DE DESENVOLVIMENTO INTELIGENTE 🚨 CRÍTICO

#### Verificação Automática Antes de Desenvolver

**IMPORTANTE**: Sempre que for solicitado para criar funcionalidades, o Cursor AI deve:

1. **Verificar Backend (Laravel) Primeiro**:
   - Verificar se existem Models relacionados
   - Verificar se existem Controllers para a funcionalidade
   - Verificar se existem Rotas da API
   - Verificar se existem Migrations para as tabelas necessárias
   - Verificar se existem Services e Repositories

2. **Verificar Frontend (React) Depois**:
   - Verificar se existem componentes relacionados
   - Verificar se existem páginas para a funcionalidade
   - Verificar se existem hooks customizados
   - Verificar se existem tipos TypeScript
   - Verificar se existem serviços de API

3. **Criar Backend Se Necessário**:
   - Se não existir Model → Criar Model com relacionamentos
   - Se não existir Controller → Criar Controller com métodos CRUD
   - Se não existir Rotas → Adicionar rotas na API
   - Se não existir Migration → Criar migration para tabelas
   - Se não existir Service → Criar service com lógica de negócio

4. **Criar Frontend Se Necessário**:
   - Se não existir componente → Criar componente reutilizável
   - Se não existir página → Criar página com layout
   - Se não existir hook → Criar hook customizado
   - Se não existir tipo → Criar interfaces TypeScript
   - Se não existir serviço → Criar serviço de API

#### Comandos de Verificação Rápida

```bash
# Verificar estrutura do backend
find backend/app/Models -name "*.php" | head -10
find backend/app/Http/Controllers/Api -name "*.php" | head -10
grep -r "Route::" backend/routes/api.php

# Verificar estrutura do frontend
find frontend/src/pages -name "*.tsx" | head -10
find frontend/src/components -name "*.tsx" | head -10
find frontend/src/hooks -name "*.ts" | head -10
find frontend/src/services -name "*.ts" | head -10
```

#### Padrões de Verificação por Funcionalidade

**Para Dashboard**:
- Backend: `DashboardController`, rotas `/api/dashboard/*`, métodos para estatísticas
- Frontend: `Dashboard.tsx`, `DashboardCard.tsx`, `useDashboard.ts`, `dashboardService.ts`

**Para Usuários**:
- Backend: `UserController`, rotas `/api/users/*`, `UserService`, `UserRepository`
- Frontend: `UserList.tsx`, `UserForm.tsx`, `useUsers.ts`, `userService.ts`

**Para Produtos**:
- Backend: `ProductController`, rotas `/api/products/*`, `ProductService`, `ProductRepository`
- Frontend: `ProductList.tsx`, `ProductForm.tsx`, `useProducts.ts`, `productService.ts`

**Para Pedidos**:
- Backend: `OrderController`, rotas `/api/orders/*`, `OrderService`, `OrderRepository`
- Frontend: `OrderList.tsx`, `OrderForm.tsx`, `useOrders.ts`, `orderService.ts`

---

## 📝 VERSIONAMENTO E COMMITS 🚨 CRÍTICO

### Estrutura de Commits

**Padrão de commits para o Frontend**:
- ⚛️ Frontend ✨ feat: Implementa tela de login
- ⚛️ Frontend 🐛 fix: Corrige responsividade do menu
- ⚛️ Frontend 🎨 style: Atualiza tema e cores do sistema
- ⚛️ Frontend ♻️ refactor: Converte componentes para TypeScript
- ⚛️ Frontend 🔧 chore: Atualiza dependências do npm
- ⚛️ Frontend 📱 mobile: Ajusta layout para dispositivos móveis
- ⚛️ Frontend 🧪 test: Adiciona testes para componente Button

**Padrão de commits para o Backend**:
- 🐘 Backend ✨ feat: Adiciona autenticação via Sanctum
- 🐘 Backend 🐛 fix: Corrige validação de email no registro
- 🐘 Backend ♻️ refactor: Reorganiza estrutura de controllers
- 🐘 Backend 🔧 chore: Atualiza dependências do Composer
- 🐘 Backend 🧪 test: Adiciona testes para AuthController
- 🐘 Backend 📊 perf: Otimiza queries do usuário
- 🐘 Backend 🔒 security: Implementa rate limiting na API

**Padrão de commits para o DevOps**:
- 🐳 DevOps 🚀 deploy: Configura pipeline CI/CD no GitHub Actions
- 🐳 DevOps 🔧 chore: Atualiza configuração do Docker
- 🐳 DevOps 📊 monitoring: Adiciona Prometheus e Grafana
- 🐳 DevOps 🔒 security: Configura SSL e certificados
- 🐳 DevOps 🏗️ infra: Provisiona recursos na AWS com Terraform
- 🐳 DevOps 🔄 backup: Implementa rotina automática de backup

**Padrão de commits para Documentação**:
- 📝 Docs ✨ feat: Adiciona documentação da API
- 📝 Docs 🔄 update: Atualiza README com instruções
- 📝 Docs 🐛 fix: Corrige links quebrados na documentação
- 📝 Docs 📊 diagram: Adiciona diagrama de arquitetura

### Prefixos para Categorizar
- 📝 `docs`: Alterações em documentação
- ✨ `feat`: Novas funcionalidades
- 🐛 `fix`: Correções de bugs
- ♻️ `refactor`: Refatoração de código
- 🎨 `style`: Formatação e estilo
- ⚡ `perf`: Melhorias de performance
- 🔧 `chore`: Tarefas de manutenção
- 🔥 `remove`: Remoção de código/arquivos
- 🚀 `deploy`: Alterações de deploy

### Boas Práticas de Commit
- Fazer commits atômicos (uma alteração por commit)
- Usar tempo verbal no presente
- Ser claro e objetivo na descrição
- Referenciar issues relacionadas
- Incluir contexto quando necessário
- Revisar alterações antes do commit
- Não commitar arquivos temporários

### Organização de Branches
- Branches principais:
  - `main`: Código em produção
  - `develop`: Desenvolvimento contínuo
  - `release/*`: Preparação para release
  - `hotfix/*`: Correções urgentes
  - `feature/*`: Novas funcionalidades
- Nomenclatura: usar kebab-case (ex: `feature/nova-funcionalidade`)

---

## 🔤 REGRAS DE LINGUAGEM NO CÓDIGO 🚨 CRÍTICO

### Regra Absoluta: TODO código deve ser escrito em inglês

#### ✅ O que fazer:
- **Classes**: `UserController`, `OrderService`, `ProductRepository`
- **Métodos**: `createUser()`, `processOrder()`, `validateEmail()`
- **Variáveis**: `$userData`, `$orderTotal`, `$productList`
- **Interfaces**: `UserInterface`, `OrderRepositoryInterface`
- **Enums**: `OrderStatus`, `PaymentMethod`
- **Migrations**: `create_users_table`, `add_email_to_orders_table`

#### ❌ O que NÃO fazer:
- **Classes**: `UsuarioController`, `ServicoPedido`, `RepositorioProduto`
- **Métodos**: `criarUsuario()`, `processarPedido()`, `validarEmail()`
- **Variáveis**: `$dadosUsuario`, `$totalPedido`, `$listaProdutos`
- **Interfaces**: `InterfaceUsuario`, `InterfaceRepositorioPedido`

#### Comentários - Regras Estritas:

**EVITAR comentários quando:**
```php
// ❌ Comentário desnecessário
$user = User::find($id); // Find user by ID

// ❌ Comentário óbvio
if ($user->isActive()) {
    // Check if user is active
    return true;
}

// ❌ Comentário em português
// Verifica se o usuário tem permissão
if ($user->hasPermission('admin')) {
    // ...
}
```

**USAR comentários apenas quando:**
```php
// ✅ Documentação de API
/**
 * Process order payment and update inventory
 *
 * @param Order $order
 * @return bool
 * @throws PaymentFailedException
 */
public function processPayment(Order $order): bool

// ✅ Algoritmo complexo
// Calculate shipping cost using Haversine formula for distance
$distance = $this->calculateHaversineDistance($origin, $destination);

// ✅ Workaround temporário
// TODO: Remove this hack when legacy API is updated
// HACK: Legacy system returns different date format

// ✅ Configuração específica de negócio
// Business rule: Orders over $1000 require manager approval
if ($order->total > 1000) {
    $this->requireManagerApproval($order);
}
```

---

## 📁 ESTRUTURA DE ARQUIVOS E MAPEAMENTO DO SISTEMA

### Estrutura Completa do Monorepo

```
rei-do-oleo/
├── backend/                           # Laravel 12 API
│   ├── app/
│   │   ├── Console/Commands/          # Artisan Commands
│   │   ├── Events/                    # Event Classes
│   │   ├── Exceptions/                # Custom Exceptions
│   │   ├── Http/
│   │   │   ├── Controllers/Api/       # API Controllers
│   │   │   ├── Middleware/            # Custom Middleware
│   │   │   ├── Requests/              # Form Requests
│   │   │   └── Resources/             # API Resources
│   │   ├── Jobs/                      # Queue Jobs
│   │   ├── Listeners/                 # Event Listeners
│   │   ├── Mail/                      # Mail Classes
│   │   ├── Models/                    # Eloquent Models
│   │   ├── Notifications/             # Notification Classes
│   │   ├── Policies/                  # Authorization Policies
│   │   ├── Providers/                 # Service Providers
│   │   ├── Repositories/              # Repository Pattern
│   │   ├── Services/                  # Business Logic Services
│   │   └── Support/                   # Helper Classes
│   ├── config/                        # Configuration Files
│   ├── database/
│   │   ├── factories/                 # Model Factories
│   │   ├── migrations/                # Database Migrations
│   │   └── seeders/                   # Database Seeders
│   ├── routes/api.php                 # API Routes
│   ├── storage/                       # Application Storage
│   ├── tests/                         # Tests
│   └── composer.json                  # PHP Dependencies
├── frontend/                          # React 18 + TypeScript + Vite
│   ├── public/
│   │   ├── index.html                 # Main HTML File
│   │   └── manifest.json              # PWA Manifest
│   ├── src/
│   │   ├── components/                # React Components
│   │   │   ├── ui/                    # Base UI Components
│   │   │   ├── layout/                # Layout Components
│   │   │   ├── forms/                 # Form Components
│   │   │   └── charts/                # Chart Components
│   │   ├── pages/                     # Page Components
│   │   ├── hooks/                     # Custom React Hooks
│   │   ├── services/                  # API Services
│   │   ├── store/                     # State Management
│   │   ├── types/                     # TypeScript Types
│   │   ├── utils/                     # Utility Functions
│   │   ├── styles/                    # Global Styles
│   │   ├── App.tsx                    # Main App Component
│   │   └── main.tsx                   # App Entry Point
│   ├── __tests__/                     # Test Files
│   ├── package.json                   # Node Dependencies
│   └── vite.config.ts                 # Vite Configuration
├── docs/                              # Documentation
├── scripts/                           # Automation Scripts
├── docker/                            # Docker Configuration
├── k8s/                               # Kubernetes Configuration
├── monitoring/                        # Monitoring Configuration
├── logging/                           # Logging Configuration
├── .github/workflows/                 # CI/CD Workflows
├── docker-compose.yml                 # Root Docker Compose
└── README.md                          # Project Documentation
```

### Padrões de Nomenclatura de Arquivos

#### Backend (Laravel)
- **Controllers**: `UserController.php`, `OrderController.php`
- **Models**: `User.php`, `Order.php`, `Product.php`
- **Services**: `UserService.php`, `OrderService.php`, `PaymentService.php`
- **Repositories**: `UserRepository.php`, `OrderRepository.php`
- **Requests**: `StoreUserRequest.php`, `UpdateUserRequest.php`
- **Resources**: `UserResource.php`, `OrderResource.php`
- **Migrations**: `2024_01_01_000000_create_users_table.php`
- **Seeders**: `UserSeeder.php`, `ProductSeeder.php`
- **Factories**: `UserFactory.php`, `ProductFactory.php`
- **Jobs**: `ProcessOrderJob.php`, `SendEmailJob.php`
- **Events**: `OrderCreated.php`, `UserRegistered.php`
- **Listeners**: `SendOrderConfirmation.php`, `UpdateInventory.php`
- **Policies**: `UserPolicy.php`, `OrderPolicy.php`
- **Middleware**: `ApiVersionMiddleware.php`, `RateLimitMiddleware.php`

#### Frontend (React/TypeScript)
- **Components**: `UserCard.tsx`, `OrderTable.tsx`, `ProductModal.tsx`
- **Pages**: `Dashboard.tsx`, `UserProfile.tsx`, `OrderDetails.tsx`
- **Hooks**: `useApi.ts`, `useAuth.ts`, `useLocalStorage.ts`
- **Services**: `userService.ts`, `orderService.ts`, `apiService.ts`
- **Types**: `user.types.ts`, `order.types.ts`, `api.types.ts`
- **Utils**: `constants.ts`, `helpers.ts`, `validators.ts`
- **Tests**: `UserCard.test.tsx`, `useApi.test.ts`, `helpers.test.ts`

### Estrutura de Banco de Dados

#### Tabelas Principais
```sql
-- Users Table
users (
    id, name, email, email_verified_at, password,
    remember_token, created_at, updated_at
)

-- Products Table
products (
    id, name, description, price, stock_quantity,
    category_id, status, created_at, updated_at
)

-- Orders Table
orders (
    id, user_id, total_amount, status, payment_status,
    shipping_address, created_at, updated_at
)

-- Order Items Table
order_items (
    id, order_id, product_id, quantity, unit_price,
    total_price, created_at, updated_at
)

-- Categories Table
categories (
    id, name, description, parent_id, created_at, updated_at
)
```

### Mapeamento de Rotas da API

#### Rotas de Autenticação
- `POST /api/auth/login` - Login do usuário
- `POST /api/auth/register` - Registro de usuário
- `POST /api/auth/logout` - Logout do usuário
- `POST /api/auth/refresh` - Refresh do token
- `GET /api/auth/me` - Dados do usuário logado

#### Rotas de Usuários
- `GET /api/users` - Listar usuários
- `GET /api/users/{id}` - Buscar usuário específico
- `POST /api/users` - Criar usuário
- `PUT /api/users/{id}` - Atualizar usuário
- `DELETE /api/users/{id}` - Deletar usuário

#### Rotas de Produtos
- `GET /api/products` - Listar produtos
- `GET /api/products/{id}` - Buscar produto específico
- `POST /api/products` - Criar produto
- `PUT /api/products/{id}` - Atualizar produto
- `DELETE /api/products/{id}` - Deletar produto

#### Rotas de Pedidos
- `GET /api/orders` - Listar pedidos
- `GET /api/orders/{id}` - Buscar pedido específico
- `POST /api/orders` - Criar pedido
- `PUT /api/orders/{id}` - Atualizar pedido
- `DELETE /api/orders/{id}` - Deletar pedido

---

## 🎯 CONTEXTO DO SISTEMA E FUNCIONALIDADES ⚡ IMPORTANTE

### Domínio do Negócio - Sistema de Gestão de Óleos

#### Entidades Principais
- **Users**: Usuários do sistema (clientes, administradores, vendedores)
- **Products**: Produtos de óleo (óleos automotivos, industriais, especiais)
- **Orders**: Pedidos de clientes
- **Categories**: Categorias de produtos (automotivo, industrial, etc.)
- **Suppliers**: Fornecedores de produtos
- **Inventory**: Controle de estoque
- **Payments**: Processamento de pagamentos
- **Shipping**: Logística e entrega

#### Funcionalidades Core
1. **Gestão de Usuários** - Registro, autenticação, perfis, controle de acesso
2. **Catálogo de Produtos** - Cadastro, categorização, gestão de preços, estoque
3. **Sistema de Pedidos** - Carrinho, processamento, status, histórico
4. **Gestão de Estoque** - Controle entrada/saída, alertas, relatórios
5. **Relatórios e Analytics** - Vendas, produtos mais vendidos, performance

### Mapeamento de Funcionalidades por Módulo

#### Módulo de Autenticação
- **Arquivos**: `AuthController`, `LoginRequest`, `RegisterRequest`, `UserPolicy`
- **Rotas**: `/api/auth/*`
- **Componentes**: `LoginForm`, `RegisterForm`, `ForgotPassword`
- **Hooks**: `useAuth`, `usePermissions`

#### Módulo de Usuários
- **Arquivos**: `UserController`, `UserService`, `UserRepository`, `UserResource`
- **Rotas**: `/api/users/*`
- **Componentes**: `UserList`, `UserForm`, `UserProfile`, `UserCard`
- **Hooks**: `useUsers`, `useUserProfile`

#### Módulo de Produtos
- **Arquivos**: `ProductController`, `ProductService`, `ProductRepository`, `ProductResource`
- **Rotas**: `/api/products/*`
- **Componentes**: `ProductList`, `ProductForm`, `ProductCard`, `ProductModal`
- **Hooks**: `useProducts`, `useProductCategories`

#### Módulo de Pedidos
- **Arquivos**: `OrderController`, `OrderService`, `OrderRepository`, `OrderResource`
- **Rotas**: `/api/orders/*`
- **Componentes**: `OrderList`, `OrderForm`, `OrderDetails`, `OrderStatus`
- **Hooks**: `useOrders`, `useOrderStatus`

#### Módulo de Estoque
- **Arquivos**: `InventoryController`, `InventoryService`, `InventoryRepository`
- **Rotas**: `/api/inventory/*`
- **Componentes**: `InventoryList`, `StockAlert`, `MovementHistory`
- **Hooks**: `useInventory`, `useStockAlerts`

---

## 💻 PADRÕES DE CÓDIGO

### Laravel Patterns

#### Controller Pattern
```php
class OrderController extends Controller
{
    public function __construct(
        private OrderService $orderService
    ) {}

    public function store(StoreOrderRequest $request): JsonResponse
    {
        $order = $this->orderService->create($request->validated());
        return new OrderResource($order);
    }
}
```

#### Service Pattern
```php
class OrderService
{
    public function create(array $data): Order
    {
        DB::beginTransaction();

        try {
            $order = Order::create($data);
            event(new OrderCreated($order));

            DB::commit();
            return $order;
        } catch (Exception $e) {
            DB::rollBack();
            throw $e;
        }
    }
}
```

#### Repository Pattern
```php
interface ProductRepositoryInterface
{
    public function getPaginated(array $filters): LengthAwarePaginator;
    public function findById(int $id): ?Product;
    public function create(array $data): Product;
    public function update(Product $product, array $data): Product;
    public function delete(Product $product): bool;
}

class ProductRepository implements ProductRepositoryInterface
{
    public function getPaginated(array $filters): LengthAwarePaginator
    {
        $query = Product::query()
            ->with(['category', 'supplier'])
            ->when(isset($filters['search']), function ($query) use ($filters) {
                $query->where('name', 'like', '%' . $filters['search'] . '%');
            })
            ->when(isset($filters['category_id']), function ($query) use ($filters) {
                $query->where('category_id', $filters['category_id']);
            });

        return $query->orderBy('created_at', 'desc')->paginate($filters['per_page'] ?? 15);
    }
}
```

### React Patterns

#### Component Pattern
```typescript
interface ProductCardProps {
  product: Product;
  onAddToCart: (product: Product) => void;
}

const ProductCard: React.FC<ProductCardProps> = memo(
  ({ product, onAddToCart }) => {
    const handleAddToCart = useCallback(() => {
      onAddToCart(product);
    }, [product, onAddToCart]);

    return (
      <Card>
        <Card.Header>{product.name}</Card.Header>
        <Card.Body>
          <Button onClick={handleAddToCart}>Add to Cart</Button>
        </Card.Body>
      </Card>
    );
  }
);
```

#### Custom Hook Pattern
```typescript
export const useProducts = (filters?: ProductFilters) => {
  return useQuery({
    queryKey: ['products', filters],
    queryFn: () => productService.getProducts(filters),
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
};

export const useCreateProduct = () => {
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: productService.createProduct,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['products'] });
      toast.success('Product created successfully');
    },
    onError: (error) => {
      toast.error('Failed to create product');
    }
  });
};
```

---

## 🛠️ CONFIGURAÇÕES E FERRAMENTAS DE DESENVOLVIMENTO

### Configurações de Ambiente

#### Backend (.env)
```env
APP_NAME="Rei do Óleo"
APP_ENV=local
APP_KEY=base64:...
APP_DEBUG=true
APP_URL=http://localhost:8000

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=rei_do_oleo
DB_USERNAME=root
DB_PASSWORD=

CACHE_DRIVER=redis
SESSION_DRIVER=redis
QUEUE_CONNECTION=redis

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailpit
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"
```

#### Frontend (.env)
```env
VITE_APP_NAME="Rei do Óleo"
VITE_API_URL=http://localhost:8000/api
VITE_APP_URL=http://localhost:3000
VITE_APP_ENV=development
```

### Dependências Principais

#### Backend (composer.json)
```json
{
  "require": {
    "php": "^8.2",
    "laravel/framework": "^12.0",
    "laravel/sanctum": "^4.0",
    "laravel/telescope": "^5.0",
    "predis/predis": "^2.0",
    "spatie/laravel-permission": "^6.0",
    "spatie/laravel-activitylog": "^5.0"
  },
  "require-dev": {
    "fakerphp/faker": "^1.9.1",
    "laravel/pint": "^1.0",
    "laravel/sail": "^1.18",
    "mockery/mockery": "^1.4.4",
    "nunomaduro/collision": "^8.1",
    "phpunit/phpunit": "^10.1",
    "spatie/laravel-ignition": "^2.0"
  }
}
```

#### Frontend (package.json)
```json
{
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.8.0",
    "@tanstack/react-query": "^5.0.0",
    "axios": "^1.6.0",
    "tailwindcss": "^3.3.0",
    "@headlessui/react": "^1.7.0",
    "@heroicons/react": "^2.0.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.0",
    "@types/react-dom": "^18.2.0",
    "@vitejs/plugin-react": "^4.0.0",
    "typescript": "^5.0.0",
    "vite": "^5.0.0",
    "jest": "^29.0.0",
    "@testing-library/react": "^14.0.0"
  }
}
```

### Scripts de Desenvolvimento

#### Package.json Scripts (Frontend)
```json
{
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "lint": "eslint src --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "lint:fix": "eslint src --ext ts,tsx --fix",
    "format": "prettier --write \"src/**/*.{ts,tsx,js,jsx,json,css,md}\"",
    "type-check": "tsc --noEmit",
    "validate": "npm run type-check && npm run lint && npm test && npm run build",
    "validate:quick": "npm run type-check && npm run lint"
  }
}
```

#### Composer Scripts (Backend)
```json
{
  "scripts": {
    "test": "php artisan test",
    "test:coverage": "php artisan test --coverage",
    "test:unit": "php artisan test --testsuite=Unit",
    "test:feature": "php artisan test --testsuite=Feature",
    "lint": "php-cs-fixer fix --dry-run --diff",
    "lint:fix": "php-cs-fixer fix",
    "analyse": "phpstan analyse",
    "migrate": "php artisan migrate",
    "migrate:fresh": "php artisan migrate:fresh --seed",
    "seed": "php artisan db:seed",
    "optimize": "php artisan optimize",
    "cache:clear": "php artisan cache:clear",
    "config:cache": "php artisan config:cache",
    "route:cache": "php artisan route:cache",
    "view:cache": "php artisan view:cache"
  }
}
```

---

## 🔍 VERIFICAÇÃO DE CONSISTÊNCIA DO FRONTEND 🚨 CRÍTICO

### Build Validation - Regra Obrigatória

**IMPORTANTE**: Sempre que for necessário verificar a consistência do frontend, fazer o build para validação.

#### Comandos de Verificação de Build

```bash
# Verificação completa de build
npm run build

# Verificação de tipos TypeScript
npm run type-check

# Verificação de linting
npm run lint

# Verificação de testes
npm test

# Análise de bundle
npm run analyze
```

#### Checklist de Verificação de Build

```bash
# 1. Limpar cache e node_modules (se necessário)
rm -rf node_modules package-lock.json
npm install

# 2. Verificar tipos TypeScript
npm run type-check

# 3. Verificar linting
npm run lint

# 4. Rodar testes
npm test

# 5. Fazer build de produção
npm run build

# 6. Verificar se o build foi gerado corretamente
ls -la dist/

# 7. Testar build localmente
npm run preview
```

#### Troubleshooting de Build

```bash
# Problemas comuns e soluções

# 1. Erro de tipos TypeScript
npm run type-check
# Corrigir erros de tipo antes do build

# 2. Erro de linting
npm run lint:fix
# Corrigir automaticamente problemas de linting

# 3. Erro de dependências
rm -rf node_modules package-lock.json
npm install

# 4. Erro de cache do Vite
rm -rf node_modules/.vite
npm run build

# 5. Erro de memória
export NODE_OPTIONS="--max-old-space-size=4096"
npm run build

# 6. Verificar versões de Node.js
node --version
npm --version
# Garantir compatibilidade com package.json
```

---

## 📋 COMANDOS ÚTEIS PARA DESENVOLVIMENTO ⚡ IMPORTANTE

### Comandos Essenciais

#### Laravel Commands
```bash
# Development
php artisan serve
php artisan migrate:fresh --seed
php artisan queue:work
php artisan telescope:install

# Debugging
php artisan tinker
php artisan route:list
php artisan config:cache
php artisan view:cache

# Testing
php artisan test
php artisan test --coverage
php artisan test --filter=UserTest

# Maintenance
php artisan down
php artisan up
php artisan optimize
```

#### React Commands
```bash
# Development
npm run dev
npm run build
npm run preview

# Testing
npm test
npm run test:watch
npm run test:coverage

# Linting
npm run lint
npm run lint:fix
npm run type-check

# Storybook
npm run storybook
npm run build-storybook
```

### Performance Optimization Checklist

#### Backend Optimization
- [ ] Database indexes on frequently queried columns
- [ ] Eager loading to prevent N+1 queries
- [ ] Query caching for expensive operations
- [ ] Redis for session and cache storage
- [ ] Queue jobs for heavy operations
- [ ] Image optimization and CDN usage
- [ ] API response compression
- [ ] Database connection pooling

#### Frontend Optimization
- [ ] Code splitting and lazy loading
- [ ] Image optimization and WebP format
- [ ] Bundle size optimization
- [ ] Memoization of expensive calculations
- [ ] Virtual scrolling for large lists
- [ ] Service Worker for caching
- [ ] Critical CSS inlining
- [ ] Tree shaking for unused code

---

## 🎨 UI/UX Guidelines

### TailAdmin React - Template de Dashboard

**Versão Atual**: 2.1.0

**Características Principais:**
- Template baseado em Tailwind CSS + React
- Componentes pré-construídos e responsivos
- Layouts otimizados para dashboards administrativos
- Suporte a modo escuro/claro
- Componentes acessíveis e customizáveis

**Estrutura de Arquivos:**
```
src/
├── components/          # Componentes reutilizáveis
│   ├── ui/             # Componentes base (Button, Input, etc.)
│   ├── layout/         # Layouts (Sidebar, Header, etc.)
│   └── charts/         # Componentes de gráficos
├── pages/              # Páginas da aplicação
├── hooks/              # Custom hooks
├── utils/              # Utilitários e helpers
└── styles/             # Estilos globais e Tailwind
```

**Componentes Principais:**
- **Layout Components**: Sidebar, Header, Footer, Breadcrumb
- **UI Components**: Buttons, Forms, Tables, Cards, Modals
- **Data Components**: Charts, DataTables, Filters
- **Navigation**: Menu, Tabs, Pagination

**Responsividade:**
- Mobile-first approach
- Breakpoints: sm (640px), md (768px), lg (1024px), xl (1280px)
- Componentes adaptáveis automaticamente

**Acessibilidade:**
- Suporte a ARIA labels
- Navegação por teclado
- Contraste adequado
- Screen reader friendly

---

## 🔒 Segurança e Boas Práticas

### Laravel Security

```php
// Rate Limiting
Route::middleware('throttle:api')->group(function () {
    Route::post('/login', [AuthController::class, 'login']);
});

// Input Validation
class StoreUserRequest extends FormRequest
{
    public function rules(): array
    {
        return [
            'email' => ['required', 'email', 'unique:users'],
            'password' => ['required', 'min:8', 'confirmed', 'regex:/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/'],
        ];
    }
}

// SQL Injection Protection
User::where('email', $request->email)->first(); // ✅ Safe
DB::raw("SELECT * FROM users WHERE email = '{$email}'"); // ❌ Dangerous
```

### React Security

```typescript
// XSS Protection
const sanitizeHtml = (html: string): string => {
  return DOMPurify.sanitize(html);
};

// CSRF Protection
const apiClient = axios.create({
  headers: {
    'X-CSRF-TOKEN': document
      .querySelector('meta[name="csrf-token"]')
      ?.getAttribute('content'),
  },
});
```

---

## 🧪 Testes

### Laravel Testing

```php
// Feature Tests
class OrderTest extends TestCase
{
    use RefreshDatabase;

    public function test_user_can_create_order()
    {
        $user = User::factory()->create();
        $product = Product::factory()->create();

        $response = $this->actingAs($user)
            ->postJson('/api/orders', [
                'product_id' => $product->id,
                'quantity' => 2
            ]);

        $response->assertStatus(201)
            ->assertJsonStructure([
                'data' => ['id', 'total', 'status']
            ]);
    }
}
```

### React Testing

```typescript
// Component Tests
describe('ProductCard', () => {
  it('should call onAddToCart when button is clicked', () => {
    const mockOnAddToCart = jest.fn();
    const product = { id: 1, name: 'Test Product' };

    render(<ProductCard product={product} onAddToCart={mockOnAddToCart} />);

    fireEvent.click(screen.getByText('Add to Cart'));
    expect(mockOnAddToCart).toHaveBeenCalledWith(product);
  });
});
```

---

## 📊 Monitoramento e Observabilidade

### Logging Strategy

```php
// Laravel Logging
Log::info('Order created', [
    'order_id' => $order->id,
    'user_id' => $user->id,
    'total' => $order->total
]);

// Custom Log Channel
'orders' => [
    'driver' => 'daily',
    'path' => storage_path('logs/orders.log'),
    'level' => 'info',
    'days' => 30,
],
```

### Error Tracking

- **Sentry**: Error monitoring
- **New Relic**: Performance monitoring
- **LogRocket**: Frontend session replay
- **Telescope**: Laravel debugging

---

## 🔄 DevOps e CI/CD

### Docker Configuration

```dockerfile
# Laravel Dockerfile
FROM php:8.2-fpm

WORKDIR /var/www

COPY composer.json composer.lock ./
RUN composer install --no-scripts --no-autoloader

COPY . .
RUN composer dump-autoload --optimize

EXPOSE 9000
CMD ["php-fpm"]
```

### GitHub Actions

```yaml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
      - name: Install dependencies
        run: composer install
      - name: Run tests
        run: php artisan test
```

---

## 💡 Melhores Práticas 🚨 CRÍTICO

### Code Review Checklist

- [ ] Código segue padrões estabelecidos
- [ ] **Todo código escrito em inglês** (classes, métodos, variáveis)
- [ ] **Comentários evitados ou em inglês quando necessários**
- [ ] Testes unitários incluídos
- [ ] Documentação atualizada
- [ ] Performance considerada
- [ ] Segurança validada
- [ ] Acessibilidade verificada
- [ ] Responsividade testada

### Database Best Practices

```php
// Migrations
Schema::create('orders', function (Blueprint $table) {
    $table->id();
    $table->foreignId('user_id')->constrained()->onDelete('cascade');
    $table->decimal('total', 10, 2);
    $table->enum('status', ['pending', 'completed', 'cancelled']);
    $table->timestamps();

    $table->index(['user_id', 'status']);
});
```

---

## 📋 RESUMO RÁPIDO - CONSULTA RÁPIDA

### 🚨 REGRAS CRÍTICAS (SEMPRE SEGUIR)
1. **Verificação Inteligente**: Sempre verificar backend e frontend antes de criar funcionalidades
2. **Código em inglês**: Classes, métodos, variáveis
3. **Build validation**: Sempre fazer build antes de commits importantes
4. **Padrões de commit**: `🐘 Backend ✨ feat: Descrição`
5. **TypeScript**: Validar tipos antes de push

### ⚡ COMANDOS MAIS USADOS
```bash
# Backend
php artisan serve
php artisan migrate:fresh --seed
php artisan test

# Frontend
npm run dev
npm run build
npm run validate:quick

# Docker
docker-compose up -d
docker-compose down

# Verificação Automática
find backend/app/Models -name "*.php" | head -5
find backend/app/Http/Controllers/Api -name "*.php" | head -5
find frontend/src/pages -name "*.tsx" | head -5
find frontend/src/components -name "*.tsx" | head -5
```

### 📁 ESTRUTURA PRINCIPAL
```
rei-do-oleo/
├── backend/          # Laravel 12 API
│   ├── app/         # Controllers, Models, Services
│   ├── routes/      # API Routes
│   └── database/    # Migrations, Seeders
├── frontend/        # React 18 + TypeScript
│   ├── src/         # Components, Pages, Hooks
│   └── public/      # Static files
└── docker/          # Docker configurations
```

### 🔗 URLs IMPORTANTES
- **Backend**: http://localhost:8000
- **Frontend**: http://localhost:3000
- **API Docs**: http://localhost:8000/api/documentation
- **Telescope**: http://localhost:8000/telescope

### 📝 PADRÕES DE NOMENCLATURA
- **Classes**: `UserController`, `OrderService`
- **Métodos**: `createUser()`, `processOrder()`
- **Variáveis**: `$userData`, `$orderTotal`
- **Interfaces**: `UserInterface`, `OrderRepositoryInterface`

### 🎯 CHECKLIST RÁPIDO
- [ ] Verificação inteligente (backend + frontend)
- [ ] Código em inglês
- [ ] Build funcionando
- [ ] Testes passando
- [ ] Linting limpo
- [ ] Commit com prefixo correto
- [ ] Documentação atualizada

---

**📖 Para informações detalhadas, consulte as seções específicas acima.**
