## üë®‚Äçüíª Perfil de Desenvolvimento

### Desenvolvedor Laravel 12 Senior

**Caracter√≠sticas obrigat√≥rias:**

- Dom√≠nio completo de Laravel 12+ features
- Conhecimento de Eloquent ORM avan√ßado
- Experi√™ncia com Migrations, Seeders e Factories
- Profici√™ncia em Queue Jobs e Event Listeners
- Expertise em Laravel Sanctum/Passport
- Conhecimento de Artisan Commands personalizados
- Experi√™ncia com Service Providers e Facades
- Dom√≠nio de Form Requests e Resource Controllers
- Conhecimento de Middleware personalizado
- Experi√™ncia com Broadcasting e WebSockets
- Profici√™ncia em testes com PHPUnit e Pest

**Pr√°ticas Laravel Avan√ßadas:**

```php
// Repository Pattern
interface UserRepositoryInterface {
    public function findWithFilters(array $filters): Collection;
}

// Service Layer
class OrderService {
    public function __construct(
        private OrderRepository $orderRepository,
        private PaymentService $paymentService
    ) {}
}

// Custom Middleware
class ApiVersionMiddleware {
    public function handle(Request $request, Closure $next, string $version)
    {
        $request->headers->set('Accept', "application/vnd.api+json;version={$version}");
        return $next($request);
    }
}
```

### Desenvolvedor React Senior

**Caracter√≠sticas obrigat√≥rias:**

- Expertise em React 18+ com Hooks
- Dom√≠nio de Context API e State Management
- Conhecimento de React Query/TanStack Query
- Experi√™ncia com TypeScript avan√ßado
- Profici√™ncia em Testing Library e Jest
- Conhecimento de Performance Optimization
- Experi√™ncia com Micro-frontends
- Dom√≠nio de Custom Hooks
- Conhecimento de Suspense e Concurrent Features
- Experi√™ncia com Storybook para componentes
- Profici√™ncia em Accessibility (a11y)

**Pr√°ticas React Avan√ßadas:**

```typescript
// Custom Hook com TypeScript
interface UseApiResult<T> {
  data: T | null;
  loading: boolean;
  error: Error | null;
  refetch: () => void;
}

const useApi = <T>(url: string): UseApiResult<T> => {
  const [state, setState] = useState<UseApiResult<T>>({
    data: null,
    loading: true,
    error: null,
    refetch: () => {}
  });

  // Implementation...
};

// Compound Component Pattern
const Card = ({ children, ...props }) => (
  <div className="card" {...props}>{children}</div>
);
Card.Header = ({ children }) => <header>{children}</header>;
Card.Body = ({ children }) => <main>{children}</main>;
```

## üèóÔ∏è Arquitetura e Estrutura

### Monorepo

- Use monorepo com estrutura:
  ```
  rei-do-oleo/
  ‚îú‚îÄ‚îÄ backend/                    # Laravel API
  ‚îÇ   ‚îú‚îÄ‚îÄ app/
  ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Http/Controllers/
  ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Models/
  ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Services/
  ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Repositories/
  ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Events/
  ‚îÇ   ‚îú‚îÄ‚îÄ config/
  ‚îÇ   ‚îú‚îÄ‚îÄ database/
  ‚îÇ   ‚îú‚îÄ‚îÄ routes/
  ‚îÇ   ‚îî‚îÄ‚îÄ tests/
  ‚îú‚îÄ‚îÄ frontend/                   # React + Vite
  ‚îÇ   ‚îú‚îÄ‚îÄ src/
  ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/
  ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/
  ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ services/
  ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ types/
  ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ utils/
  ‚îÇ   ‚îú‚îÄ‚îÄ public/
  ‚îÇ   ‚îî‚îÄ‚îÄ __tests__/
  ‚îú‚îÄ‚îÄ docs/                       # Documenta√ß√£o t√©cnica
  ‚îú‚îÄ‚îÄ scripts/                    # Scripts de automa√ß√£o
  ‚îú‚îÄ‚îÄ docker/                     # Configura√ß√µes Docker
  ‚îú‚îÄ‚îÄ .github/workflows/          # CI/CD
  ‚îú‚îÄ‚îÄ docker-compose.yml
  ‚îî‚îÄ‚îÄ README.md
  ```

### Padr√µes Arquiteturais

- **Backend**: Domain-Driven Design (DDD)
- **Frontend**: Atomic Design Pattern
- **API**: RESTful + GraphQL opcional
- **Database**: Repository Pattern + Active Record
- **Caching**: Multi-layer caching strategy

## üíª Desenvolvimento

### Padr√µes de C√≥digo Laravel

```php
// Controller Pattern
class OrderController extends Controller
{
    public function __construct(
        private OrderService $orderService
    ) {}

    public function store(StoreOrderRequest $request): JsonResponse
    {
        $order = $this->orderService->create($request->validated());

        return new OrderResource($order);
    }
}

// Service Pattern
class OrderService
{
    public function create(array $data): Order
    {
        DB::beginTransaction();

        try {
            $order = Order::create($data);
            event(new OrderCreated($order));

            DB::commit();
            return $order;
        } catch (Exception $e) {
            DB::rollBack();
            throw $e;
        }
    }
}
```

### Padr√µes de C√≥digo React

```typescript
// Component Pattern
interface ProductCardProps {
  product: Product;
  onAddToCart: (product: Product) => void;
}

const ProductCard: React.FC<ProductCardProps> = memo(
  ({ product, onAddToCart }) => {
    const handleAddToCart = useCallback(() => {
      onAddToCart(product);
    }, [product, onAddToCart]);

    return (
      <Card>
        <Card.Header>{product.name}</Card.Header>
        <Card.Body>
          <Button onClick={handleAddToCart}>Adicionar ao Carrinho</Button>
        </Card.Body>
      </Card>
    );
  }
);
```

### Configura√ß√£o de Ferramentas

- **ESLint**: Airbnb config + custom rules
- **Prettier**: Formata√ß√£o autom√°tica
- **Husky**: Git hooks
- **lint-staged**: Pre-commit linting
- **CommitLint**: Conventional commits

==== Versionamento e Commits ====

=== Estrutura de Commits ===

- Padr√£o de commits para o Frontend
  ‚öõÔ∏è Frontend ‚ú® feat: Implementa tela de login
  ‚öõÔ∏è Frontend üêõ fix: Corrige responsividade do menu
  ‚öõÔ∏è Frontend üé® style: Atualiza tema e cores do sistema
  ‚öõÔ∏è Frontend ‚ôªÔ∏è refactor: Converte componentes para TypeScript
  ‚öõÔ∏è Frontend üîß chore: Atualiza depend√™ncias do npm
  ‚öõÔ∏è Frontend üì± mobile: Ajusta layout para dispositivos m√≥veis
  ‚öõÔ∏è Frontend üß™ test: Adiciona testes para componente Button

- Padr√£o de commits para o backend
  üêò Backend ‚ú® feat: Adiciona autentica√ß√£o via Sanctum
  üêò Backend üêõ fix: Corrige valida√ß√£o de email no registro
  üêò Backend ‚ôªÔ∏è refactor: Reorganiza estrutura de controllers
  üêò Backend üîß chore: Atualiza depend√™ncias do Composer
  üêò Backend üß™ test: Adiciona testes para AuthController
  üêò Backend üìä perf: Otimiza queries do usu√°rio
  üêò Backend üîí security: Implementa rate limiting na API

- Padr√£o de commits para o DevOps
  üê≥ DevOps üöÄ deploy: Configura pipeline CI/CD no GitHub Actions
  üê≥ DevOps üîß chore: Atualiza configura√ß√£o do Docker
  üê≥ DevOps üìä monitoring: Adiciona Prometheus e Grafana
  üê≥ DevOps üîí security: Configura SSL e certificados
  üê≥ DevOps üèóÔ∏è infra: Provisiona recursos na AWS com Terraform
  üê≥ DevOps üîÑ backup: Implementa rotina autom√°tica de backup

- Padr√£o de commits para o
  üìù Docs ‚ú® feat: Adiciona documenta√ß√£o da API
  üìù Docs üîÑ update: Atualiza README com instru√ß√µes
  üìù Docs üêõ fix: Corrige links quebrados na documenta√ß√£o
  üìù Docs üìä diagram: Adiciona diagrama de arquitetura

- Usar prefixos para categorizar:
  - üìù `docs`: Altera√ß√µes em documenta√ß√£o
  - ‚ú® `feat`: Novas funcionalidades
  - üêõ `fix`: Corre√ß√µes de bugs
  - ‚ôªÔ∏è `refactor`: Refatora√ß√£o de c√≥digo
  - üé® `style`: Formata√ß√£o e estilo
  - ‚ö° `perf`: Melhorias de performance
  - üîß `chore`: Tarefas de manuten√ß√£o
  - üî• `remove`: Remo√ß√£o de c√≥digo/arquivos
  - üöÄ `deploy`: Altera√ß√µes de deploy

=== Mensagens de Commit ===

- Formato padr√£o:
  - Adicione algo que defina o commit √© sobre o backend, frontend, devops ou outros
  - T√≠tulo e breve descri√ß√£o: Resumo curto (m√°ximo 20 palavras)
- Exemplo:
  - üêò Backend ‚ú® feat: Adiciona sistema de busca
  - Closes #123

=== Boas Pr√°ticas de Commit ===

- Fazer commits at√¥micos (uma altera√ß√£o por commit)
- Usar tempo verbal no presente
- Ser claro e objetivo na descri√ß√£o
- Referenciar issues relacionadas
- Incluir contexto quando necess√°rio
- Revisar altera√ß√µes antes do commit
- N√£o commitar arquivos tempor√°rios

=== Organiza√ß√£o de Branches ===

- Branches principais:
  - `main`: C√≥digo em produ√ß√£o
  - `develop`: Desenvolvimento cont√≠nuo
  - `release/*`: Prepara√ß√£o para release
  - `hotfix/*`: Corre√ß√µes urgentes
  - `feature/*`: Novas funcionalidades
- Nomenclatura:
  - Usar kebab-case: feature/nova-funcionalidade
  - Incluir prefixo do tipo: hotfix/correcao-urgente
  - Adicionar identificador: feature/123-busca-avancada

=== Fluxo de Trabalho ===

- Criar branch espec√≠fica para cada tarefa
- Manter branches atualizadas com rebase
- Fazer squash de commits relacionados
- Testar altera√ß√µes antes do merge
- Deletar branches ap√≥s merge
- Usar tags para releases
- Manter hist√≥rico limpo e organizado

=== Revis√£o de C√≥digo ===

- Verificar:
  - Qualidade do c√≥digo
  - Padr√µes de formata√ß√£o
  - Documenta√ß√£o atualizada
  - Testes implementados
  - Conflitos resolvidos
- Fazer code review antes do merge
- Solicitar feedback quando necess√°rio

=== Seguran√ßa e Backup ===

- N√£o commitar:
  - Senhas e chaves
  - Arquivos de configura√ß√£o local
  - Dados sens√≠veis
  - Arquivos grandes
- Manter backup do reposit√≥rio
- Usar .gitignore adequadamente
- Configurar hooks de seguran√ßa

## üîí Seguran√ßa Avan√ßada

### Laravel Security

```php
// Rate Limiting
Route::middleware('throttle:api')->group(function () {
    Route::post('/login', [AuthController::class, 'login']);
});

// Input Validation
class StoreUserRequest extends FormRequest
{
    public function rules(): array
    {
        return [
            'email' => ['required', 'email', 'unique:users'],
            'password' => ['required', 'min:8', 'confirmed', 'regex:/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/'],
        ];
    }
}

// SQL Injection Protection
User::where('email', $request->email)->first(); // ‚úÖ Safe
DB::raw("SELECT * FROM users WHERE email = '{$email}'"); // ‚ùå Dangerous
```

### React Security

```typescript
// XSS Protection
const sanitizeHtml = (html: string): string => {
  return DOMPurify.sanitize(html);
};

// CSRF Protection
const apiClient = axios.create({
  headers: {
    'X-CSRF-TOKEN': document
      .querySelector('meta[name="csrf-token"]')
      ?.getAttribute('content'),
  },
});
```

## üöÄ Performance Avan√ßada

### Laravel Performance

```php
// Query Optimization
User::with(['orders', 'profile'])->get(); // Eager Loading
User::select(['id', 'name', 'email'])->get(); // Select specific columns

// Caching Strategy
Cache::remember('user_stats_' . $userId, 3600, function () use ($userId) {
    return $this->calculateUserStats($userId);
});

// Queue Jobs
ProcessOrderJob::dispatch($order)->onQueue('high-priority');
```

### React Performance

```typescript
// Lazy Loading
const Dashboard = lazy(() => import('./components/Dashboard'));

// Memoization
const ExpensiveComponent = memo(({ data }) => {
  const processedData = useMemo(() => {
    return data.map((item) => expensiveOperation(item));
  }, [data]);

  return <div>{processedData}</div>;
});

// Code Splitting
const routes = [
  {
    path: '/dashboard',
    component: lazy(() => import('./pages/Dashboard')),
  },
];
```

## üß™ Testes Avan√ßados

### Laravel Testing

```php
// Feature Tests
class OrderTest extends TestCase
{
    use RefreshDatabase;

    public function test_user_can_create_order()
    {
        $user = User::factory()->create();
        $product = Product::factory()->create();

        $response = $this->actingAs($user)
            ->postJson('/api/orders', [
                'product_id' => $product->id,
                'quantity' => 2
            ]);

        $response->assertStatus(201)
            ->assertJsonStructure([
                'data' => ['id', 'total', 'status']
            ]);
    }
}
```

### React Testing

```typescript
// Component Tests
describe('ProductCard', () => {
  it('should call onAddToCart when button is clicked', () => {
    const mockOnAddToCart = jest.fn();
    const product = { id: 1, name: 'Test Product' };

    render(<ProductCard product={product} onAddToCart={mockOnAddToCart} />);

    fireEvent.click(screen.getByText('Adicionar ao Carrinho'));
    expect(mockOnAddToCart).toHaveBeenCalledWith(product);
  });
});
```

## üìä Monitoramento e Observabilidade

### Logging Strategy

```php
// Laravel Logging
Log::info('Order created', [
    'order_id' => $order->id,
    'user_id' => $user->id,
    'total' => $order->total
]);

// Custom Log Channel
'orders' => [
    'driver' => 'daily',
    'path' => storage_path('logs/orders.log'),
    'level' => 'info',
    'days' => 30,
],
```

### Error Tracking

- **Sentry**: Error monitoring
- **New Relic**: Performance monitoring
- **LogRocket**: Frontend session replay
- **Telescope**: Laravel debugging

## üîÑ DevOps e CI/CD

### Docker Configuration

```dockerfile
# Laravel Dockerfile
FROM php:8.2-fpm

WORKDIR /var/www

COPY composer.json composer.lock ./
RUN composer install --no-scripts --no-autoloader

COPY . .
RUN composer dump-autoload --optimize

EXPOSE 9000
CMD ["php-fpm"]
```

### GitHub Actions

```yaml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
      - name: Install dependencies
        run: composer install
      - name: Run tests
        run: php artisan test
```

## üí° Melhores Pr√°ticas

### Code Review Checklist

- [ ] C√≥digo segue padr√µes estabelecidos
- [ ] **Todo c√≥digo escrito em ingl√™s** (classes, m√©todos, vari√°veis)
- [ ] **Coment√°rios evitados ou em ingl√™s quando necess√°rios**
- [ ] Testes unit√°rios inclu√≠dos
- [ ] Documenta√ß√£o atualizada
- [ ] Performance considerada
- [ ] Seguran√ßa validada
- [ ] Acessibilidade verificada
- [ ] Responsividade testada

### üî§ Regras de Linguagem no C√≥digo

**CR√çTICO: Manter consist√™ncia lingu√≠stica**

#### ‚úÖ O que fazer:
- **Classes**: `UserController`, `OrderService`, `ProductRepository`
- **M√©todos**: `createUser()`, `processOrder()`, `validateEmail()`
- **Vari√°veis**: `$userData`, `$orderTotal`, `$productList`
- **Interfaces**: `UserInterface`, `OrderRepositoryInterface`
- **Enums**: `OrderStatus`, `PaymentMethod`
- **Migrations**: `create_users_table`, `add_email_to_orders_table`

#### ‚ùå O que N√ÉO fazer:
- **Classes**: `UsuarioController`, `ServicoPedido`, `RepositorioProduto`
- **M√©todos**: `criarUsuario()`, `processarPedido()`, `validarEmail()`
- **Vari√°veis**: `$dadosUsuario`, `$totalPedido`, `$listaProdutos`
- **Interfaces**: `InterfaceUsuario`, `InterfaceRepositorioPedido`

#### üìù Coment√°rios - Regras Estritas:

**EVITAR coment√°rios quando:**
```php
// ‚ùå Coment√°rio desnecess√°rio
$user = User::find($id); // Find user by ID

// ‚ùå Coment√°rio √≥bvio
if ($user->isActive()) {
    // Check if user is active
    return true;
}

// ‚ùå Coment√°rio em portugu√™s
// Verifica se o usu√°rio tem permiss√£o
if ($user->hasPermission('admin')) {
    // ...
}
```

**USAR coment√°rios apenas quando:**
```php
// ‚úÖ Documenta√ß√£o de API
/**
 * Process order payment and update inventory
 *
 * @param Order $order
 * @return bool
 * @throws PaymentFailedException
 */
public function processPayment(Order $order): bool

// ‚úÖ Algoritmo complexo
// Calculate shipping cost using Haversine formula for distance
$distance = $this->calculateHaversineDistance($origin, $destination);

// ‚úÖ Workaround tempor√°rio
// TODO: Remove this hack when legacy API is updated
// HACK: Legacy system returns different date format

// ‚úÖ Configura√ß√£o espec√≠fica de neg√≥cio
// Business rule: Orders over $1000 require manager approval
if ($order->total > 1000) {
    $this->requireManagerApproval($order);
}
```

### Database Best Practices

```php
// Migrations
Schema::create('orders', function (Blueprint $table) {
    $table->id();
    $table->foreignId('user_id')->constrained()->onDelete('cascade');
    $table->decimal('total', 10, 2);
    $table->enum('status', ['pending', 'completed', 'cancelled']);
    $table->timestamps();

    $table->index(['user_id', 'status']);
});
```

## üì± Mobile e Responsividade

### Progressive Web App (PWA)

- Instal√°vel
- Funcionalidade offline
- Responsivo (320px - 1920px)
- √çcones e splash screens
- Notifica√ß√µes push

### React Native (Futuro)

- Prepara√ß√£o para app nativo
- Compartilhamento de c√≥digo
- Componentes reutiliz√°veis

## üîß Ferramentas e Utilit√°rios

### Desenvolvimento

- **IDE**: VS Code com extens√µes
- **Database**: TablePlus/Sequel Pro
- **API**: Insomnia/Postman
- **Design**: Figma integration

### Produ√ß√£o

- **Server**: Ubuntu/CentOS
- **Web Server**: Nginx
- **Database**: MySQL 8.0+
- **Cache**: Redis
- **CDN**: CloudFlare

## ‚ö†Ô∏è Avisos Importantes

### üî§ LINGUAGEM NO C√ìDIGO - REGRA ABSOLUTA
- **TODO c√≥digo deve ser escrito em ingl√™s** (classes, m√©todos, vari√°veis, constantes)
- **NUNCA usar portugu√™s em nomes de c√≥digo**
- **Coment√°rios apenas em ingl√™s e quando estritamente necess√°rios**
- **Evitar coment√°rios √≥bvios ou desnecess√°rios**

### üîí Seguran√ßa e Boas Pr√°ticas
- NUNCA commitar credenciais
- Sempre usar vari√°veis de ambiente
- Manter depend√™ncias atualizadas
- Priorizar seguran√ßa e performance
- Foco constante na experi√™ncia do usu√°rio
- C√≥digo deve ser auto-documentado
- Sempre considerar escalabilidade
- Implementar monitoring desde o in√≠cio

### üìù Exemplos de Viola√ß√µes Comuns

```php
// ‚ùå VIOLA√á√ÉO - C√≥digo em portugu√™s
class UsuarioController {
    public function criarUsuario($dados) {
        $usuario = new Usuario();
        $usuario->nome = $dados['nome'];
        $usuario->email = $dados['email'];
        $usuario->salvar();

        // Retorna o usu√°rio criado
        return $usuario;
    }
}

// ‚úÖ CORRETO - C√≥digo em ingl√™s
class UserController {
    public function createUser($data) {
        $user = new User();
        $user->name = $data['name'];
        $user->email = $data['email'];
        $user->save();

        return $user;
    }
}
```

```typescript
// ‚ùå VIOLA√á√ÉO - C√≥digo em portugu√™s
interface DadosProduto {
  nome: string;
  preco: number;
  descricao: string;
}

const ComponenteProduto = ({ produto }: { produto: DadosProduto }) => {
  const aoAdicionarAoCarrinho = () => {
    // Adiciona produto ao carrinho
    console.log('Produto adicionado');
  };

  return <div>{produto.nome}</div>;
};

// ‚úÖ CORRETO - C√≥digo em ingl√™s
interface ProductData {
  name: string;
  price: number;
  description: string;
}

const ProductComponent = ({ product }: { product: ProductData }) => {
  const handleAddToCart = () => {
    console.log('Product added');
  };

  return <div>{product.name}</div>;
};
```

## üìã Checklist para Novas Implementa√ß√µes

- [ ] Requisitos funcionais definidos
- [ ] Casos de teste criados
- [ ] Documenta√ß√£o atualizada
- [ ] Revis√£o de c√≥digo conclu√≠da
- [ ] Testes de performance realizados
- [ ] Aprova√ß√£o do Product Owner
- [ ] Seguran√ßa validada
- [ ] Logs implementados
- [ ] Monitoramento configurado
- [ ] Rollback plan definido

## üéØ Mindset de Desenvolvimento Senior

### Princ√≠pios Fundamentais

- **Clean Code First**: C√≥digo deve ser leg√≠vel e auto-explicativo
- **SOLID Principles**: Aplicar consistentemente princ√≠pios de design
- **DRY (Don't Repeat Yourself)**: Evitar duplica√ß√£o de c√≥digo
- **YAGNI (You Aren't Gonna Need It)**: N√£o implementar funcionalidades desnecess√°rias
- **KISS (Keep It Simple, Stupid)**: Simplicidade √© a sofistica√ß√£o suprema

### üî§ Padr√µes de Linguagem no C√≥digo

**IMPORTANTE: Todo o c√≥digo deve ser escrito em ingl√™s**

#### Backend (Laravel/PHP)
```php
// ‚úÖ CORRETO - Nomes em ingl√™s
class UserController extends Controller
{
    public function store(CreateUserRequest $request): JsonResponse
    {
        $user = $this->userService->create($request->validated());
        return new UserResource($user);
    }
}

class OrderService
{
    public function processPayment(Order $order): bool
    {
        // Implementation
    }
}

// ‚ùå INCORRETO - Nomes em portugu√™s
class UsuarioController extends Controller
{
    public function criar(CriarUsuarioRequest $request): JsonResponse
    {
        $usuario = $this->servicoUsuario->criar($request->validated());
        return new UsuarioResource($usuario);
    }
}
```

#### Frontend (React/TypeScript)
```typescript
// ‚úÖ CORRETO - Nomes em ingl√™s
interface ProductCardProps {
  product: Product;
  onAddToCart: (product: Product) => void;
}

const ProductCard: React.FC<ProductCardProps> = ({ product, onAddToCart }) => {
  const handleAddToCart = useCallback(() => {
    onAddToCart(product);
  }, [product, onAddToCart]);

  return (
    <Card>
      <Card.Header>{product.name}</Card.Header>
      <Card.Body>
        <Button onClick={handleAddToCart}>Add to Cart</Button>
      </Card.Body>
    </Card>
  );
};

// ‚ùå INCORRETO - Nomes em portugu√™s
interface CartaoProdutoProps {
  produto: Produto;
  aoAdicionarAoCarrinho: (produto: Produto) => void;
}
```

#### Coment√°rios e Documenta√ß√£o

**Regra Geral**: Evitar coment√°rios desnecess√°rios. C√≥digo deve ser auto-explicativo.

```php
// ‚úÖ CORRETO - Coment√°rios apenas quando necess√°rio
class OrderService
{
    /**
     * Process order payment and update inventory
     *
     * @param Order $order
     * @return bool
     * @throws PaymentFailedException
     */
    public function processPayment(Order $order): bool
    {
        // Complex business logic that needs explanation
        if ($order->total > $this->getUserCreditLimit($order->user_id)) {
            throw new PaymentFailedException('Insufficient credit limit');
        }

        // Process payment
        $paymentResult = $this->paymentGateway->charge($order->total);

        if ($paymentResult->success) {
            $this->updateInventory($order);
            return true;
        }

        return false;
    }
}

// ‚ùå INCORRETO - Coment√°rios √≥bvios
class OrderService
{
    public function processPayment(Order $order): bool
    {
        // Check if user has enough credit
        if ($order->total > $this->getUserCreditLimit($order->user_id)) {
            throw new PaymentFailedException('Insufficient credit limit');
        }

        // Process the payment
        $paymentResult = $this->paymentGateway->charge($order->total);

        // If payment is successful, update inventory
        if ($paymentResult->success) {
            $this->updateInventory($order);
            return true;
        }

        return false;
    }
}
```

#### Conven√ß√µes de Nomenclatura

**Classes e Interfaces:**
- ‚úÖ `UserController`, `OrderService`, `ProductRepository`
- ‚ùå `UsuarioController`, `ServicoPedido`, `RepositorioProduto`

**M√©todos e Fun√ß√µes:**
- ‚úÖ `createUser()`, `processOrder()`, `validateEmail()`
- ‚ùå `criarUsuario()`, `processarPedido()`, `validarEmail()`

**Vari√°veis e Propriedades:**
- ‚úÖ `$userData`, `$orderTotal`, `$productList`
- ‚ùå `$dadosUsuario`, `$totalPedido`, `$listaProdutos`

**Constantes:**
- ‚úÖ `MAX_RETRY_ATTEMPTS`, `DEFAULT_PAGE_SIZE`
- ‚ùå `MAX_TENTATIVAS_TENTATIVA`, `TAMANHO_PAGINA_PADRAO`

#### Exce√ß√µes para Coment√°rios

**Coment√°rios s√£o aceit√°veis quando:**
1. **Documenta√ß√£o de API** (OpenAPI/Swagger)
2. **Explica√ß√£o de algoritmos complexos**
3. **Workarounds tempor√°rios** (TODO, FIXME, HACK)
4. **Configura√ß√µes espec√≠ficas de neg√≥cio**
5. **Integra√ß√£o com sistemas externos**

```php
// ‚úÖ Coment√°rios √∫teis
/**
 * Calculate shipping cost based on distance and weight
 *
 * @param float $distance Distance in kilometers
 * @param float $weight Weight in kilograms
 * @return float Shipping cost
 */
public function calculateShippingCost(float $distance, float $weight): float
{
    // TODO: Implement dynamic pricing based on fuel costs
    $baseRate = 10.0;
    $distanceMultiplier = 2.5;
    $weightMultiplier = 1.5;

    return $baseRate + ($distance * $distanceMultiplier) + ($weight * $weightMultiplier);
}

// ‚úÖ Workaround tempor√°rio
public function processLegacyData(array $data): array
{
    // HACK: Legacy system uses different date format
    // Remove this when legacy system is decommissioned
    if (isset($data['created_at'])) {
        $data['created_at'] = Carbon::parse($data['created_at'])->format('Y-m-d H:i:s');
    }

    return $data;
}
```

### Metodologia de Trabalho

- **Refatora√ß√£o Cont√≠nua**: Melhorar c√≥digo existente constantemente
- **Code Review Rigoroso**: Todo c√≥digo deve ser revisado
- **Documenta√ß√£o Viva**: Documenta√ß√£o que evolui com o c√≥digo
- **Automa√ß√£o First**: Automatizar tudo que pode ser automatizado
- **Monitoramento Proativo**: Detectar problemas antes dos usu√°rios

## üöÄ Otimiza√ß√µes Espec√≠ficas

### Laravel Otimiza√ß√µes

```php
// Config Caching
php artisan config:cache
php artisan route:cache
php artisan view:cache

// Database Optimizations
// N+1 Query Prevention
$users = User::with('orders.products')->get();

// Chunk Processing
User::chunk(200, function ($users) {
    foreach ($users as $user) {
        // Process user
    }
});

// Database Indexes
Schema::table('orders', function (Blueprint $table) {
    $table->index(['created_at', 'status']);
    $table->index(['user_id', 'total']);
});
```

### React Otimiza√ß√µes

```typescript
// Bundle Splitting
const LazyComponent = lazy(() =>
  import('./HeavyComponent').then((module) => ({
    default: module.HeavyComponent,
  }))
);

// Virtual Scrolling para listas grandes
import { FixedSizeList as List } from 'react-window';

const VirtualizedList = ({ items }) => (
  <List height={600} itemCount={items.length} itemSize={35} itemData={items}>
    {Row}
  </List>
);

// Web Workers para processamento pesado
const worker = new Worker('./calculation.worker.js');
worker.postMessage({ data: heavyCalculationData });
```

## üîç Debug e Troubleshooting

### Laravel Debug

```php
// Telescope para desenvolvimento
php artisan telescope:install

// Debug SQL Queries
DB::listen(function ($query) {
    Log::info($query->sql, $query->bindings);
});

// Custom Debugbar
if (app()->environment('local')) {
    app('debugbar')->info('Debug info here');
}
```

### React Debug

```typescript
// React Developer Tools
// Chrome Extension: React Developer Tools

// Performance Profiling
import { Profiler } from 'react';

const onRenderCallback = (id, phase, actualDuration) => {
  console.log('Component:', id, 'Phase:', phase, 'Duration:', actualDuration);
};

<Profiler id='App' onRender={onRenderCallback}>
  <App />
</Profiler>;

// Error Boundaries
class ErrorBoundary extends Component {
  componentDidCatch(error, errorInfo) {
    console.error('Error caught:', error, errorInfo);
    // Send to error reporting service
  }
}
```

## üìö Documenta√ß√£o Avan√ßada

### API Documentation

```php
/**
 * @OA\Post(
 *     path="/api/orders",
 *     summary="Create new order",
 *     @OA\RequestBody(
 *         required=true,
 *         @OA\JsonContent(
 *             required={"product_id", "quantity"},
 *             @OA\Property(property="product_id", type="integer"),
 *             @OA\Property(property="quantity", type="integer")
 *         )
 *     ),
 *     @OA\Response(response=201, description="Order created successfully")
 * )
 */
```

### Component Documentation

```typescript
/**
 * ProductCard component for displaying product information
 *
 * @param product - Product object containing id, name, price
 * @param onAddToCart - Callback function when add to cart is clicked
 * @param loading - Optional loading state
 *
 * @example
 * <ProductCard
 *   product={{ id: 1, name: "Product", price: 100 }}
 *   onAddToCart={(product) => console.log(product)}
 * />
 */
interface ProductCardProps {
  product: Product;
  onAddToCart: (product: Product) => void;
  loading?: boolean;
}
```

## üèÜ Code Quality

### ESLint Rules Customizadas

```json
{
  "rules": {
    "@typescript-eslint/explicit-function-return-type": "error",
    "prefer-const": "error",
    "no-console": "warn",
    "max-len": ["error", { "code": 100 }],
    "complexity": ["error", 10]
  }
}
```

### PHPStan Configuration

```neon
# phpstan.neon
parameters:
    level: 8
    paths:
        - app
    excludes_analyse:
        - app/Console/Kernel.php
    checkMissingIterableValueType: false
```

## üé® UI/UX Guidelines

### TailAdmin React - Template de Dashboard

**Vers√£o Atual**: 2.1.0

**Caracter√≠sticas Principais:**
- Template baseado em Tailwind CSS + React
- Componentes pr√©-constru√≠dos e responsivos
- Layouts otimizados para dashboards administrativos
- Suporte a modo escuro/claro
- Componentes acess√≠veis e customiz√°veis

**Estrutura de Arquivos:**
```
src/
‚îú‚îÄ‚îÄ components/          # Componentes reutiliz√°veis
‚îÇ   ‚îú‚îÄ‚îÄ ui/             # Componentes base (Button, Input, etc.)
‚îÇ   ‚îú‚îÄ‚îÄ layout/         # Layouts (Sidebar, Header, etc.)
‚îÇ   ‚îî‚îÄ‚îÄ charts/         # Componentes de gr√°ficos
‚îú‚îÄ‚îÄ pages/              # P√°ginas da aplica√ß√£o
‚îú‚îÄ‚îÄ hooks/              # Custom hooks
‚îú‚îÄ‚îÄ utils/              # Utilit√°rios e helpers
‚îî‚îÄ‚îÄ styles/             # Estilos globais e Tailwind
```

**Componentes Principais:**
- **Layout Components**: Sidebar, Header, Footer, Breadcrumb
- **UI Components**: Buttons, Forms, Tables, Cards, Modals
- **Data Components**: Charts, DataTables, Filters
- **Navigation**: Menu, Tabs, Pagination

**Customiza√ß√£o:**
```typescript
// Configura√ß√£o de tema
const theme = {
  colors: {
    primary: '#3B82F6',
    secondary: '#64748B',
    success: '#10B981',
    warning: '#F59E0B',
    danger: '#EF4444'
  },
  spacing: {
    xs: '0.25rem',
    sm: '0.5rem',
    md: '1rem',
    lg: '1.5rem',
    xl: '2rem'
  }
};

// Uso de componentes
import { Button, Card, DataTable } from '@/components/ui';

const DashboardCard = () => (
  <Card className="p-6">
    <h3 className="text-lg font-semibold mb-4">Estat√≠sticas</h3>
    <DataTable data={data} columns={columns} />
    <Button variant="primary" className="mt-4">
      Ver Detalhes
    </Button>
  </Card>
);
```

**Responsividade:**
- Mobile-first approach
- Breakpoints: sm (640px), md (768px), lg (1024px), xl (1280px)
- Componentes adapt√°veis automaticamente

**Acessibilidade:**
- Suporte a ARIA labels
- Navega√ß√£o por teclado
- Contraste adequado
- Screen reader friendly

### Design System

- **Cores**: Palette definida e consistente
- **Tipografia**: Hierarquia clara e leg√≠vel
- **Espa√ßamento**: Sistema de grid de 8px
- **Componentes**: Reutiliz√°veis e documentados
- **Acessibilidade**: WCAG 2.1 AA compliance

### Responsive Design

```css
/* Mobile First Approach */
.container {
  padding: 1rem;
}

@media (min-width: 768px) {
  .container {
    padding: 2rem;
  }
}

@media (min-width: 1024px) {
  .container {
    padding: 3rem;
  }
}
```

## üîê Seguran√ßa Adicional

### Laravel Security Headers

```php
// Middleware SecurityHeaders
public function handle($request, Closure $next)
{
    $response = $next($request);

    $response->headers->set('X-Frame-Options', 'SAMEORIGIN');
    $response->headers->set('X-Content-Type-Options', 'nosniff');
    $response->headers->set('X-XSS-Protection', '1; mode=block');
    $response->headers->set('Strict-Transport-Security', 'max-age=31536000');

    return $response;
}
```

### Content Security Policy

```php
// CSP Header
$response->headers->set('Content-Security-Policy',
    "default-src 'self'; " .
    "script-src 'self' 'unsafe-inline'; " .
    "style-src 'self' 'unsafe-inline'; " .
    "img-src 'self' data: https:;"
);
```

## ü§ñ Automa√ß√£o e Scripts

### Deployment Scripts

```bash
#!/bin/bash
# deploy.sh

echo "Starting deployment..."

# Laravel Commands
php artisan down
composer install --no-dev --optimize-autoloader
php artisan config:cache
php artisan route:cache
php artisan view:cache
php artisan migrate --force
php artisan up

# Frontend Build
npm ci
npm run build

echo "Deployment completed!"
```

### Development Scripts

```json
{
  "scripts": {
    "dev": "concurrently \"php artisan serve\" \"npm run dev\"",
    "test": "concurrently \"php artisan test\" \"npm test\"",
    "lint": "concurrently \"./vendor/bin/phpstan analyse\" \"npm run lint\"",
    "fix": "concurrently \"./vendor/bin/php-cs-fixer fix\" \"npm run lint:fix\""
  }
}
```

## üéØ Metas de Performance

### M√©tricas Objetivo

- **First Contentful Paint**: < 1.5s
- **Largest Contentful Paint**: < 2.5s
- **Cumulative Layout Shift**: < 0.1
- **First Input Delay**: < 100ms
- **Time to Interactive**: < 3s

### Database Performance

- **Query Response Time**: < 100ms (90th percentile)
- **Database Connections**: Max 20 concurrent
- **Cache Hit Rate**: > 90%
- **Index Usage**: > 95% queries usando indexes

## üìà Escalabilidade

### Horizontal Scaling

- **Load Balancer**: Nginx/HAProxy
- **Auto-scaling**: AWS ECS/Kubernetes
- **Database Sharding**: Prepara√ß√£o para m√∫ltiplas DBs
- **CDN**: CloudFlare/AWS CloudFront
- **Cache Distribu√≠do**: Redis Cluster

### Vertical Scaling

- **Resource Monitoring**: CPU, Memory, Diskusage
- **Query Optimization**: EXPLAIN para todas queries
- **Connection Pooling**: PgBouncer/ProxySQL
- **Memory Management**: PHP-FPM tuning

## üîÑ Backup e Disaster Recovery

### Backup Strategy

```bash
#!/bin/bash
# backup.sh

# Database Backup
mysqldump -u $DB_USER -p$DB_PASS $DB_NAME > backup_$(date +%Y%m%d_%H%M%S).sql

# Files Backup
tar -czf files_backup_$(date +%Y%m%d_%H%M%S).tar.gz storage/

# Upload to S3
aws s3 cp backup_*.sql s3://backups/database/
aws s3 cp files_backup_*.tar.gz s3://backups/files/
```

## üöÄ DevOps Avan√ßado

### Infraestrutura como C√≥digo (IaC)

#### Terraform Configuration

```hcl
# main.tf
provider "aws" {
  region = var.aws_region
}

# VPC Configuration
resource "aws_vpc" "rei_do_oleo_vpc" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Name        = "rei-do-oleo-vpc"
    Environment = var.environment
  }
}

# RDS Instance
resource "aws_db_instance" "main_database" {
  identifier           = "rei-do-oleo-db"
  engine               = "mysql"
  engine_version       = "8.0"
  instance_class       = "db.t3.micro"
  allocated_storage    = 20
  storage_encrypted    = true

  db_name  = var.database_name
  username = var.database_username
  password = var.database_password

  backup_retention_period = 7
  backup_window          = "03:00-04:00"
  maintenance_window     = "sun:04:00-sun:05:00"

  tags = {
    Name        = "rei-do-oleo-database"
    Environment = var.environment
  }
}

# ElastiCache Redis
resource "aws_elasticache_cluster" "redis" {
  cluster_id           = "rei-do-oleo-cache"
  engine               = "redis"
  node_type            = "cache.t3.micro"
  num_cache_nodes      = 1
  parameter_group_name = "default.redis7"
  port                 = 6379

  tags = {
    Name        = "rei-do-oleo-cache"
    Environment = var.environment
  }
}
```

#### Docker Containerization

```dockerfile
# Dockerfile.backend
FROM php:8.2-fpm-alpine

# Install system dependencies
RUN apk add --no-cache \
    git \
    curl \
    libpng-dev \
    libxml2-dev \
    zip \
    unzip \
    mysql-client \
    nginx \
    supervisor

# Install PHP extensions
RUN docker-php-ext-install pdo pdo_mysql bcmath gd xml

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /var/www

# Copy application files
COPY . .

# Install PHP dependencies
RUN composer install --no-dev --optimize-autoloader --no-interaction

# Set permissions
RUN chown -R www-data:www-data /var/www \
    && chmod -R 755 /var/www/storage

# Copy supervisor configuration
COPY docker/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

EXPOSE 9000

CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
```

```dockerfile
# Dockerfile.frontend
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies
RUN npm ci --only=production

# Copy source code
COPY . .

# Build application
RUN npm run build

# Production stage
FROM nginx:alpine

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY docker/nginx.conf /etc/nginx/nginx.conf

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]
```

### Orquestra√ß√£o com Kubernetes

#### Deployment Configuration

```yaml
# k8s/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rei-do-oleo-backend
  labels:
    app: rei-do-oleo-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: rei-do-oleo-backend
  template:
    metadata:
      labels:
        app: rei-do-oleo-backend
    spec:
      containers:
        - name: backend
          image: rei-do-oleo/backend:latest
          ports:
            - containerPort: 9000
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: host
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: database-credentials
                  key: password
          resources:
            requests:
              memory: '256Mi'
              cpu: '250m'
            limits:
              memory: '512Mi'
              cpu: '500m'
          livenessProbe:
            httpGet:
              path: /health
              port: 9000
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: 9000
            initialDelaySeconds: 5
            periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: rei-do-oleo-backend-service
spec:
  selector:
    app: rei-do-oleo-backend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 9000
  type: ClusterIP
```

#### Horizontal Pod Autoscaler

```yaml
# k8s/hpa.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rei-do-oleo-backend-hpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rei-do-oleo-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 70
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
```

### CI/CD Pipeline Avan√ßado

#### GitHub Actions Workflow

```yaml
# .github/workflows/ci-cd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json
          coverage: xdebug

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install PHP dependencies
        run: composer install --prefer-dist --no-progress --no-interaction

      - name: Install Node dependencies
        run: npm ci

      - name: Copy environment file
        run: cp .env.example .env

      - name: Generate application key
        run: php artisan key:generate

      - name: Run PHP tests
        run: |
          php artisan test --coverage-clover coverage.xml
          ./vendor/bin/phpstan analyse

      - name: Run JavaScript tests
        run: npm test -- --coverage

      - name: Build frontend
        run: npm run build

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml,./coverage/lcov.info

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  build-and-push:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-backend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-frontend
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Deploy to Kubernetes
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            k8s/deployment.yaml
            k8s/service.yaml
            k8s/ingress.yaml
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-backend
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}-frontend
          kubectl-version: 'latest'
```

### Monitoramento e Observabilidade

#### Prometheus Configuration

```yaml
# monitoring/prometheus.yml
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  - 'alert_rules.yml'

scrape_configs:
  - job_name: 'rei-do-oleo-backend'
    static_configs:
      - targets: ['backend:9000']
    metrics_path: '/metrics'
    scrape_interval: 10s

  - job_name: 'rei-do-oleo-frontend'
    static_configs:
      - targets: ['frontend:80']
    metrics_path: '/metrics'
    scrape_interval: 30s

  - job_name: 'mysql'
    static_configs:
      - targets: ['mysql-exporter:9104']

  - job_name: 'redis'
    static_configs:
      - targets: ['redis-exporter:9121']

alerting:
  alertmanagers:
    - static_configs:
        - targets:
            - alertmanager:9093
```

#### Grafana Dashboard

```json
{
  "dashboard": {
    "title": "Rei do √ìleo - System Overview",
    "panels": [
      {
        "title": "Request Rate",
        "type": "graph",
        "targets": [
          {
            "expr": "rate(http_requests_total[5m])",
            "legendFormat": "{{method}} {{status}}"
          }
        ]
      },
      {
        "title": "Response Time",
        "type": "graph",
        "targets": [
          {
            "expr": "histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m]))",
            "legendFormat": "95th percentile"
          }
        ]
      },
      {
        "title": "Database Connections",
        "type": "singlestat",
        "targets": [
          {
            "expr": "mysql_global_status_threads_connected",
            "legendFormat": "Active Connections"
          }
        ]
      }
    ]
  }
}
```

### Logging Centralizado

#### ELK Stack Configuration

```yaml
# docker-compose.logging.yml
version: '3.8'

services:
  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - 'ES_JAVA_OPTS=-Xms512m -Xmx512m'
      - xpack.security.enabled=false
    ports:
      - '9200:9200'
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  logstash:
    image: logstash:8.11.0
    ports:
      - '5044:5044'
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:8.11.0
    ports:
      - '5601:5601'
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch

volumes:
  elasticsearch_data:
```

#### Logstash Configuration

```ruby
# logging/logstash.conf
input {
  beats {
    port => 5044
  }
}

filter {
  if [fields][service] == "rei-do-oleo-backend" {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
    }

    date {
      match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
    }

    mutate {
      convert => { "response" => "integer" }
      convert => { "bytes" => "integer" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "rei-do-oleo-logs-%{+YYYY.MM.dd}"
  }
}
```

### Seguran√ßa DevOps

#### Network Policies

```yaml
# k8s/network-policy.yaml
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rei-do-oleo-network-policy
spec:
  podSelector:
    matchLabels:
      app: rei-do-oleo-backend
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: rei-do-oleo-frontend
      ports:
        - protocol: TCP
          port: 9000
  egress:
    - to:
        - podSelector:
            matchLabels:
              app: mysql
      ports:
        - protocol: TCP
          port: 3306
    - to:
        - podSelector:
            matchLabels:
              app: redis
      ports:
        - protocol: TCP
          port: 6379
```

#### Secret Management

```yaml
# k8s/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: database-credentials
type: Opaque
data:
  host: <base64-encoded-host>
  username: <base64-encoded-username>
  password: <base64-encoded-password>
---
apiVersion: v1
kind: Secret
metadata:
  name: api-keys
type: Opaque
data:
  jwt-secret: <base64-encoded-jwt-secret>
  encryption-key: <base64-encoded-encryption-key>
```

### Automa√ß√£o e Scripts DevOps

#### Health Check Script

```bash
#!/bin/bash
# scripts/health-check.sh

set -e

SERVICE_URL=${1:-"http://localhost:8000"}
MAX_ATTEMPTS=${2:-30}
SLEEP_INTERVAL=${3:-2}

echo "Checking health of service at $SERVICE_URL"

for i in $(seq 1 $MAX_ATTEMPTS); do
    if curl -f -s "$SERVICE_URL/health" > /dev/null; then
        echo "Service is healthy!"
        exit 0
    fi

    echo "Attempt $i/$MAX_ATTEMPTS failed. Retrying in ${SLEEP_INTERVAL}s..."
    sleep $SLEEP_INTERVAL
done

echo "Service failed health check after $MAX_ATTEMPTS attempts"
exit 1
```

#### Database Migration Script

```bash
#!/bin/bash
# scripts/migrate-database.sh

set -e

DB_HOST=${DB_HOST:-localhost}
DB_PORT=${DB_PORT:-3306}
DB_NAME=${DB_NAME:-rei_do_oleo}
DB_USER=${DB_USER:-root}

echo "Waiting for database connection..."
while ! mysqladmin ping -h"$DB_HOST" -P"$DB_PORT" -u"$DB_USER" -p"$DB_PASSWORD" --silent; do
    sleep 1
done

echo "Database is ready. Running migrations..."
php artisan migrate --force

echo "Migrations completed successfully!"
```

### Disaster Recovery

#### Backup Automation

```bash
#!/bin/bash
# scripts/automated-backup.sh

set -e

TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/backups"
RETENTION_DAYS=30

# Create backup directory
mkdir -p $BACKUP_DIR

# Database backup
echo "Creating database backup..."
kubectl exec deployment/mysql -- mysqldump -u$DB_USER -p$DB_PASSWORD $DB_NAME > $BACKUP_DIR/db_backup_$TIMESTAMP.sql

# Application files backup
echo "Creating application files backup..."
kubectl exec deployment/rei-do-oleo-backend -- tar -czf - /var/www/storage > $BACKUP_DIR/files_backup_$TIMESTAMP.tar.gz

# Upload to S3
echo "Uploading backups to S3..."
aws s3 cp $BACKUP_DIR/db_backup_$TIMESTAMP.sql s3://rei-do-oleo-backups/database/
aws s3 cp $BACKUP_DIR/files_backup_$TIMESTAMP.tar.gz s3://rei-do-oleo-backups/files/

# Cleanup old backups
echo "Cleaning up old backups..."
find $BACKUP_DIR -name "*.sql" -mtime +$RETENTION_DAYS -delete
find $BACKUP_DIR -name "*.tar.gz" -mtime +$RETENTION_DAYS -delete

echo "Backup completed successfully!"
```

### Performance Testing

#### Load Testing with K6

```javascript
// tests/load-test.js
import http from 'k6/http';
import { check, sleep } from 'k6';

export let options = {
  stages: [
    { duration: '2m', target: 100 }, // Ramp up
    { duration: '5m', target: 100 }, // Stay at 100 users
    { duration: '2m', target: 200 }, // Ramp up to 200 users
    { duration: '5m', target: 200 }, // Stay at 200 users
    { duration: '2m', target: 0 }, // Ramp down
  ],
  thresholds: {
    http_req_duration: ['p(95)<500'], // 95% of requests under 500ms
    http_req_failed: ['rate<0.1'], // Error rate under 10%
  },
};

export default function () {
  let response = http.get('https://api.reidooleo.com/health');

  check(response, {
    'status is 200': (r) => r.status === 200,
    'response time < 500ms': (r) => r.timings.duration < 500,
  });

  sleep(1);
}
```
