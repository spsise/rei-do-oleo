#!/bin/bash

# üß™ Setup Database de Teste - Sistema Rei do √ìleo
# Script para configurar automaticamente o banco de dados de teste

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√µes de logging
log() { echo -e "${GREEN}[TEST-DB]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${PURPLE}[SUCCESS]${NC} $1"; }
step() { echo -e "${CYAN}[STEP]${NC} $1"; }

# Fun√ß√£o para executar comandos no backend
backend_exec() {
    (cd /workspace/backend && "$@")
}

# Banner
echo -e "${BLUE}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                üß™ TEST DATABASE SETUP                     ‚ïë
‚ïë           Configura√ß√£o do Banco de Teste                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

cd /workspace

# 1. Verificar se o MySQL est√° dispon√≠vel
step "üîç Verificando disponibilidade do MySQL..."
if ! mysqladmin ping -h mysql -u root -proot123 --silent 2>/dev/null; then
    error "‚ùå MySQL n√£o est√° dispon√≠vel. Aguardando..."

    # Aguardar MySQL estar pronto
    for i in {1..30}; do
        if mysqladmin ping -h mysql -u root -proot123 --silent 2>/dev/null; then
            success "‚úÖ MySQL est√° dispon√≠vel!"
            break
        fi
        if [ $i -eq 30 ]; then
            error "‚ùå Timeout aguardando MySQL"
            exit 1
        fi
        echo -n "."
        sleep 2
    done
    echo
else
    success "‚úÖ MySQL est√° dispon√≠vel!"
fi

# 2. Criar banco de dados de teste se n√£o existir
step "üóÑÔ∏è Criando banco de dados de teste..."
if ! mysql -h mysql -u root -proot123 -e "USE rei_do_oleo_test;" 2>/dev/null; then
    log "Criando banco de dados rei_do_oleo_test..."
    mysql -h mysql -u root -proot123 -e "CREATE DATABASE IF NOT EXISTS rei_do_oleo_test CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
    success "‚úÖ Banco de dados de teste criado"
else
    info "‚ÑπÔ∏è Banco de dados de teste j√° existe"
fi

# 3. Criar usu√°rio de teste se n√£o existir
step "üë§ Configurando usu√°rio de teste..."
if ! mysql -h mysql -u root -proot123 -e "SELECT User FROM mysql.user WHERE User='rei_do_oleo';" 2>/dev/null | grep -q "rei_do_oleo"; then
    log "Criando usu√°rio rei_do_oleo..."
    mysql -h mysql -u root -proot123 -e "CREATE USER IF NOT EXISTS 'rei_do_oleo'@'%' IDENTIFIED BY 'secret123';"
    mysql -h mysql -u root -proot123 -e "GRANT ALL PRIVILEGES ON rei_do_oleo_test.* TO 'rei_do_oleo'@'%';"
    mysql -h mysql -u root -proot123 -e "FLUSH PRIVILEGES;"
    success "‚úÖ Usu√°rio de teste criado e configurado"
else
    info "‚ÑπÔ∏è Usu√°rio de teste j√° existe"
fi

# 4. Verificar se o arquivo .env.testing existe
step "üìÑ Configurando arquivo .env.testing..."
if [ ! -f "backend/.env.testing" ]; then
    log "Criando arquivo .env.testing..."
    cp backend/.env backend/.env.testing

    # Configurar vari√°veis espec√≠ficas para teste
    sed -i 's/APP_ENV=local/APP_ENV=testing/' backend/.env.testing
    sed -i 's/DB_DATABASE=rei_do_oleo_dev/DB_DATABASE=rei_do_oleo_test/' backend/.env.testing
    sed -i 's/DB_USERNAME=rei_do_oleo_user/DB_USERNAME=rei_do_oleo/' backend/.env.testing
    sed -i 's/DB_PASSWORD=secret123rei_do_oleo_password/DB_PASSWORD=secret123/' backend/.env.testing
    sed -i 's/SESSION_DRIVER=redis/SESSION_DRIVER=array/' backend/.env.testing
    sed -i 's/QUEUE_CONNECTION=redis/QUEUE_CONNECTION=sync/' backend/.env.testing
    sed -i 's/MAIL_MAILER=log/MAIL_MAILER=array/' backend/.env.testing
    sed -i 's/CACHE_STORE=redis/CACHE_STORE=array/' backend/.env.testing

    # Adicionar configura√ß√µes espec√≠ficas de teste
    echo "" >> backend/.env.testing
    echo "# Test Configuration" >> backend/.env.testing
    echo "PULSE_ENABLED=false" >> backend/.env.testing
    echo "TELESCOPE_ENABLED=false" >> backend/.env.testing
    echo "LOG_CHANNEL=single" >> backend/.env.testing
    echo "BCRYPT_ROUNDS=4" >> backend/.env.testing

    success "‚úÖ Arquivo .env.testing criado e configurado"
else
    info "‚ÑπÔ∏è Arquivo .env.testing j√° existe"
fi

# 5. Executar migra√ß√µes no banco de teste
step "üîÑ Executando migra√ß√µes no banco de teste..."
if backend_exec php artisan migrate --env=testing --force; then
    success "‚úÖ Migra√ß√µes executadas no banco de teste"
else
    warn "‚ö†Ô∏è Erro ao executar migra√ß√µes no banco de teste"
    # Tentar novamente com mais detalhes
    backend_exec php artisan migrate --env=testing --force --verbose
fi

# 6. Verificar se as tabelas foram criadas
step "üîç Verificando tabelas no banco de teste..."
TABLE_COUNT=$(mysql -h mysql -u rei_do_oleo -psecret123 rei_do_oleo_test -e "SHOW TABLES;" 2>/dev/null | wc -l)
if [ "$TABLE_COUNT" -gt 1 ]; then
    success "‚úÖ Banco de teste configurado com $((TABLE_COUNT - 1)) tabelas"
else
    warn "‚ö†Ô∏è Poucas tabelas encontradas no banco de teste"
fi

# 7. Limpar caches do Laravel
step "üßπ Limpando caches..."
backend_exec php artisan config:clear --env=testing
backend_exec php artisan cache:clear --env=testing
backend_exec php artisan route:clear --env=testing
backend_exec php artisan view:clear --env=testing
success "‚úÖ Caches limpos"

# 8. Testar conex√£o com o banco de teste
step "üß™ Testando conex√£o com banco de teste..."
if backend_exec php artisan tinker --env=testing --execute="echo 'Conex√£o com banco de teste OK'; exit;" 2>/dev/null; then
    success "‚úÖ Conex√£o com banco de teste funcionando"
else
    warn "‚ö†Ô∏è Problema na conex√£o com banco de teste"
fi

# 9. Verificar configura√ß√£o do PHPUnit
step "üìã Verificando configura√ß√£o do PHPUnit..."
if [ -f "backend/phpunit.xml" ]; then
    # Verificar se as configura√ß√µes de banco est√£o corretas
    if grep -q "rei_do_oleo_test" backend/phpunit.xml; then
        success "‚úÖ PHPUnit configurado para usar banco de teste"
    else
        warn "‚ö†Ô∏è PHPUnit pode n√£o estar configurado corretamente"
    fi
else
    warn "‚ö†Ô∏è Arquivo phpunit.xml n√£o encontrado"
fi

# 10. Finaliza√ß√£o
success "üéâ Configura√ß√£o do banco de teste conclu√≠da!"
echo -e "${GREEN}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üß™ TEST DB READY!                      ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üóÑÔ∏è Database: rei_do_oleo_test                          ‚ïë
‚ïë  üë§ User: rei_do_oleo                                    ‚ïë
‚ïë  üîë Password: secret123                                  ‚ïë
‚ïë  üìÑ Config: backend/.env.testing                         ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üß™ Para executar testes:                                ‚ïë
‚ïë  cd backend && php artisan test                          ‚ïë
‚ïë                                                          ‚ïë
‚ïë  üîç Para verificar status:                               ‚ïë
‚ïë  cd backend && php artisan migrate:status --env=testing  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

info "üöÄ Banco de dados de teste configurado e pronto para uso!"
