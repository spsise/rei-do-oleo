#!/bin/bash

# üöÄ Setup Completo - Sistema Rei do √ìleo MVP
# Script executado automaticamente na cria√ß√£o do Dev Container

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√µes de logging
log() { echo -e "${GREEN}[SETUP]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${PURPLE}[SUCCESS]${NC} $1"; }
step() { echo -e "${CYAN}[STEP]${NC} $1"; }

# Fun√ß√£o para verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fun√ß√£o para executar comandos no backend
backend_exec() {
    (cd /workspace/backend && "$@")
}

# Fun√ß√£o para executar comandos no frontend
frontend_exec() {
    (cd /workspace/frontend && "$@")
}

# Banner de in√≠cio
echo -e "${BLUE}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                üõ†Ô∏è  REI DO √ìLEO - DEV SETUP                ‚ïë
‚ïë           Configura√ß√£o Completa do Ambiente               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

cd /workspace

# 1. Aguardar servi√ßos estarem prontos
step "üîÑ Aguardando servi√ßos estarem prontos..."
SERVICES_READY=false
for i in {1..60}; do
    if mysqladmin ping -h mysql -u root -proot123 --silent 2>/dev/null && \
       redis-cli -h redis ping >/dev/null 2>&1; then
        SERVICES_READY=true
        success "‚úÖ Servi√ßos MySQL e Redis prontos!"
        break
    fi
    if [ $i -eq 60 ]; then
        warn "‚ö†Ô∏è Timeout aguardando servi√ßos. Continuando..."
        break
    fi
    echo -n "."
    sleep 1
done
echo

# 1.5. Corrigir permiss√µes ANTES de qualquer instala√ß√£o
step "üîê Corrigindo permiss√µes dos diret√≥rios..."
log "Corrigindo permiss√µes do diret√≥rio frontend..."
chown -R vscode:vscode /workspace/frontend 2>/dev/null || true
chmod -R u+rw /workspace/frontend 2>/dev/null || true
# For√ßar permiss√µes em node_modules se existir
if [ -d "/workspace/frontend/node_modules" ]; then
    find /workspace/frontend/node_modules -type f -exec chmod 644 {} \; 2>/dev/null || true
    find /workspace/frontend/node_modules -type d -exec chmod 755 {} \; 2>/dev/null || true
fi

# Corrigir permiss√µes do cache do npm
log "Corrigindo permiss√µes do cache do npm..."
if [ -d "/home/vscode/.cache/npm" ]; then
    chown -R vscode:vscode /home/vscode/.cache/npm 2>/dev/null || true
    chmod -R u+rw /home/vscode/.cache/npm 2>/dev/null || true
fi

# Corrigir permiss√µes do diret√≥rio .npm global
if [ -d "/home/vscode/.npm" ]; then
    chown -R vscode:vscode /home/vscode/.npm 2>/dev/null || true
    chmod -R u+rw /home/vscode/.npm 2>/dev/null || true
fi

log "Corrigindo permiss√µes do diret√≥rio backend..."
chown -R vscode:vscode /workspace/backend 2>/dev/null || true
chmod -R u+rw /workspace/backend 2>/dev/null || true

log "Corrigindo permiss√µes do diret√≥rio scripts..."
chown -R vscode:vscode /workspace/scripts 2>/dev/null || true
chmod -R u+rw /workspace/scripts 2>/dev/null || true

log "Corrigindo permiss√µes do diret√≥rio docs..."
chown -R vscode:vscode /workspace/docs 2>/dev/null || true
chmod -R u+rw /workspace/docs 2>/dev/null || true

log "Corrigindo permiss√µes do diret√≥rio .devcontainer..."
chown -R vscode:vscode /workspace/.devcontainer 2>/dev/null || true
chmod -R u+rw /workspace/.devcontainer 2>/dev/null || true

log "Corrigindo permiss√µes do diret√≥rio .github..."
chown -R vscode:vscode /workspace/.github 2>/dev/null || true
chmod -R u+rw /workspace/.github 2>/dev/null || true

log "Corrigindo permiss√µes do diret√≥rio docker..."
chown -R vscode:vscode /workspace/docker 2>/dev/null || true
chmod -R u+rw /workspace/docker 2>/dev/null || true

log "Corrigindo permiss√µes do diret√≥rio .husky..."
chown -R vscode:vscode /workspace/.husky 2>/dev/null || true
chmod -R u+rw /workspace/.husky 2>/dev/null || true

log "Corrigindo permiss√µes do diret√≥rio .vscode..."
chown -R vscode:vscode /workspace/.vscode 2>/dev/null || true
chmod -R u+rw /workspace/.vscode 2>/dev/null || true

# Corrigir permiss√µes de arquivos importantes na raiz
log "Corrigindo permiss√µes de arquivos na raiz..."
chown vscode:vscode /workspace/package.json /workspace/package-lock.json 2>/dev/null || true
chown vscode:vscode /workspace/docker-compose.yml /workspace/docker-compose.prod.yml 2>/dev/null || true
chown vscode:vscode /workspace/.prettierrc /workspace/.editorconfig 2>/dev/null || true
chown vscode:vscode /workspace/.php-cs-fixer.php /workspace/phpstan.neon 2>/dev/null || true
chmod u+rw /workspace/package.json /workspace/package-lock.json 2>/dev/null || true
chmod u+rw /workspace/docker-compose.yml /workspace/docker-compose.prod.yml 2>/dev/null || true
chmod u+rw /workspace/.prettierrc /workspace/.editorconfig 2>/dev/null || true
chmod u+rw /workspace/.php-cs-fixer.php /workspace/phpstan.neon 2>/dev/null || true

success "‚úÖ Permiss√µes corrigidas para todos os diret√≥rios e arquivos importantes"

# 2. Configurar Backend Laravel
step "üì¶ Configurando Backend Laravel..."
if [ ! -d "backend" ]; then
    log "Criando novo projeto Laravel..."
    composer create-project laravel/laravel:^11.0 backend --prefer-dist --no-interaction

    # Instalar depend√™ncias espec√≠ficas
    log "üìö Instalando depend√™ncias Laravel..."
    backend_exec composer require laravel/sanctum laravel/horizon spatie/laravel-permission
    backend_exec composer require spatie/laravel-query-builder spatie/laravel-backup
    backend_exec composer require barryvdh/laravel-cors league/flysystem-aws-s3-v3

    # Depend√™ncias de desenvolvimento
    backend_exec composer require --dev laravel/telescope barryvdh/laravel-debugbar
    backend_exec composer require --dev phpunit/phpunit mockery/mockery fakerphp/faker
    backend_exec composer require --dev friendsofphp/php-cs-fixer phpstan/phpstan
    backend_exec composer require --dev laravel/sail pestphp/pest

    success "‚úÖ Projeto Laravel criado com sucesso"
else
    log "Backend Laravel existente encontrado"
    backend_exec composer install --no-interaction
    success "‚úÖ Depend√™ncias do backend atualizadas"
fi

# 3. Configurar Frontend React
step "‚öõÔ∏è Configurando Frontend React..."
if [ ! -d "frontend" ]; then
    log "Criando projeto React com Vite..."
    npm create vite@latest frontend -- --template react-ts

    # Instalar depend√™ncias b√°sicas
    log "üìö Instalando depend√™ncias React..."
    frontend_exec npm install

    # Instalar depend√™ncias do projeto
    frontend_exec npm install @tanstack/react-query react-router-dom axios
    frontend_exec npm install @headlessui/react @heroicons/react
    frontend_exec npm install tailwindcss @tailwindcss/forms @tailwindcss/typography
    frontend_exec npm install react-hook-form @hookform/resolvers yup
    frontend_exec npm install date-fns react-hot-toast @vite-pwa/vite-plugin
    frontend_exec npm install workbox-precaching workbox-routing workbox-strategies

    # Depend√™ncias de desenvolvimento
    frontend_exec npm install --dev @vitejs/plugin-react-swc
    frontend_exec npm install --dev @types/react @types/react-dom @types/node
    frontend_exec npm install --dev @typescript-eslint/eslint-plugin @typescript-eslint/parser
    frontend_exec npm install --dev eslint eslint-plugin-react-hooks eslint-plugin-react-refresh
    frontend_exec npm install --dev prettier @testing-library/react @testing-library/jest-dom
    frontend_exec npm install --dev @testing-library/user-event vitest jsdom autoprefixer postcss
    frontend_exec npm install --dev typescript typescript-eslint globals

    success "‚úÖ Projeto React criado com sucesso"
else
    log "Frontend React existente encontrado - verificando depend√™ncias..."

    # Verificar se package.json existe e tem depend√™ncias
    if [ -f "frontend/package.json" ]; then
        log "üì¶ Instalando depend√™ncias existentes do package.json..."
        
        # Limpar node_modules se houver problemas de permiss√£o
        if [ -d "frontend/node_modules" ]; then
            log "üßπ Limpando node_modules existente..."
            # Tentar remover normalmente primeiro
            if ! rm -rf frontend/node_modules 2>/dev/null; then
                log "üîê Tentando remover com sudo..."
                # Se falhar, tentar com sudo
                if command -v sudo >/dev/null 2>&1; then
                    sudo rm -rf frontend/node_modules 2>/dev/null || true
                else
                    # Se n√£o tiver sudo, tentar for√ßar a remo√ß√£o
                    find frontend/node_modules -type f -exec chmod 644 {} \; 2>/dev/null || true
                    find frontend/node_modules -type d -exec chmod 755 {} \; 2>/dev/null || true
                    rm -rf frontend/node_modules 2>/dev/null || true
                fi
            fi
        fi
        
        # Limpar cache do npm
        log "üßπ Limpando cache do npm..."
        # Corrigir permiss√µes do cache antes de limpar
        if [ -d "/home/vscode/.cache/npm" ]; then
            chown -R vscode:vscode /home/vscode/.cache/npm 2>/dev/null || true
            chmod -R u+rw /home/vscode/.cache/npm 2>/dev/null || true
        fi
        if [ -d "/home/vscode/.npm" ]; then
            chown -R vscode:vscode /home/vscode/.npm 2>/dev/null || true
            chmod -R u+rw /home/vscode/.npm 2>/dev/null || true
        fi
        
        # Tentar limpar cache com diferentes estrat√©gias
        if ! frontend_exec npm cache clean --force 2>/dev/null; then
            log "üîê Tentando limpar cache com sudo..."
            if command -v sudo >/dev/null 2>&1; then
                sudo rm -rf /home/vscode/.cache/npm 2>/dev/null || true
                sudo rm -rf /home/vscode/.npm 2>/dev/null || true
            else
                # Se n√£o tiver sudo, tentar for√ßar a limpeza
                rm -rf /home/vscode/.cache/npm 2>/dev/null || true
                rm -rf /home/vscode/.npm 2>/dev/null || true
            fi
        fi

        # Instalar depend√™ncias com retry
        MAX_RETRIES=3
        for attempt in $(seq 1 $MAX_RETRIES); do
            log "üì¶ Tentativa $attempt de $MAX_RETRIES: Instalando depend√™ncias..."
            if frontend_exec npm ci --no-audit --prefer-offline; then
                success "‚úÖ Depend√™ncias do frontend instaladas com sucesso"
                break
            elif frontend_exec npm install --no-audit; then
                success "‚úÖ Depend√™ncias do frontend instaladas com sucesso (fallback)"
                break
            else
                if [ $attempt -eq $MAX_RETRIES ]; then
                    error "‚ùå Falha ao instalar depend√™ncias do frontend ap√≥s $MAX_RETRIES tentativas"
                    warn "‚ö†Ô∏è Tentando instala√ß√£o manual..."
                    cd frontend
                    npm install --force --no-audit
                    cd /workspace
                else
                    warn "‚ö†Ô∏è Tentativa $attempt falhou, tentando novamente..."
                    sleep 2
                fi
            fi
        done

        # Verificar se node_modules tem o plugin necess√°rio
        if [ ! -d "frontend/node_modules/@vitejs/plugin-react-swc" ]; then
            log "üîß Instalando plugin React SWC faltante..."
            frontend_exec npm install --save-dev @vitejs/plugin-react-swc
        fi

        success "‚úÖ Depend√™ncias do frontend verificadas e atualizadas"
    else
        warn "‚ö†Ô∏è package.json n√£o encontrado no frontend, reinstalando depend√™ncias..."
        frontend_exec npm install
        success "‚úÖ Depend√™ncias do frontend instaladas"
    fi
fi

# 4. Configurar vari√°veis de ambiente
step "üîß Configurando vari√°veis de ambiente..."

# Executar script de setup de ambiente
if [ -f "scripts/setup-env.sh" ] && [ -x "scripts/setup-env.sh" ]; then
    log "Executando script de setup de ambiente..."
    ./scripts/setup-env.sh
    success "‚úÖ Setup de ambiente conclu√≠do"
else
    warn "‚ö†Ô∏è Script setup-env.sh n√£o encontrado, usando configura√ß√£o manual..."

    # Backend .env
    if [ ! -f "backend/.env" ]; then
        log "Criando .env do backend..."
        cp backend/.env.example backend/.env

        # Configura√ß√µes do banco
        sed -i 's/DB_CONNECTION=sqlite/DB_CONNECTION=mysql/' backend/.env
        sed -i 's/DB_HOST=127.0.0.1/DB_HOST=mysql/' backend/.env
        sed -i 's/DB_PORT=3306/DB_PORT=3306/' backend/.env
        sed -i 's/DB_DATABASE=laravel/DB_DATABASE=rei_do_oleo_dev/' backend/.env
        sed -i 's/DB_USERNAME=root/DB_USERNAME=rei_do_oleo/' backend/.env
        sed -i 's/DB_PASSWORD=/DB_PASSWORD=secret123/' backend/.env

        # Configura√ß√µes Redis
        echo "" >> backend/.env
        echo "# Redis Configuration" >> backend/.env
        echo "REDIS_HOST=redis" >> backend/.env
        echo "REDIS_PASSWORD=null" >> backend/.env
        echo "REDIS_PORT=6379" >> backend/.env

        # Configura√ß√µes de Mail
        echo "" >> backend/.env
        echo "# Mail Configuration" >> backend/.env
        echo "MAIL_MAILER=smtp" >> backend/.env
        echo "MAIL_HOST=mailhog" >> backend/.env
        echo "MAIL_PORT=1025" >> backend/.env
        echo "MAIL_USERNAME=null" >> backend/.env
        echo "MAIL_PASSWORD=null" >> backend/.env
        echo "MAIL_ENCRYPTION=null" >> backend/.env

        # Configura√ß√µes MinIO
        echo "" >> backend/.env
        echo "# MinIO S3 Configuration" >> backend/.env
        echo "FILESYSTEM_DISK=s3" >> backend/.env
        echo "AWS_ACCESS_KEY_ID=reidooleo" >> backend/.env
        echo "AWS_SECRET_ACCESS_KEY=secret123456" >> backend/.env
        echo "AWS_DEFAULT_REGION=us-east-1" >> backend/.env
        echo "AWS_BUCKET=rei-do-oleo-storage" >> backend/.env
        echo "AWS_ENDPOINT=http://minio:9000" >> backend/.env
        echo "AWS_USE_PATH_STYLE_ENDPOINT=true" >> backend/.env

        success "‚úÖ Arquivo .env do backend configurado"
    else
        info "‚ÑπÔ∏è Arquivo .env do backend j√° existe"
    fi

    # Frontend .env
    if [ ! -f "frontend/.env" ]; then
        log "Criando .env do frontend..."
        cat > frontend/.env << 'EOF'
# Frontend Environment Variables
VITE_APP_NAME="Rei do √ìleo"
VITE_API_URL=http://localhost:8000/api
VITE_APP_URL=http://localhost:3000
VITE_APP_ENV=development

# üì± PWA Configuration
VITE_PWA_NAME="Rei do √ìleo"
VITE_PWA_SHORT_NAME="Rei do √ìleo"
VITE_PWA_DESCRIPTION="Sistema de Gest√£o de √ìleos"
VITE_PWA_THEME_COLOR="#1e40af"
VITE_PWA_BACKGROUND_COLOR="#ffffff"
EOF
        success "‚úÖ Arquivo .env do frontend configurado"
    else
        info "‚ÑπÔ∏è Arquivo .env do frontend j√° existe"
    fi
fi

# 5. Configurar Laravel
step "üéØ Configurando Laravel..."

# Gerar chave da aplica√ß√£o se n√£o existir
if ! grep -q "APP_KEY=" backend/.env || [ -z "$(grep APP_KEY= backend/.env | cut -d'=' -f2)" ]; then
    backend_exec php artisan key:generate
else
    info "‚ÑπÔ∏è Chave da aplica√ß√£o j√° configurada"
fi

# Aguardar banco estar pronto e verificar migra√ß√µes
log "üóÑÔ∏è Verificando banco de dados..."
DB_AVAILABLE=false
for i in {1..30}; do
    if backend_exec php artisan migrate:status &>/dev/null; then
        DB_AVAILABLE=true
        success "‚úÖ Banco de dados dispon√≠vel!"
        break
    fi
    if [ $i -eq 30 ]; then
        warn "‚ö†Ô∏è Timeout aguardando banco de dados. Continuando..."
        break
    fi
    echo -n "."
    sleep 1
done
echo

# Configurar banco de dados apenas se dispon√≠vel
if [ "$DB_AVAILABLE" = true ]; then
    # Verificar se h√° migra√ß√µes pendentes de forma mais robusta
    log "üîÑ Verificando migra√ß√µes..."
    MIGRATION_STATUS=$(backend_exec php artisan migrate:status --no-ansi 2>/dev/null || echo "ERROR")
    
    if [[ "$MIGRATION_STATUS" == *"ERROR"* ]] || [[ "$MIGRATION_STATUS" == *"No"* ]]; then
        log "üîÑ Executando migra√ß√µes..."
        if backend_exec php artisan migrate --force; then
            success "‚úÖ Migra√ß√µes executadas com sucesso"
        else
            warn "‚ö†Ô∏è Erro ao executar migra√ß√µes, continuando..."
        fi
    else
        info "‚ÑπÔ∏è Migra√ß√µes j√° executadas"
    fi

    # Verificar e publicar configura√ß√µes apenas se necess√°rio
    log "üìÑ Verificando configura√ß√µes dos pacotes..."

    if [ ! -f "backend/config/sanctum.php" ]; then
        log "Publicando configura√ß√µes do Sanctum..."
        backend_exec php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider" --force 2>/dev/null || warn "‚ö†Ô∏è Erro ao publicar Sanctum"
    else
        info "‚ÑπÔ∏è Configura√ß√µes do Sanctum j√° publicadas"
    fi

    if [ ! -f "backend/config/permission.php" ]; then
        log "Publicando configura√ß√µes do Spatie Permission..."
        backend_exec php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider" --force 2>/dev/null || warn "‚ö†Ô∏è Erro ao publicar Permission"
    else
        info "‚ÑπÔ∏è Configura√ß√µes do Spatie Permission j√° publicadas"
    fi

    # Executar migra√ß√µes dos pacotes se necess√°rio (de forma mais robusta)
    log "üîÑ Verificando migra√ß√µes dos pacotes..."
    NEW_MIGRATION_STATUS=$(backend_exec php artisan migrate:status --no-ansi 2>/dev/null || echo "ERROR")
    
    if [[ "$NEW_MIGRATION_STATUS" == *"No"* ]]; then
        log "üîÑ Executando migra√ß√µes dos pacotes..."
        if backend_exec php artisan migrate --force; then
            success "‚úÖ Migra√ß√µes dos pacotes executadas"
        else
            warn "‚ö†Ô∏è Erro ao executar migra√ß√µes dos pacotes, continuando..."
        fi
    fi

    # Criar link simb√≥lico para storage
    if [ ! -L "backend/public/storage" ]; then
        log "üîó Criando link simb√≥lico para storage..."
        backend_exec php artisan storage:link 2>/dev/null || warn "‚ö†Ô∏è Erro ao criar link simb√≥lico"
    fi
else
    warn "‚ö†Ô∏è Banco de dados n√£o dispon√≠vel, pulando configura√ß√µes do Laravel"
fi

# 6. Configurar ferramentas de desenvolvimento
step "üõ†Ô∏è Configurando ferramentas de desenvolvimento..."

# PHP CS Fixer
if [ ! -f ".php-cs-fixer.php" ]; then
    log "Configurando PHP CS Fixer..."
    cat > .php-cs-fixer.php << 'EOF'
<?php

$finder = PhpCsFixer\Finder::create()
    ->in([
        __DIR__ . '/backend/app',
        __DIR__ . '/backend/config',
        __DIR__ . '/backend/database',
        __DIR__ . '/backend/routes',
        __DIR__ . '/backend/tests',
    ])
    ->name('*.php')
    ->notName('*.blade.php')
    ->ignoreDotFiles(true)
    ->ignoreVCS(true);

return (new PhpCsFixer\Config())
    ->setRules([
        '@PSR12' => true,
        'array_syntax' => ['syntax' => 'short'],
        'ordered_imports' => ['sort_algorithm' => 'alpha'],
        'no_unused_imports' => true,
        'not_operator_with_successor_space' => true,
        'trailing_comma_in_multiline' => true,
        'phpdoc_scalar' => true,
        'unary_operator_spaces' => true,
        'binary_operator_spaces' => true,
        'blank_line_before_statement' => [
            'statements' => ['break', 'continue', 'declare', 'return', 'throw', 'try'],
        ],
        'phpdoc_single_line_var_spacing' => true,
        'phpdoc_var_without_name' => true,
        'method_argument_space' => [
            'on_multiline' => 'ensure_fully_multiline',
            'keep_multiple_spaces_after_comma' => true,
        ],
        'single_trait_insert_per_statement' => true,
    ])
    ->setFinder($finder);
EOF
    success "‚úÖ PHP CS Fixer configurado"
else
    info "‚ÑπÔ∏è PHP CS Fixer j√° configurado"
fi

# PHPStan
if [ ! -f "phpstan.neon" ]; then
    log "Configurando PHPStan..."
    cat > phpstan.neon << 'EOF'
parameters:
    level: 8
    paths:
        - backend/app
        - backend/config
        - backend/database
        - backend/routes
        - backend/tests
    excludePaths:
        - backend/app/Console/Kernel.php
    checkMissingIterableValueType: false
    checkGenericClassInNonGenericObjectType: false
EOF
    success "‚úÖ PHPStan configurado"
else
    info "‚ÑπÔ∏è PHPStan j√° configurado"
fi

# ESLint para Frontend
if [ ! -f "frontend/.eslintrc.js" ] && [ -d "frontend" ]; then
    log "Configurando ESLint para Frontend..."
    cat > frontend/.eslintrc.js << 'EOF'
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    '@typescript-eslint/recommended',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.js'],
  parser: '@typescript-eslint/parser',
  plugins: ['react-refresh'],
  rules: {
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}
EOF
    success "‚úÖ ESLint configurado"
else
    info "‚ÑπÔ∏è ESLint j√° configurado"
fi

# Prettier
if [ ! -f ".prettierrc" ]; then
    log "Configurando Prettier..."
    cat > .prettierrc << 'EOF'
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false
}
EOF
    success "‚úÖ Prettier configurado"
else
    info "‚ÑπÔ∏è Prettier j√° configurado"
fi

# 7. Configurar package.json na raiz
if [ ! -f "package.json" ]; then
    log "Criando package.json na raiz..."
    cat > package.json << 'EOF'
{
  "name": "rei-do-oleo",
  "version": "1.0.0",
  "description": "Sistema de Gest√£o de √ìleos - Rei do √ìleo",
  "scripts": {
    "dev": "concurrently \"cd backend && php artisan serve --host=0.0.0.0 --port=8000\" \"cd frontend && npm run dev\"",
    "build": "cd frontend && npm run build",
    "test": "concurrently \"cd backend && php artisan test\" \"cd frontend && npm test\"",
    "lint": "concurrently \"cd backend && ./vendor/bin/php-cs-fixer fix --dry-run --diff\" \"cd frontend && npm run lint\"",
    "lint:fix": "concurrently \"cd backend && ./vendor/bin/php-cs-fixer fix\" \"cd frontend && npm run lint:fix\"",
    "fix:backend": "cd backend && ./vendor/bin/php-cs-fixer fix",
    "fix:frontend": "cd frontend && npm run lint:fix",
    "setup": "bash .devcontainer/scripts/setup.sh",
    "start": "bash .devcontainer/scripts/start.sh",
    "reset": "bash .devcontainer/scripts/reset.sh",
    "backup": "bash .devcontainer/scripts/backup.sh"
  },
  "devDependencies": {
    "concurrently": "^8.2.2",
    "husky": "^8.0.3",
    "lint-staged": "^15.2.0"
  }
}
EOF
    npm install
    success "‚úÖ Package.json criado e depend√™ncias instaladas"
else
    log "Atualizando depend√™ncias do package.json..."
    npm install
    info "‚ÑπÔ∏è Package.json j√° existe, depend√™ncias atualizadas"
fi

# Instalar e configurar Husky (opcional no devcontainer)
if [ ! -d ".husky" ]; then
    log "Configurando Husky para Git Hooks..."

    # Tentar configurar Husky, mas n√£o falhar se n√£o conseguir
    if npx husky install 2>/dev/null; then
        if npx husky add .husky/pre-commit "npx lint-staged" 2>/dev/null; then
            success "‚úÖ Husky configurado com sucesso"
        else
            warn "‚ö†Ô∏è N√£o foi poss√≠vel adicionar hook pre-commit do Husky"
        fi
    else
        warn "‚ö†Ô∏è Husky n√£o p√¥de ser configurado (poss√≠vel problema de permiss√£o no devcontainer)"
        info "‚ÑπÔ∏è Git hooks podem ser configurados manualmente depois"
    fi

    # Configurar lint-staged mesmo se Husky falhar
    cat > .lintstagedrc.json << 'EOF'
{
  "backend/**/*.php": [
    "./vendor/bin/php-cs-fixer fix",
    "./vendor/bin/phpstan analyse --no-progress"
  ],
  "frontend/**/*.{js,jsx,ts,tsx}": [
    "cd frontend && npm run lint:fix"
  ]
}
EOF
    success "‚úÖ Configura√ß√£o lint-staged criada"
else
    info "‚ÑπÔ∏è Husky j√° configurado"
fi

# 8. Configurar banco de dados de teste
step "üß™ Configurando banco de dados de teste..."
if [ "$SERVICES_READY" = true ]; then
    log "Executando setup do banco de teste..."
    bash /workspace/.devcontainer/scripts/setup-test-db.sh
    success "‚úÖ Banco de dados de teste configurado"
else
    warn "‚ö†Ô∏è Servi√ßos n√£o prontos, configura√ß√£o manual do banco de teste necess√°ria"
fi

# 9. Criar bucket no MinIO
step "üì¶ Configurando MinIO Storage..."
if [ "$SERVICES_READY" = true ]; then
    sleep 5  # Aguardar MinIO estar pronto
    if command_exists "mc"; then
        log "Configurando bucket no MinIO..."
        mc alias set minio http://minio:9000 reidooleo secret123456 >/dev/null 2>&1 || true
        mc mb minio/rei-do-oleo-storage >/dev/null 2>&1 || true
        mc policy set public minio/rei-do-oleo-storage >/dev/null 2>&1 || true
        success "‚úÖ MinIO configurado"
    else
        info "‚ÑπÔ∏è MinIO client n√£o dispon√≠vel, configura√ß√£o manual necess√°ria"
    fi
fi

# 10. Verifica√ß√£o final do ambiente
step "üîç Verifica√ß√£o final do ambiente..."

# Verificar se as depend√™ncias cr√≠ticas do frontend est√£o instaladas
if [ -d "frontend/node_modules/@vitejs/plugin-react-swc" ]; then
    success "‚úÖ Depend√™ncias cr√≠ticas do frontend verificadas"
else
    warn "‚ö†Ô∏è Algumas depend√™ncias do frontend podem estar faltando"
    log "Reinstalando depend√™ncias do frontend..."
    frontend_exec npm install --no-workspaces
fi

# 11. Finaliza√ß√£o
success "üéâ Setup completo realizado com sucesso!"
echo -e "${GREEN}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    ‚úÖ AMBIENTE PRONTO!                    ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üöÄ Laravel API: http://localhost:8000                   ‚ïë
‚ïë  ‚öõÔ∏è React Frontend: http://localhost:3000                ‚ïë
‚ïë  üíæ phpMyAdmin: http://localhost:8080                    ‚ïë
‚ïë  üîç Redis Commander: http://localhost:6380               ‚ïë
‚ïë  üìß MailHog: http://localhost:8025                       ‚ïë
‚ïë  üì¶ MinIO Console: http://localhost:9001                 ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üîß Para iniciar desenvolvimento:                        ‚ïë
‚ïë  npm run dev      - Iniciar ambos servidores            ‚ïë
‚ïë                                                          ‚ïë
‚ïë  üìã Scripts de manuten√ß√£o:                               ‚ïë
‚ïë  npm run test     - Executar todos os testes            ‚ïë
‚ïë  npm run lint     - Executar an√°lise de c√≥digo          ‚ïë
‚ïë  npm run fix      - Corrigir problemas de formata√ß√£o    ‚ïë
‚ïë  npm run build    - Build de produ√ß√£o do frontend       ‚ïë
‚ïë  npm run setup:git - Configurar Git manualmente         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

info "üéØ Ambiente de desenvolvimento totalmente configurado!"

# 12. Configurar Git Global
step "üîê Configurando Git Global..."
if [ -n "$GIT_USER_NAME" ] && [ -n "$GIT_USER_EMAIL" ]; then
    log "Configurando usu√°rio Git: $GIT_USER_NAME <$GIT_USER_EMAIL>"
    git config --global user.name "$GIT_USER_NAME"
    git config --global user.email "$GIT_USER_EMAIL"
    git config --global init.defaultBranch main
    git config --global pull.rebase false
    git config --global core.autocrlf input
    git config --global core.editor "code --wait"
    success "‚úÖ Git configurado com sucesso"
else
    warn "‚ö†Ô∏è Vari√°veis GIT_USER_NAME e GIT_USER_EMAIL n√£o definidas"
    info "‚ÑπÔ∏è Configure manualmente com:"
    info "    git config --global user.name \"Seu Nome\""
    info "    git config --global user.email \"seu@email.com\""
fi

# 13. Configurar SSH para Git
step "üîê Configurando SSH para Git..."
if [ -f "/workspace/.devcontainer/scripts/ssh-setup.sh" ]; then
    bash /workspace/.devcontainer/scripts/ssh-setup.sh
else
    info "‚ÑπÔ∏è Script SSH n√£o encontrado, configure manualmente se necess√°rio"
fi

info "üöÄ Execute 'npm run dev' para iniciar os servi√ßos de desenvolvimento!"

# 14. Tratamento de erros e finaliza√ß√£o
step "üîß Finalizando setup..."

# Limpar caches do Laravel se poss√≠vel
if [ -d "backend" ]; then
    log "üßπ Limpando caches do Laravel..."
    backend_exec php artisan config:clear 2>/dev/null || true
    backend_exec php artisan cache:clear 2>/dev/null || true
    backend_exec php artisan route:clear 2>/dev/null || true
    backend_exec php artisan view:clear 2>/dev/null || true
fi

# Verificar se os servi√ßos principais est√£o funcionando
log "üîç Verifica√ß√£o final dos servi√ßos..."

# Verificar Laravel
if [ -f "backend/artisan" ]; then
    if backend_exec php artisan --version >/dev/null 2>&1; then
        success "‚úÖ Laravel funcionando corretamente"
    else
        warn "‚ö†Ô∏è Laravel pode ter problemas"
    fi
fi

# Verificar Frontend
if [ -f "frontend/package.json" ]; then
    if frontend_exec npm --version >/dev/null 2>&1; then
        success "‚úÖ NPM funcionando corretamente"
    else
        warn "‚ö†Ô∏è NPM pode ter problemas"
    fi
fi

# Verificar banco de dados
if [ "$DB_AVAILABLE" = true ]; then
    success "‚úÖ Banco de dados conectando corretamente"
else
    warn "‚ö†Ô∏è Banco de dados pode ter problemas de conex√£o"
fi

# Mensagem final de sucesso
echo -e "${GREEN}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                üéâ SETUP CONCLU√çDO COM SUCESSO!            ‚ïë
‚ïë                                                          ‚ïë
‚ïë  ‚úÖ Backend Laravel configurado                          ‚ïë
‚ïë  ‚úÖ Frontend React configurado                           ‚ïë
‚ïë  ‚úÖ Banco de dados configurado                           ‚ïë
‚ïë  ‚úÖ Ferramentas de desenvolvimento configuradas          ‚ïë
‚ïë                                                          ‚ïë
‚ïë  üöÄ Pr√≥ximo passo: npm run dev                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

success "üéØ Setup do ambiente de desenvolvimento conclu√≠do!"
success "üöÄ O devcontainer est√° pronto para uso!"

# Garantir que o script sempre termine com sucesso
exit 0
