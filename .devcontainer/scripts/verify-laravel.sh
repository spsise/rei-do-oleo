#!/bin/bash

# üîç Verify Laravel Setup - Sistema Rei do √ìleo
# Script para verificar se o Laravel est√° configurado corretamente

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√µes de logging
log() { echo -e "${GREEN}[VERIFY]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${PURPLE}[SUCCESS]${NC} $1"; }
step() { echo -e "${CYAN}[STEP]${NC} $1"; }

# Fun√ß√£o para executar comandos no backend
backend_exec() {
    (cd /workspace/backend && "$@")
}

# Banner
echo -e "${BLUE}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                üîç VERIFY LARAVEL SETUP                    ‚ïë
‚ïë           Verificando configura√ß√£o do Laravel             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

cd /workspace

# 1. Verificar se o backend existe
step "üîç Verificando estrutura do backend..."
if [ ! -d "backend" ]; then
    error "‚ùå Diret√≥rio backend n√£o encontrado!"
    exit 1
fi

if [ ! -f "backend/composer.json" ]; then
    error "‚ùå composer.json n√£o encontrado no backend!"
    exit 1
fi

success "‚úÖ Estrutura b√°sica do backend encontrada"

# 2. Verificar autoloader
step "üì¶ Verificando autoloader do Composer..."
if [ ! -f "backend/vendor/autoload.php" ]; then
    error "‚ùå Autoloader n√£o encontrado!"
    log "Instalando depend√™ncias..."
    backend_exec composer install --no-interaction --prefer-dist --optimize-autoloader
else
    success "‚úÖ Autoloader encontrado"
fi

# 3. Verificar arquivos essenciais
step "üîç Verificando arquivos essenciais..."

# Lista de arquivos essenciais
ESSENTIAL_FILES=(
    "bootstrap/app.php"
    "artisan"
    "config/app.php"
    "app/Providers/AppServiceProvider.php"
    "app/Providers/RouteServiceProvider.php"
    "routes/api.php"
    "routes/web.php"
)

MISSING_FILES=()

for file in "${ESSENTIAL_FILES[@]}"; do
    if [ ! -f "backend/$file" ]; then
        MISSING_FILES+=("$file")
    fi
done

if [ ${#MISSING_FILES[@]} -eq 0 ]; then
    success "‚úÖ Todos os arquivos essenciais encontrados"
else
    warn "‚ö†Ô∏è Arquivos essenciais faltando:"
    for file in "${MISSING_FILES[@]}"; do
        echo "  - $file"
    done
fi

# 4. Verificar se o Laravel consegue executar comandos
step "üß™ Testando comandos do Laravel..."

# Testar vers√£o
if backend_exec php artisan --version >/dev/null 2>&1; then
    VERSION=$(backend_exec php artisan --version)
    success "‚úÖ Laravel funcionando: $VERSION"
else
    error "‚ùå Laravel n√£o consegue executar comandos"
    log "Verificando logs de erro..."
    
    # Tentar executar com mais detalhes
    if backend_exec php artisan --version 2>&1; then
        success "‚úÖ Laravel funcionando ap√≥s verifica√ß√£o detalhada"
    else
        error "‚ùå Laravel ainda n√£o est√° funcionando"
        exit 1
    fi
fi

# 5. Verificar configura√ß√£o do banco de dados
step "üóÑÔ∏è Verificando configura√ß√£o do banco de dados..."

if [ -f "backend/.env" ]; then
    # Verificar se as vari√°veis de banco est√£o configuradas
    if grep -q "DB_CONNECTION=mysql" backend/.env && \
       grep -q "DB_HOST=mysql" backend/.env && \
       grep -q "DB_DATABASE=rei_do_oleo_dev" backend/.env; then
        success "‚úÖ Configura√ß√£o do banco de dados correta"
    else
        warn "‚ö†Ô∏è Configura√ß√£o do banco de dados pode estar incorreta"
    fi
    
    # Testar conex√£o com o banco
    if backend_exec php artisan migrate:status >/dev/null 2>&1; then
        success "‚úÖ Conex√£o com banco de dados funcionando"
    else
        warn "‚ö†Ô∏è Problema na conex√£o com banco de dados"
    fi
else
    error "‚ùå Arquivo .env n√£o encontrado"
fi

# 6. Verificar chave da aplica√ß√£o
step "üîë Verificando chave da aplica√ß√£o..."

if grep -q "APP_KEY=base64:" backend/.env; then
    success "‚úÖ Chave da aplica√ß√£o configurada"
else
    warn "‚ö†Ô∏è Chave da aplica√ß√£o n√£o configurada"
    log "Gerando chave da aplica√ß√£o..."
    backend_exec php artisan key:generate --force
fi

# 7. Verificar caches
step "üßπ Verificando caches..."

# Limpar caches
backend_exec php artisan config:clear 2>/dev/null || true
backend_exec php artisan cache:clear 2>/dev/null || true
backend_exec php artisan route:clear 2>/dev/null || true
backend_exec php artisan view:clear 2>/dev/null || true

success "‚úÖ Caches limpos"

# 8. Verificar rotas
step "üõ£Ô∏è Verificando rotas..."

if backend_exec php artisan route:list >/dev/null 2>&1; then
    ROUTE_COUNT=$(backend_exec php artisan route:list --compact | wc -l)
    success "‚úÖ Rotas carregadas: $ROUTE_COUNT rotas encontradas"
else
    warn "‚ö†Ô∏è Problema ao carregar rotas"
fi

# 9. Verificar providers
step "üîß Verificando service providers..."

# Verificar se os providers essenciais est√£o registrados
if grep -q "AppServiceProvider::class" backend/config/app.php && \
   grep -q "RouteServiceProvider::class" backend/config/app.php; then
    success "‚úÖ Service providers essenciais registrados"
else
    warn "‚ö†Ô∏è Service providers podem estar faltando"
fi

# 10. Teste final
step "üß™ Teste final do Laravel..."

# Testar se consegue executar um comando simples
if backend_exec php artisan list --format=json >/dev/null 2>&1; then
    success "‚úÖ Laravel funcionando perfeitamente!"
else
    error "‚ùå Laravel ainda tem problemas"
    exit 1
fi

# 11. Resumo
echo -e "${GREEN}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    ‚úÖ LARAVEL VERIFIED!                   ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üîß Laravel funcionando corretamente                     ‚ïë
‚ïë  üì¶ Autoloader configurado                                ‚ïë
‚ïë  üóÑÔ∏è Banco de dados conectando                            ‚ïë
‚ïë  üîë Chave da aplica√ß√£o configurada                       ‚ïë
‚ïë  üõ£Ô∏è Rotas carregadas                                      ‚ïë
‚ïë  üßπ Caches limpos                                         ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üöÄ Pr√≥ximos passos:                                      ‚ïë
‚ïë  cd backend && php artisan migrate                        ‚ïë
‚ïë  cd backend && php artisan test                           ‚ïë
‚ïë  npm run dev                                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

success "üéØ Verifica√ß√£o do Laravel conclu√≠da com sucesso!" 