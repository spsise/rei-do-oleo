#!/bin/bash

# üêï Husky Setup Script - Configura√ß√£o Manual de Git Hooks
# Script para configurar Husky quando o setup autom√°tico falhar

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√µes de logging
log() { echo -e "${GREEN}[HUSKY]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
success() { echo -e "${BLUE}[SUCCESS]${NC} $1"; }

cd /workspace

echo -e "${BLUE}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                üêï HUSKY SETUP MANUAL                      ‚ïë
‚ïë           Configura√ß√£o de Git Hooks                       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    error "‚ùå package.json n√£o encontrado. Execute este script na raiz do projeto."
    exit 1
fi

# Verificar se Husky est√° instalado
if ! npm list husky >/dev/null 2>&1; then
    log "üì¶ Instalando Husky..."
    npm install husky --save-dev
fi

# Verificar se estamos em um reposit√≥rio Git
if [ ! -d ".git" ]; then
    warn "‚ö†Ô∏è Diret√≥rio .git n√£o encontrado. Inicializando reposit√≥rio Git..."
    git init
fi

# Configurar Husky
log "üîß Configurando Husky..."
if npx husky install; then
    success "‚úÖ Husky instalado com sucesso"
else
    error "‚ùå Falha ao instalar Husky"
    exit 1
fi

# Adicionar hook pre-commit
log "üìù Adicionando hook pre-commit..."
if npx husky add .husky/pre-commit "npx lint-staged"; then
    success "‚úÖ Hook pre-commit adicionado"
else
    error "‚ùå Falha ao adicionar hook pre-commit"
    exit 1
fi

# Verificar se .lintstagedrc.json existe
if [ ! -f ".lintstagedrc.json" ]; then
    log "üìÑ Criando configura√ß√£o lint-staged..."
    cat > .lintstagedrc.json << 'EOF'
{
  "backend/**/*.php": [
    "./vendor/bin/php-cs-fixer fix",
    "./vendor/bin/phpstan analyse --no-progress"
  ],
  "frontend/**/*.{js,jsx,ts,tsx}": [
    "cd frontend && npm run lint:fix"
  ],
  "**/*.{json,md,yml,yaml}": [
    "prettier --write"
  ]
}
EOF
    success "‚úÖ Configura√ß√£o lint-staged criada"
fi

# Dar permiss√£o de execu√ß√£o aos hooks
if [ -d ".husky" ]; then
    log "üîê Configurando permiss√µes dos hooks..."
    chmod +x .husky/*
    success "‚úÖ Permiss√µes configuradas"
fi

# Verifica√ß√£o final
if [ -f ".husky/pre-commit" ]; then
    success "üéâ Husky configurado com sucesso!"
    echo -e "${GREEN}"
    cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    ‚úÖ HUSKY PRONTO!                       ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üîß Git hooks configurados:                              ‚ïë
‚ïë  ‚Ä¢ pre-commit: Executa lint-staged                       ‚ïë
‚ïë                                                          ‚ïë
‚ïë  üìã Para testar:                                         ‚ïë
‚ïë  git add . && git commit -m "test: test commit"          ‚ïë
‚ïë                                                          ‚ïë
‚ïë  üîç Para desabilitar temporariamente:                    ‚ïë
‚ïë  git commit --no-verify -m "skip hooks"                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
else
    error "‚ùå Falha na configura√ß√£o final do Husky"
    exit 1
fi 