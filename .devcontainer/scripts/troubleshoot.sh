#!/bin/bash

# üîß Troubleshoot DevContainer - Sistema Rei do √ìleo
# Script para diagnosticar e resolver problemas do ambiente de desenvolvimento

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√µes de logging
log() { echo -e "${GREEN}[TROUBLESHOOT]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${PURPLE}[SUCCESS]${NC} $1"; }
step() { echo -e "${CYAN}[STEP]${NC} $1"; }

# Fun√ß√£o para executar comandos no backend
backend_exec() {
    (cd /workspace/backend && "$@")
}

# Fun√ß√£o para executar comandos no frontend
frontend_exec() {
    (cd /workspace/frontend && "$@")
}

# Banner
echo -e "${BLUE}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                üîß TROUBLESHOOT DEVCONTAINER               ‚ïë
‚ïë           Diagn√≥stico e corre√ß√£o de problemas             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

cd /workspace

# 1. Verificar servi√ßos b√°sicos
step "üîç Verificando servi√ßos b√°sicos..."

# Verificar MySQL
if mysqladmin ping -h mysql -u root -proot123 --silent 2>/dev/null; then
    success "‚úÖ MySQL est√° funcionando"
else
    error "‚ùå MySQL n√£o est√° respondendo"
    log "Tentando conectar com credenciais alternativas..."
    if mysqladmin ping -h mysql -u rei_do_oleo -psecret123 --silent 2>/dev/null; then
        success "‚úÖ MySQL funcionando com credenciais alternativas"
    else
        warn "‚ö†Ô∏è MySQL pode n√£o estar inicializado completamente"
    fi
fi

# Verificar Redis
if redis-cli -h redis ping >/dev/null 2>&1; then
    success "‚úÖ Redis est√° funcionando"
else
    warn "‚ö†Ô∏è Redis n√£o est√° respondendo"
fi

# 2. Verificar permiss√µes
step "üîê Verificando permiss√µes..."

# Verificar permiss√µes do workspace
if [ -w "/workspace" ]; then
    success "‚úÖ Permiss√µes do workspace OK"
else
    warn "‚ö†Ô∏è Problemas de permiss√£o no workspace"
    log "Corrigindo permiss√µes..."
    sudo chown -R vscode:vscode /workspace 2>/dev/null || true
    chmod -R u+rw /workspace 2>/dev/null || true
fi

# 3. Verificar estrutura do projeto
step "üìÅ Verificando estrutura do projeto..."

# Verificar backend
if [ -d "backend" ]; then
    success "‚úÖ Diret√≥rio backend encontrado"
    
    if [ -f "backend/composer.json" ]; then
        success "‚úÖ composer.json encontrado"
    else
        error "‚ùå composer.json n√£o encontrado no backend"
    fi
    
    if [ -f "backend/artisan" ]; then
        success "‚úÖ arquivo artisan encontrado"
    else
        error "‚ùå arquivo artisan n√£o encontrado"
    fi
else
    error "‚ùå Diret√≥rio backend n√£o encontrado"
fi

# Verificar frontend
if [ -d "frontend" ]; then
    success "‚úÖ Diret√≥rio frontend encontrado"
    
    if [ -f "frontend/package.json" ]; then
        success "‚úÖ package.json encontrado"
    else
        error "‚ùå package.json n√£o encontrado no frontend"
    fi
else
    error "‚ùå Diret√≥rio frontend n√£o encontrado"
fi

# 4. Verificar depend√™ncias
step "üì¶ Verificando depend√™ncias..."

# Backend
if [ -d "backend" ]; then
    if [ -d "backend/vendor" ]; then
        success "‚úÖ Depend√™ncias PHP instaladas"
    else
        warn "‚ö†Ô∏è Depend√™ncias PHP n√£o instaladas"
        log "Instalando depend√™ncias PHP..."
        backend_exec composer install --no-interaction --prefer-dist
    fi
fi

# Frontend
if [ -d "frontend" ]; then
    if [ -d "frontend/node_modules" ]; then
        success "‚úÖ Depend√™ncias Node.js instaladas"
    else
        warn "‚ö†Ô∏è Depend√™ncias Node.js n√£o instaladas"
        log "Instalando depend√™ncias Node.js..."
        frontend_exec npm install
    fi
fi

# 5. Verificar Laravel especificamente
step "üêò Verificando Laravel..."

if [ -d "backend" ]; then
    # Verificar se o Laravel consegue executar comandos
    if backend_exec php artisan --version >/dev/null 2>&1; then
        VERSION=$(backend_exec php artisan --version)
        success "‚úÖ Laravel funcionando: $VERSION"
    else
        error "‚ùå Laravel n√£o consegue executar comandos"
        log "Executando corre√ß√£o de namespace..."
        
        if [ -f ".devcontainer/scripts/fix-laravel-namespace.sh" ]; then
            bash .devcontainer/scripts/fix-laravel-namespace.sh
        else
            warn "‚ö†Ô∏è Script de corre√ß√£o n√£o encontrado"
        fi
    fi
    
    # Verificar .env
    if [ -f "backend/.env" ]; then
        success "‚úÖ Arquivo .env encontrado"
        
        # Verificar chave da aplica√ß√£o
        if grep -q "APP_KEY=base64:" backend/.env; then
            success "‚úÖ Chave da aplica√ß√£o configurada"
        else
            warn "‚ö†Ô∏è Chave da aplica√ß√£o n√£o configurada"
            log "Gerando chave da aplica√ß√£o..."
            backend_exec php artisan key:generate --force
        fi
    else
        error "‚ùå Arquivo .env n√£o encontrado"
        log "Criando .env..."
        if [ -f "backend/.env.example" ]; then
            cp backend/.env.example backend/.env
            backend_exec php artisan key:generate
        else
            warn "‚ö†Ô∏è .env.example n√£o encontrado"
        fi
    fi
fi

# 6. Verificar banco de dados
step "üóÑÔ∏è Verificando banco de dados..."

if [ -d "backend" ] && [ -f "backend/.env" ]; then
    # Verificar se consegue conectar ao banco
    if backend_exec php artisan migrate:status >/dev/null 2>&1; then
        success "‚úÖ Conex√£o com banco de dados OK"
        
        # Verificar migra√ß√µes
        MIGRATION_STATUS=$(backend_exec php artisan migrate:status --no-ansi 2>/dev/null || echo "ERROR")
        if [[ "$MIGRATION_STATUS" == *"No"* ]]; then
            log "Executando migra√ß√µes..."
            backend_exec php artisan migrate --force
        else
            success "‚úÖ Migra√ß√µes j√° executadas"
        fi
    else
        warn "‚ö†Ô∏è Problema na conex√£o com banco de dados"
        log "Verificando configura√ß√£o do .env..."
        
        # Verificar se as vari√°veis de banco est√£o corretas
        if grep -q "DB_HOST=mysql" backend/.env && \
           grep -q "DB_DATABASE=rei_do_oleo_dev" backend/.env; then
            success "‚úÖ Configura√ß√£o do banco parece correta"
        else
            warn "‚ö†Ô∏è Configura√ß√£o do banco pode estar incorreta"
        fi
    fi
fi

# 7. Verificar frontend
step "‚öõÔ∏è Verificando frontend..."

if [ -d "frontend" ]; then
    # Verificar se consegue executar npm
    if frontend_exec npm --version >/dev/null 2>&1; then
        success "‚úÖ NPM funcionando"
        
        # Verificar se consegue fazer build
        if frontend_exec npm run build --dry-run >/dev/null 2>&1 || \
           frontend_exec npm run type-check >/dev/null 2>&1; then
            success "‚úÖ Frontend configurado corretamente"
        else
            warn "‚ö†Ô∏è Frontend pode ter problemas de configura√ß√£o"
        fi
    else
        error "‚ùå NPM n√£o est√° funcionando"
    fi
fi

# 8. Limpar caches e regenerar
step "üßπ Limpando caches e regenerando..."

# Backend
if [ -d "backend" ]; then
    backend_exec php artisan config:clear 2>/dev/null || true
    backend_exec php artisan cache:clear 2>/dev/null || true
    backend_exec php artisan route:clear 2>/dev/null || true
    backend_exec php artisan view:clear 2>/dev/null || true
    backend_exec composer dump-autoload --optimize 2>/dev/null || true
    success "‚úÖ Caches do backend limpos"
fi

# Frontend
if [ -d "frontend" ]; then
    frontend_exec npm cache clean --force 2>/dev/null || true
    success "‚úÖ Cache do frontend limpo"
fi

# 9. Teste final
step "üß™ Teste final..."

# Testar se o Laravel est√° funcionando
if [ -d "backend" ]; then
    if backend_exec php artisan list --format=json >/dev/null 2>&1; then
        success "‚úÖ Laravel funcionando perfeitamente"
    else
        error "‚ùå Laravel ainda tem problemas"
    fi
fi

# Testar se o frontend est√° funcionando
if [ -d "frontend" ]; then
    if frontend_exec npm --version >/dev/null 2>&1; then
        success "‚úÖ Frontend funcionando"
    else
        error "‚ùå Frontend tem problemas"
    fi
fi

# 10. Resumo e recomenda√ß√µes
echo -e "${GREEN}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üîß TROUBLESHOOT COMPLETO               ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  ‚úÖ Diagn√≥stico conclu√≠do                                 ‚ïë
‚ïë  üßπ Caches limpos                                         ‚ïë
‚ïë  üì¶ Depend√™ncias verificadas                              ‚ïë
‚ïë  üóÑÔ∏è Banco de dados testado                                ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üöÄ Pr√≥ximos passos:                                      ‚ïë
‚ïë  npm run dev      - Iniciar desenvolvimento               ‚ïë
‚ïë  npm run test     - Executar testes                       ‚ïë
‚ïë  npm run lint     - Verificar c√≥digo                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# 11. Comandos √∫teis
info "üîß Comandos √∫teis para troubleshooting:"
echo "  - bash .devcontainer/scripts/fix-laravel-namespace.sh"
echo "  - bash .devcontainer/scripts/verify-laravel.sh"
echo "  - bash .devcontainer/scripts/setup-test-db.sh"
echo "  - docker-compose logs [service]"
echo "  - docker-compose restart [service]"

success "üéØ Troubleshooting conclu√≠do!" 