#!/bin/bash

# üîß Troubleshooting Script - Resolu√ß√£o de Problemas do DevContainer
# Script para diagnosticar e resolver problemas comuns

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Fun√ß√µes de logging
log() { echo -e "${GREEN}[TROUBLESHOOT]${NC} $1"; }
warn() { echo -e "${YELLOW}[WARNING]${NC} $1"; }
error() { echo -e "${RED}[ERROR]${NC} $1"; }
info() { echo -e "${BLUE}[INFO]${NC} $1"; }
success() { echo -e "${PURPLE}[SUCCESS]${NC} $1"; }
step() { echo -e "${CYAN}[STEP]${NC} $1"; }

cd /workspace

echo -e "${BLUE}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                üîß TROUBLESHOOTING                         ‚ïë
‚ïë           Diagn√≥stico e Resolu√ß√£o de Problemas            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# Fun√ß√£o para verificar se comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fun√ß√£o para executar comandos no backend
backend_exec() {
    (cd /workspace/backend && "$@")
}

# Fun√ß√£o para executar comandos no frontend
frontend_exec() {
    (cd /workspace/frontend && "$@")
}

# 1. Verificar estrutura do projeto
step "üîç Verificando estrutura do projeto..."
if [ ! -d "backend" ]; then
    error "‚ùå Diret√≥rio backend n√£o encontrado"
    exit 1
fi

if [ ! -d "frontend" ]; then
    error "‚ùå Diret√≥rio frontend n√£o encontrado"
    exit 1
fi

if [ ! -f "package.json" ]; then
    error "‚ùå package.json n√£o encontrado"
    exit 1
fi

success "‚úÖ Estrutura do projeto OK"

# 2. Verificar depend√™ncias do backend
step "üêò Verificando depend√™ncias do backend..."
if [ ! -d "backend/vendor" ]; then
    warn "‚ö†Ô∏è Vendor n√£o encontrado, instalando depend√™ncias..."
    backend_exec composer install --no-interaction
else
    info "‚ÑπÔ∏è Vendor encontrado"
fi

# 3. Verificar depend√™ncias do frontend
step "‚öõÔ∏è Verificando depend√™ncias do frontend..."
if [ ! -d "frontend/node_modules" ]; then
    warn "‚ö†Ô∏è node_modules n√£o encontrado, instalando depend√™ncias..."
    frontend_exec npm install
else
    info "‚ÑπÔ∏è node_modules encontrado"
fi

# 4. Verificar depend√™ncias da raiz
step "üì¶ Verificando depend√™ncias da raiz..."
if [ ! -d "node_modules" ]; then
    warn "‚ö†Ô∏è node_modules da raiz n√£o encontrado, instalando depend√™ncias..."
    npm install
else
    info "‚ÑπÔ∏è node_modules da raiz encontrado"
fi

# 5. Verificar configura√ß√£o do Husky
step "üêï Verificando configura√ß√£o do Husky..."
if [ ! -d ".husky" ]; then
    warn "‚ö†Ô∏è Husky n√£o configurado"
    info "‚ÑπÔ∏è Execute: npm run setup:husky"
else
    success "‚úÖ Husky configurado"
fi

# 6. Verificar arquivos de configura√ß√£o
step "‚öôÔ∏è Verificando arquivos de configura√ß√£o..."

# Backend .env
if [ ! -f "backend/.env" ]; then
    warn "‚ö†Ô∏è backend/.env n√£o encontrado"
    if [ -f "backend/.env.example" ]; then
        log "üìã Copiando .env.example para .env..."
        cp backend/.env.example backend/.env
        success "‚úÖ .env criado"
    else
        error "‚ùå .env.example n√£o encontrado"
    fi
else
    success "‚úÖ backend/.env OK"
fi

# Frontend .env
if [ ! -f "frontend/.env" ]; then
    warn "‚ö†Ô∏è frontend/.env n√£o encontrado"
    if [ -f "frontend/.env.example" ]; then
        log "üìã Copiando .env.example para .env..."
        cp frontend/.env.example frontend/.env
        success "‚úÖ .env criado"
    else
        info "‚ÑπÔ∏è .env.example n√£o encontrado (opcional)"
    fi
else
    success "‚úÖ frontend/.env OK"
fi

# 7. Verificar permiss√µes
step "üîê Verificando permiss√µes..."
if [ -d ".husky" ]; then
    if [ ! -x ".husky/pre-commit" ]; then
        warn "‚ö†Ô∏è Hook pre-commit sem permiss√£o de execu√ß√£o"
        chmod +x .husky/*
        success "‚úÖ Permiss√µes corrigidas"
    else
        success "‚úÖ Permiss√µes dos hooks OK"
    fi
fi

# 8. Verificar servi√ßos
step "üîå Verificando servi√ßos..."
if command_exists "mysqladmin"; then
    if mysqladmin ping -h mysql -u root -proot123 --silent 2>/dev/null; then
        success "‚úÖ MySQL OK"
    else
        warn "‚ö†Ô∏è MySQL n√£o responde"
    fi
else
    info "‚ÑπÔ∏è mysqladmin n√£o dispon√≠vel"
fi

if command_exists "redis-cli"; then
    if redis-cli -h redis ping >/dev/null 2>&1; then
        success "‚úÖ Redis OK"
    else
        warn "‚ö†Ô∏è Redis n√£o responde"
    fi
else
    info "‚ÑπÔ∏è redis-cli n√£o dispon√≠vel"
fi

# 9. Verificar build do frontend
step "üèóÔ∏è Verificando build do frontend..."
if frontend_exec npm run build >/dev/null 2>&1; then
    success "‚úÖ Build do frontend OK"
else
    warn "‚ö†Ô∏è Build do frontend falhou"
    info "‚ÑπÔ∏è Execute: cd frontend && npm run build"
fi

# 10. Verificar testes do backend
step "üß™ Verificando testes do backend..."
if backend_exec php artisan test --stop-on-failure >/dev/null 2>&1; then
    success "‚úÖ Testes do backend OK"
else
    warn "‚ö†Ô∏è Testes do backend falharam"
    info "‚ÑπÔ∏è Execute: cd backend && php artisan test"
fi

# 11. Resumo final
echo -e "${BLUE}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üìã RESUMO FINAL                        ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
EOF
echo -e "${NC}"

if [ -d ".husky" ]; then
    success "‚úÖ Husky configurado"
else
    warn "‚ö†Ô∏è Husky n√£o configurado - Execute: npm run setup:husky"
fi

if [ -f "backend/.env" ]; then
    success "‚úÖ Backend configurado"
else
    warn "‚ö†Ô∏è Backend n√£o configurado"
fi

if [ -d "frontend/node_modules" ]; then
    success "‚úÖ Frontend configurado"
else
    warn "‚ö†Ô∏è Frontend n√£o configurado"
fi

echo -e "${BLUE}"
cat << "EOF"
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë  üîß Comandos √∫teis:                                       ‚ïë
‚ïë  npm run dev          - Iniciar desenvolvimento          ‚ïë
‚ïë  npm run setup:husky  - Configurar Husky manualmente     ‚ïë
‚ïë  npm run test         - Executar todos os testes         ‚ïë
‚ïë  npm run lint         - Executar an√°lise de c√≥digo       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

success "üéâ Troubleshooting conclu√≠do!" 