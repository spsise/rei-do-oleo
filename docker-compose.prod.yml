version: '3.8'

services:
  # Backend Laravel
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend.prod
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_HOST=mysql
      - DB_DATABASE=reidooleo_prod
      - DB_USERNAME=reidooleo
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_BUCKET=${AWS_BUCKET}
    volumes:
      - backend-storage:/var/www/html/storage
    depends_on:
      - mysql
      - redis
    networks:
      - reidooleo
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend React (Build)
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/Dockerfile.frontend.prod
    networks:
      - reidooleo

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/sites-prod:/etc/nginx/sites-available
      - ./docker/nginx/ssl:/etc/nginx/ssl
      - ./frontend/dist:/var/www/frontend
    depends_on:
      - backend
    networks:
      - reidooleo
    restart: unless-stopped

  # MySQL Database
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_DATABASE: reidooleo_prod
      MYSQL_USER: reidooleo
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
    volumes:
      - mysql-data:/var/lib/mysql
      - ./docker/mysql/mysql.prod.conf:/etc/mysql/conf.d/custom.cnf
    networks:
      - reidooleo
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
      - ./docker/redis/redis.prod.conf:/usr/local/etc/redis/redis.conf
    networks:
      - reidooleo
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Laravel Queue Worker
  queue:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend.prod
    command: php artisan queue:work --verbose --tries=3 --timeout=90
    environment:
      - APP_ENV=production
      - DB_HOST=mysql
      - DB_DATABASE=reidooleo_prod
      - DB_USERNAME=reidooleo
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
    depends_on:
      - mysql
      - redis
    networks:
      - reidooleo
    restart: unless-stopped
    deploy:
      replicas: 2

  # Laravel Scheduler
  scheduler:
    build:
      context: ./backend
      dockerfile: ../docker/Dockerfile.backend.prod
    command: php artisan schedule:work
    environment:
      - APP_ENV=production
      - DB_HOST=mysql
      - DB_DATABASE=reidooleo_prod
      - DB_USERNAME=reidooleo
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
    depends_on:
      - mysql
      - redis
    networks:
      - reidooleo
    restart: unless-stopped

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - reidooleo
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/monitoring/grafana:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    networks:
      - reidooleo
    restart: unless-stopped

volumes:
  mysql-data:
  redis-data:
  backend-storage:
  prometheus-data:
  grafana-data:

networks:
  reidooleo:
    driver: bridge 